{"version":3,"sources":["AppMode.js","components/NavBar.js","components/SideMenu.js","components/ModeBar.js","components/ConfirmDeleteAccount.js","components/CreateEditAccountDialog.js","components/ResetPasswordDialog.js","components/LookUpAccountDialog.js","components/SecurityQuestionDialog.js","components/LoginPage.js","components/FeedPage.js","components/ConfirmDeleteRound.js","components/RoundsTable.js","components/RoundForm.js","components/FloatingButton.js","components/Rounds.js","components/AllCourses.js","components/NearbyCourses.js","components/RatesModal.js","components/SpecificCourses.js","components/CoursesPage.js","components/AboutBox.js","components/App.js","serviceWorker.js","index.js"],"names":["AppMode","LOGIN","FEED","ROUNDS","ROUNDS_LOGROUND","ROUNDS_EDITROUND","COURSES","COURSES_NEARBY","COURSES_ALL","Object","freeze","NavBar","getMenuBtnIcon","props","mode","menuOpen","handleMenuBtnClick","changeMode","toggleMenuOpen","className","this","aboutOpen","onClick","id","src","alt","height","width","title","React","Component","SideMenu","renderModeMenuItems","profilePicURL","displayName","localAccount","editAccount","showAbout","logOut","ModeBar","ConfirmDeleteAccount","handleChange","match","emailRef","current","value","email","state","emailMatches","setState","createRef","focus","role","close","type","ref","onChange","deleteAccount","disabled","CreateEditAccountDialog","checkDataValidity","password","passwordRepeat","repeatPassRef","setCustomValidity","event","formUpdated","origAccountInfo","formIsUpdated","target","name","length","self","reader","FileReader","readAsDataURL","profilePicRef","files","addEventListener","result","updateField","updateVal","securityQuestion","securityAnswer","setDefaultDisplayName","handleSubmit","a","preventDefault","userData","url","accountName","create","fetch","headers","method","body","JSON","stringify","res","status","done","text","resText","confirmDelete","confirmDeleteAccount","e","newUserRef","userId","json","parse","cancel","onSubmit","autocomplete","size","placeholder","pattern","required","onBlur","accept","profilePic","profilePicDataURL","rows","cols","maxLength","ResetPasswordDialog","resetPasswordRef","resetPasswordRepeatRef","resetPassword","errorMsg","checkForSubmit","code","cancelResetPassword","onKeyUp","LookUpAccountDialog","handleLookUpAccount","response","obj","authStrategy","getSecurityAnswer","ErrMsg","errMsg","SecurityQuestionDialog","securityAnswerRef","answer","getNewPassword","readOnly","question","LoginPage","handleLoginSubmit","loginBtnIcon","loginBtnLabel","emailInputRef","passwordInputRef","window","open","statusMsg","accountCreateDone","msg","showCreateAccountDialog","cancelCreateAccount","resetUserId","resetQ","resetA","showLookUpAccountDialog","showSecurityQuestionDialog","showResetPaswordDialog","handleOAuthLogin","provider","handleOAuthLoginClick","setTimeout","pw","showResetPasswordDialog","deleted","closeStatusMsg","githubIcon","githubLabel","loginMsg","newAccountCreated","htmlFor","style","padding","fontSize","FeedPage","fontStyle","ConfirmDeleteRound","deleteRound","RoundsTable","editRound","setEditId","showConfirmDelete","setDeleteId","renderTable","table","r","push","key","rounds","date","substring","course","Number","strokes","minutes","seconds","keys","colSpan","RoundForm","newSec","newSGS","computeSGS","SGS","newStrokes","newMin","faIcon","btnLabel","roundData","saveRound","min","sec","today","Date","now","getTimezoneOffset","toISOString","substr","holes","notes","thisRound","startData","max","FloatingButton","handleClick","Rounds","addRound","newData","userObj","refreshOnUpdate","editId","_id","deleteId","val","closeErrorMsg","icon","AllCourses","toggleGetCourseClicked","getCourseClicked","getCourse","then","setErrorMsg","statusText","Error","console","log","thisCourse","map","c","Col","marginTop","marginBottom","Card","display","Img","variant","picture","Body","Title","location","Text","review","Footer","rating","catch","error","Container","fluid","Row","noGutters","NearbyCourses","RatesModal","handleClose","textAlign","href","SpecificCourses","setGetRatesTrue","getRatesButtonClicked","setSelectButtonValue","newVal","selectButtonValue","setSearchTrue","searchStart","setSearchFalse","setSearchCourseClickedTrue","searchCourseClicked","setSearchCourseClickedFalse","handleInputChange","query","prevState","filteredData","data","filter","element","toLowerCase","includes","getSearchedCourse","Button","toggleGetRatesClicked","toggleAddCourseClicked","addCourseClicked","addCourse","courseData","yardage","runningDistance","timePar","bestScore","recordHolder","getRates","data-tip","effect","i","CoursesPage","AboutBox","modeTitle","modeToPage","App","newMode","handleChangeMode","openMenu","closeMenu","setUserId","Id","authenticated","showEditAccount","showEditAccountDialog","cancelEditAccount","editAccountDone","showAboutDialog","isAuthenticated","user","ModePage","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kTAEMA,EAAU,CACZC,MAAO,YACPC,KAAM,WACNC,OAAQ,aACRC,gBAAiB,sBACjBC,iBAAkB,uBAClBC,QAAS,cACTC,eAAgB,qBAChBC,YAAa,mBAGjBC,OAAOC,OAAOV,GAECA,QC4BAW,E,2MAtCbC,eAAiB,WACb,OAAI,EAAKC,MAAMC,OAASd,EAAQI,iBAC5B,EAAKS,MAAMC,OAASd,EAAQK,iBACrB,mBACP,EAAKQ,MAAME,SACN,cACF,c,EAGXC,mBAAqB,WACf,EAAKH,MAAMC,OAASd,EAAQI,iBAC5B,EAAKS,MAAMC,OAASd,EAAQK,iBAC9B,EAAKQ,MAAMI,WAAWjB,EAAQG,QACrB,EAAKU,MAAMC,MAAQd,EAAQC,OACpC,EAAKY,MAAMK,kB,wEAMb,OACA,yBAAKC,UAAW,UAAYC,KAAKP,MAAMQ,UAAY,gBAAgB,KACnE,0BAAMF,UAAU,gBACd,4BAAQA,UAAU,eAAeG,QAASF,KAAKJ,oBAC7C,0BAAMO,GAAG,cAAcJ,UAAW,qBAAuBC,KAAKR,oBAGhE,yBAAKY,IAAI,wBAAwBC,IAAI,mBAAmBC,OAAO,OAC/DC,MAAM,SACN,0BAAMR,UAAU,gBAAhB,OACSC,KAAKP,MAAMe,a,GAhCLC,IAAMC,WCsEZC,E,2MAhEfC,oBAAsB,WACpB,OAAQ,EAAKnB,MAAMC,MACjB,KAAKd,EAAQE,KACX,OACE,6BACA,uBAAGiB,UAAU,iBACT,0BAAMA,UAAU,gBADpB,sBAEA,uBAAGA,UAAU,kBACT,0BAAMA,UAAU,iBADpB,oBAKJ,KAAKnB,EAAQG,OACX,OACE,6BACE,uBAAGgB,UAAU,iBACX,0BAAMA,UAAU,eADlB,qBAEA,uBAAGA,UAAU,iBACX,0BAAMA,UAAU,iBADlB,sBAKN,KAAKnB,EAAQM,QACb,KAAKN,EAAQO,eACb,KAAKP,EAAQQ,YACX,OACE,6BACA,uBAAGW,UAAU,gBAAgBG,QAAS,kBAAM,EAAKT,MAAMI,WAAWjB,EAAQM,WACtE,0BAAMa,UAAU,iBADpB,uBAEA,uBAAGA,UAAU,gBAAgBG,QAAS,kBAAM,EAAKT,MAAMI,WAAWjB,EAAQO,kBACtE,0BAAMY,UAAU,qBADpB,sBAEA,uBAAGA,UAAU,gBAAgBG,QAAS,kBAAM,EAAKT,MAAMI,WAAWjB,EAAQQ,eACtE,0BAAMW,UAAU,kBADpB,uCAIJ,QACI,OAAO,O,wEAKR,OACC,yBAAKA,UAAW,aAAeC,KAAKP,MAAME,SAAW,gBAAkB,mBAClEO,QAASF,KAAKP,MAAMK,gBAEvB,yBAAKC,UAAU,kBACb,yBAAKK,IAAKJ,KAAKP,MAAMoB,cAAeP,OAAO,KAAKC,MAAM,OACtD,0BAAMJ,GAAG,SAASJ,UAAU,mBAA5B,OAAqDC,KAAKP,MAAMqB,cAGjEd,KAAKY,sBAELZ,KAAKP,MAAMsB,aACV,uBAAGZ,GAAG,aAAaJ,UAAU,gBAAgBG,QAASF,KAAKP,MAAMuB,aAC/D,0BAAMjB,UAAU,eADlB,eAC0D,KAC5D,uBAAGI,GAAG,WAAWJ,UAAU,gBAAgBG,QAASF,KAAKP,MAAMwB,WAC7D,0BAAMlB,UAAU,sBADlB,aAEA,uBAAGI,GAAG,YAAYJ,UAAU,gBAAgBG,QAASF,KAAKP,MAAMyB,QAC9D,0BAAMnB,UAAU,uBADlB,oB,GA9DaU,IAAMC,WC8BdS,E,iLA7BD,IAAD,OACP,OACE,yBAAKpB,UAAW,WAAaC,KAAKP,MAAMC,OAASd,EAAQC,MACvD,aAAgBmB,KAAKP,MAAME,UAAYK,KAAKP,MAAMQ,UAAY,wBAA0B,aAC1F,uBAAGF,UAAYC,KAAKP,MAAMC,OAASd,EAAQE,KAAO,iBAAmB,KACjEoB,QAAS,kBAAI,EAAKT,MAAMI,WAAWjB,EAAQE,QAC7C,0BAAMiB,UAAU,8BAChB,0BAAMA,UAAU,gBAAhB,SAEF,uBAAGA,UAAYC,KAAKP,MAAMC,OAASd,EAAQG,QACpCiB,KAAKP,MAAMC,OAASd,EAAQK,kBAC5Be,KAAKP,MAAMC,OAASd,EAAQI,gBACzB,iBAAmB,KAC1BkB,QAAS,kBAAI,EAAKT,MAAMI,WAAWjB,EAAQG,UAC5C,0BAAMgB,UAAU,gCAChB,0BAAMA,UAAU,gBAAhB,WAEF,uBAAGA,UAAaC,KAAKP,MAAMC,OAASd,EAAQM,SAC3Cc,KAAKP,MAAMC,OAASd,EAAQO,gBAC5Ba,KAAKP,MAAMC,OAASd,EAAQQ,YAAe,iBAAmB,KAC7Dc,QAAS,kBAAI,EAAKT,MAAMI,WAAWjB,EAAQM,WAC3C,0BAAMa,UAAU,6BAChB,0BAAMA,UAAU,gBAAhB,iB,GAvBYU,IAAMC,W,gBCqDbU,E,YAtDX,aAAe,IAAD,8BACV,+CASJC,aAAe,WACX,IAAMC,EAAS,EAAKC,SAASC,QAAQC,QAAU,EAAKhC,MAAMiC,MACtDJ,GAAS,EAAKK,MAAMC,cACpB,EAAKC,SAAS,CAACD,aAAcN,KAXjC,EAAKC,SAAWd,IAAMqB,YACtB,EAAKH,MAAQ,CAACC,cAAc,GAHlB,E,iFAOV5B,KAAKuB,SAASC,QAAQO,U,+BAWtB,OACA,yBAAK5B,GAAG,aAAaJ,UAAU,QAAQiC,KAAK,UAC5C,yBAAKjC,UAAU,iBACX,yBAAKA,UAAU,gBACb,gCACE,wBAAIA,UAAU,eAAc,yDAE7B,4BAAQI,GAAG,aAAaJ,UAAU,cAAcG,QAASF,KAAKP,MAAMwC,OAApE,SAGH,yBAAKlC,UAAU,cACb,yEAA8C,6BAC3C,6DACH,iDACkBC,KAAKP,MAAMiC,MAD7B,KAEE,6BACA,2BACI3B,UAAU,cACVmC,KAAK,OACLC,IAAKnC,KAAKuB,SACVa,SAAUpC,KAAKqB,gBAEnB,8BAEJ,yBAAKtB,UAAU,gBACT,4BAAQA,UAAU,iBAAiBG,QAASF,KAAKP,MAAM4C,cAAeC,UAAWtC,KAAK2B,MAAMC,cAA5F,0BAEA,4BAAQ7B,UAAU,oBAAoBG,QAASF,KAAKP,MAAMwC,OAA1D,qB,GA9CiBxB,IAAMC,WC+V1B6B,E,YA3VX,WAAY9C,GAAQ,IAAD,8BACf,4CAAMA,KA+CV+C,kBAAoB,WACZ,EAAKb,MAAMc,UAAY,EAAKd,MAAMe,eAElC,EAAKC,cAAcnB,QAAQoB,kBAC3B,gEAEA,EAAKD,cAAcnB,QAAQoB,kBAAkB,KAtDlC,EA2DnBvB,aAAe,SAACwB,GACZ,IAgBO,EAhBDC,EAAuC,MAAxB,EAAKC,iBAAiC,EAAKC,cAAcH,EAAMI,OAAOC,KAAKL,EAAMI,OAAOxB,OAC7G,GAA0B,eAAtBoB,EAAMI,OAAOC,KACb,GAAiC,GAA7BL,EAAMI,OAAOxB,MAAM0B,OACnB,EAAKtB,SAAS,CAAChB,cAAe,oFACfiC,YAAaA,GACb,EAAKN,uBACjB,CACH,IAAMY,EAAI,eACJC,EAAS,IAAIC,WACnBD,EAAOE,cAAc,EAAKC,cAAchC,QAAQiC,MAAM,IACtDJ,EAAOK,iBAAiB,QAAO,WAC3BN,EAAKvB,SAAS,CAAChB,cAAgBb,KAAK2D,OACrBb,YAAaA,GAAa9C,KAAKwC,2BAKtD,EAAKX,UAAL,mBAAgBgB,EAAMI,OAAOC,KAAOL,EAAMI,OAAOxB,OAAjD,4BAC4BqB,GAD5B,GACyC,EAAKN,oBA9EnC,EAsFnBQ,cAAgB,SAACY,EAAYC,GACzB,OAAI,EAAKd,gBAAgBa,IAAgBC,IACtB,eAAfD,GACC,EAAKjC,MAAMb,aAAe,EAAKiC,gBAAgBjC,cAEjC,iBAAf8C,GACC,EAAKjC,MAAMd,eAAiB,EAAKkC,gBAAgBlC,gBAEnC,YAAf+C,GACA,EAAKjC,MAAMc,WAAa,EAAKM,gBAAgBN,WAE9B,kBAAfmB,GACA,EAAKjC,MAAMe,iBAAmB,EAAKK,gBAAgBL,iBAEpC,oBAAfkB,GACA,EAAKjC,MAAMmC,mBAAqB,EAAKf,gBAAgBe,kBAEtC,kBAAfF,GACA,EAAKjC,MAAMoC,iBAAmB,EAAKhB,gBAAgBgB,qBAxGxC,EAgHnBC,sBAAwB,SAACnB,GACnBA,EAAMI,OAAOxB,MAAM0B,OAAS,GAAgC,KAA3B,EAAKxB,MAAMb,aAC9C,EAAKe,SAAS,CAACf,YAAa+B,EAAMI,OAAOxB,SAlH1B,EA4HnBwC,aA5HmB,uCA4HJ,WAAMpB,GAAN,uBAAAqB,EAAA,yDACXrB,EAAMsB,iBAEFC,EAAW,CACXtD,YAAa,EAAKa,MAAMb,YACxB2B,SAAU,EAAKd,MAAMc,SACrB5B,cAAe,EAAKc,MAAMd,cAC1BiD,iBAAkB,EAAKnC,MAAMmC,iBAC7BC,eAAgB,EAAKpC,MAAMoC,gBAEzBM,EAAM,UAAY,EAAK1C,MAAM2C,aAE/B,EAAK7E,MAAM8E,OAZJ,iCAaKC,MAAMH,EAAK,CACnBI,QAAS,CACL,OAAU,mBACV,eAAgB,oBAEpBC,OAAQ,OACRC,KAAMC,KAAKC,UAAUT,KAnBlB,UAoBW,MAPlBU,EAbO,QAoBCC,OApBD,iBAqBH,EAAKtF,MAAMuF,KAAK,qDAAoD,GArBjE,yCAwBmBF,EAAIG,OAxBvB,QAwBGC,EAxBH,OAyBH,EAAKzF,MAAMuF,KAAKE,GAAQ,GAzBrB,iDA4BKV,MAAMH,EAAK,CACnBI,QAAS,CACL,OAAU,mBACV,eAAgB,oBAEpBC,OAAQ,MACRC,KAAMC,KAAKC,UAAUT,KAlClB,WAmCW,MAPlBU,EA5BO,QAmCCC,OAnCD,iBAoCH,EAAKtF,MAAMuF,KAAK,yBAAwB,GApCrC,yCAuCmBF,EAAIG,OAvCvB,QAuCGC,EAvCH,OAwCH,EAAKzF,MAAMuF,KAAKE,GAAQ,GAxCrB,4CA5HI,wDA6KnB7C,cA7KmB,sBA6KH,gCAAA6B,EAAA,6DACPG,EAAM,UAAY,EAAK1C,MAAM2C,YADtB,SAEKE,MAAMH,EACX,CAACK,OAAQ,WAHT,UAIM,MAFbI,EAFO,QAIJC,OAJI,gBAKR,EAAKtF,MAAMuF,KAAK,YAAc,EAAKrD,MAAM2C,YAAc,uBAAsB,GALrE,wCAQcQ,EAAIG,OARlB,QAQFC,EARE,OASR,EAAKzF,MAAMuF,KAAKE,GAAQ,GAThB,QAWZ,EAAKrD,SAAS,CAACsD,eAAe,IAXlB,4CA7KG,EA8LnBC,qBAAuB,SAACC,GACpBA,EAAElB,iBACF,EAAKtC,SAAS,CAACsD,eAAe,KA9L9B,EAAKpC,gBAAkB,KAEvB,EAAKuC,WAAa7E,IAAMqB,YACxB,EAAKa,cAAgBlC,IAAMqB,YAC3B,EAAK0B,cAAgB/C,IAAMqB,YAC3B,EAAKH,MAAQ,CAAC2C,YAAa,GACbxD,YAAa,GACbD,cAAe,oFACf4B,SAAU,GACVC,eAAgB,GAChBoB,iBAAkB,GAClBC,eAAgB,GAChBjB,aAAa,EACbqC,eAAe,GAfd,E,0MAqBVnF,KAAKP,MAAM8E,O,wBAENF,EAAM,UAAYrE,KAAKP,MAAM8F,O,SACjBf,MAAMH,G,cAAlBS,E,gBACaA,EAAIU,O,OAAjBA,E,OACApB,EAAWQ,KAAKa,MAAMD,GAC5BxF,KAAK+C,gBAAkBqB,EACvBpE,KAAK+C,gBAAgBL,eAAiB0B,EAAS3B,SAC/CzC,KAAK6B,SAAS,CAACyC,YAAatE,KAAKP,MAAM8F,OACxBzE,YAAasD,EAAStD,YACtBD,cAAeuD,EAASvD,cACxB4B,SAAU2B,EAAS3B,SACnBC,eAAgB0B,EAAS3B,SACzBqB,iBAAkBM,EAASN,iBAC3BC,eAAgBK,EAASL,iB,sIAgKtC,IAAD,OACT,OACA,yBAAKhE,UAAU,QAAQiC,KAAK,UAC5B,yBAAKjC,UAAU,0BACX,yBAAKA,UAAU,6BACX,yBAAKA,UAAU,gBACb,4BAAI,2BAAIC,KAAKP,MAAM8E,OAAS,qBAAuB,iBACnD,4BAAQxE,UAAU,cACTG,QAASF,KAAKP,MAAMiG,QAD7B,SAIF,yBAAK3F,UAAU,cACf,0BAAM4F,SAAU3F,KAAKiE,cACrB,wCAEI,2BACA2B,aAAa,MACbtD,UAAWtC,KAAKP,MAAM8E,OACtBxE,UAAU,qCACVmD,KAAK,cACLhB,KAAK,QACL2D,KAAK,KACLC,YAAY,sBACZC,QAAQ,kDACRC,UAAU,EACV7D,IAAKnC,KAAKsF,WACV7D,MAAOzB,KAAK2B,MAAM2C,YAClBlC,SAAUpC,KAAKqB,aACf4E,OAAQjG,KAAKgE,yBAGjB,6BACA,2CAEI,2BACA4B,aAAa,MACb7F,UAAU,qCACVmD,KAAK,WACLhB,KAAK,WACL2D,KAAK,KACLC,YAAY,iBACZC,QACA,uEACAC,UAAU,EACVvE,MAAOzB,KAAK2B,MAAMc,SAClBL,SAAUpC,KAAKqB,gBAGnB,6BACA,kDAEI,2BACAtB,UAAU,qCACVmD,KAAK,iBACLhB,KAAK,WACL2D,KAAK,KACLC,YAAY,kBACZE,UAAU,EACV7D,IAAKnC,KAAK2C,cACVlB,MAAOzB,KAAK2B,MAAMe,eAClBN,SAAUpC,KAAKqB,gBAGnB,6BACA,+CAEI,2BACAtB,UAAU,qCACVmD,KAAK,cACLhB,KAAK,OACL2D,KAAK,KACLC,YAAY,eACZE,UAAU,EACVvE,MAAOzB,KAAK2B,MAAMb,YAClBsB,SAAUpC,KAAKqB,gBAGnB,6BACA,kDACoB,6BAChB,2BACAtB,UAAU,qCACVmD,KAAK,aACLhB,KAAK,OACLgE,OAAO,mCACP/D,IAAKnC,KAAKwD,cACV/B,MAAOzB,KAAK2B,MAAMwE,WAClB/D,SAAUpC,KAAKqB,eAEf,yBAAKjB,IAAiC,IAA5BJ,KAAK2B,MAAMd,cACTb,KAAK2B,MAAMd,cACXb,KAAK2B,MAAMyE,kBACf9F,OAAO,KAAKC,MAAM,QAG9B,6BACA,oDAEI,8BACAR,UAAU,qCACVmD,KAAK,mBACL2C,KAAK,KACLC,YAAY,oBACZO,KAAK,IACLC,KAAK,KACLC,UAAU,MACVP,UAAU,EACVvE,MAAOzB,KAAK2B,MAAMmC,iBAClB1B,SAAUpC,KAAKqB,gBAGnB,6BACA,8DAEI,8BACAtB,UAAU,qCACVmD,KAAK,iBACLhB,KAAK,OACL4D,YAAY,SACZO,KAAK,IACLC,KAAK,KACLC,UAAU,MACVP,UAAU,EACVvE,MAAOzB,KAAK2B,MAAMoC,eAClB3B,SAAUpC,KAAKqB,gBAGnB,6BACErB,KAAKP,MAAM8E,OAGD,KAFZ,4BAAQxE,UAAU,2BAA2BG,QAASF,KAAKoF,sBAA3D,qBAGA,6BAAK,6BACL,4BAAQpD,KAAK,SACTM,UAAWtC,KAAK2B,MAAMmB,YACtB/C,UAAU,oDACV,0BAAMA,UAAWC,KAAKP,MAAM8E,OAAS,kBAAoB,eAH7D,OAIWvE,KAAKP,MAAM8E,OAAS,iBAAmB,qBAKrDvE,KAAK2B,MAAMwD,cACV,kBAAC,EAAD,CAAsBzD,MAAO1B,KAAK2B,MAAM2C,YAClBjC,cAAerC,KAAKqC,cACpBJ,MAAO,kBAAO,EAAKJ,SAAS,CAACsD,eAAe,OAC9D,U,GAvVwB1E,IAAMC,WC4E7B8F,E,YA7EX,aAAe,IAAD,8BACV,+CASJvC,aAAc,SAACpB,GACXA,EAAMsB,iBACF,EAAKsC,iBAAiBjF,QAAQC,QAAU,EAAKiF,uBAAuBlF,QAAQC,MAC5E,EAAKhC,MAAMkH,cAAc,EAAKF,iBAAiBjF,QAAQC,QAEvD,EAAKiF,uBAAuBlF,QAAQO,QACpC,EAAKF,SAAS,CAAC+E,SAAU,gEAhBnB,EAoBdC,eAAiB,SAACxB,GACC,UAAXA,EAAEyB,OACFzB,EAAElB,iBACF,EAAKF,iBArBT,EAAKwC,iBAAmBhG,IAAMqB,YAC9B,EAAK4E,uBAAyBjG,IAAMqB,YACpC,EAAKH,MAAQ,CAACiF,SAAU,IAJd,E,sEA4BV,OACI,yBAAK7G,UAAU,QAAQiC,KAAK,UAC1B,yBAAKjC,UAAU,yBACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,gBACb,wBAAIA,UAAU,eAAc,8CAE5B,4BAAQA,UAAU,cACdG,QAASF,KAAKP,MAAMsH,qBADxB,SAKF,yBAAKhH,UAAU,cACW,IAAvBC,KAAK2B,MAAMiF,SAAiB,uBAAG7G,UAAU,YAAYC,KAAK2B,MAAMiF,UAAgB,KACjF,0BAAMjB,SAAU3F,KAAKiE,cACrB,+CAEI,2BACA/B,KAAK,WACL4D,YAAY,qBACpBC,QAAQ,uEACAhG,UAAU,yBACVoC,IAAKnC,KAAKyG,oBAGd,sDAEI,2BACAvE,KAAK,WACL4D,YAAY,sBACZ/F,UAAU,yBACViH,QAAShH,KAAK6G,eACd1E,IAAKnC,KAAK0G,0BAGd,4BAAQ1E,KAAK,SACZjC,UAAU,mDACP,0BAAMA,UAAU,cAFpB,+B,GAhEcU,IAAMC,WCwEzBuG,E,YArEX,aAAe,IAAD,8BACV,+CASJC,oBAVc,uCAUQ,WAAMrE,GAAN,mBAAAqB,EAAA,6DAClBrB,EAAMsB,iBADY,SAEGK,MAAM,UAAY,EAAKjD,SAASC,QAAQC,OAF3C,UAGK,MADnB0F,EAFc,QAGLpC,OAHK,iCAIKoC,EAAS3B,OAJd,OAIRA,EAJQ,OAMW,WADnB4B,EAAMxC,KAAKa,MAAMD,IACf6B,aACJ,EAAK5H,MAAM6H,kBAAkBF,EAAIjH,GAAGiH,EAAItD,iBAAkBsD,EAAIrD,gBAE9D,EAAKlC,SAAS,CAAC0F,OAAQ,yCAA2CH,EAAIC,aAAe,sBAChDD,EAAIC,aAAe,4BAV9C,wBAad,EAAKxF,SAAS,CAAC+E,SAAU,+CAAiD,EAAKrF,SAASC,QAAQC,MAAQ,OAb1F,4CAVR,sDAEV,EAAKF,SAAWd,IAAMqB,YACtB,EAAKH,MAAQ,CAACiF,SAAU,IAHd,E,sEA2BJ,IAAD,SACL,OACI,yBAAK7G,UAAU,QAAQiC,KAAK,UAC1B,yBAAKjC,UAAU,yBACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,gBACb,wBAAIA,UAAU,eAAc,+CAC5B,4BAAQA,UAAU,cACdG,QAAS,WAAO,EAAKT,MAAMsH,wBAD/B,SAKF,yBAAKhH,UAAU,cACS,IAArBC,KAAK2B,MAAM6F,OAAe,uBAAGzH,UAAU,YAAYC,KAAK2B,MAAMiF,UAAgB,KAC/E,0BAAMjB,SAAU3F,KAAKkH,qBACrB,wDAEI,8BACA/E,IAAKnC,KAAKuB,SACVxB,UAAU,yBACVmC,KAAK,QACL2D,KAAK,KACLC,YAAY,sBACZC,QAAQ,mDANR,oBAOK/F,KAAKuB,UAPV,0BAQU,GARV,KAWJ,4BAAQW,KAAK,SACTnC,UAAU,mDACV,0BAAMA,UAAU,iBAFpB,gC,GAzDcU,IAAMC,WCqExB+G,E,YArEZ,aAAe,IAAD,8BACV,+CAUJxD,aAAe,SAACpB,GACZA,EAAMsB,iBACF,EAAKuD,kBAAkBlG,QAAQC,QAAU,EAAKhC,MAAMkI,OACpD,EAAKlI,MAAMmI,kBAEX,EAAKF,kBAAkBlG,QAAQO,QAC/B,EAAKF,SAAS,CAAC+E,SAAU,iFAf7B,EAAKc,kBAAoBjH,IAAMqB,YAC/B,EAAKH,MAAQ,CAACiF,SAAU,IAHd,E,iFAQV5G,KAAK0H,kBAAkBlG,QAAQO,U,+BAc/B,OACI,yBAAKhC,UAAU,QAAQiC,KAAK,UAC1B,yBAAKjC,UAAU,yBACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,gBACb,wBAAIA,UAAU,eAAc,wDAE5B,4BAAQA,UAAU,cACdG,QAASF,KAAKP,MAAMsH,qBADxB,SAKF,yBAAKhH,UAAU,cACW,IAAvBC,KAAK2B,MAAMiF,SAAiB,uBAAG7G,UAAU,YAAYC,KAAK2B,MAAMiF,UAAgB,KACjF,0BAAMjB,SAAU3F,KAAKiE,cACrB,oDAEI,8BACA4D,UAAU,EACVpG,MAAOzB,KAAKP,MAAMqI,SAClB/H,UAAU,yBACVsG,KAAK,IACLC,KAAK,QAGT,kDAEI,8BACAvG,UAAU,yBACV+F,YAAY,iCACZ3D,IAAKnC,KAAK0H,kBACVrB,KAAK,IACLC,KAAK,QAGT,4BAAQtE,KAAK,SACXjC,UAAU,mDACR,0BAAMA,UAAU,gBAFpB,8B,GA1DiBU,IAAMC,WCsO5BqH,E,YAhOf,aAAe,IAAD,8BACV,+CA0BJC,kBA3Bc,uCA2BM,WAAOnF,GAAP,mBAAAqB,EAAA,6DAChBrB,EAAMsB,iBACN,EAAKtC,SAAS,CAACoG,aAAc,wBACdC,cAAe,kBACxB7D,EAAM,uBAAyB,EAAK8D,cAAc3G,QAAQC,MACpD,aAAe,EAAK2G,iBAAiB5G,QAAQC,MALzC,SAME+C,MAAMH,EAAK,CAACK,OAAQ,SANtB,UAOE,MADZI,EANU,QAORC,OAPQ,iBAQZsD,OAAOC,KAAK,IAAI,SARJ,yCAUQxD,EAAIG,OAVZ,QAURC,EAVQ,OAWd,EAAKrD,SAAS,CAACoG,aAAc,gBACdC,cAAe,SACfK,UAAWrD,IAbZ,4CA3BN,wDA+CZsD,kBAAoB,SAACC,GACjB,EAAK5G,SAAS,CAAC0G,UAAWE,EACXC,yBAAyB,KAjDhC,EAsDZC,oBAAsB,WAClB,EAAK9G,SAAS,CAAC6G,yBAAyB,KAvDhC,EA6Dd3B,oBAAsB,WAClB,EAAK6B,YAAc,GACnB,EAAKC,OAAS,GACd,EAAKC,OAAS,GACd,EAAKjH,SAAS,CAACkH,yBAAyB,EACzBC,4BAA4B,EAC5BC,wBAAwB,KAnE7B,EAwEdC,iBAAmB,SAACC,GAChBd,OAAOC,KAAP,gBAAqBa,GAAW,UAzEtB,EA+EdC,sBAAwB,SAACD,GAAc,IAAD,EACnC,EAAKtH,UAAL,mBAAgBsH,EAAW,OAAU,yBAArC,cACgBA,EAAW,QAAW,iBADtC,IAEAE,YAAW,kBAAM,EAAKH,iBAAiBC,KAAU,MAlFtC,EAwFd7B,kBAAoB,SAAC/B,EAAQuC,EAAUH,GACnC,EAAKiB,YAAcrD,EACnB,EAAKsD,OAASf,EACd,EAAKgB,OAASnB,EACd,EAAK9F,SAAS,CAACkH,yBAAyB,EACzBC,4BAA4B,KA7FjC,EAmGdpB,eAAiB,WACb,EAAK/F,SAAS,CAACmH,4BAA4B,EAC3BC,wBAAwB,KArG9B,EA2GdtC,cA3Gc,uCA2GE,WAAM2C,GAAN,mBAAApF,EAAA,6DACNG,EAAM,UAAY,EAAKuE,YADjB,SAEMpE,MAAMH,EAAK,CACzBI,QAAS,CACL,OAAU,mBACV,eAAgB,oBAEpBC,OAAQ,MACRC,KAAMC,KAAKC,UAAU,CAACpC,SAAU6G,MARxB,UASM,MAPZxE,EAFM,QASJC,OATI,gBAUR,EAAKlD,SAAS,CAACoH,wBAAwB,EACxBV,UAAW,iCAXlB,wCAcczD,EAAIG,OAdlB,QAcFC,EAdE,OAeR,EAAKrD,SAAS,CAAC0H,yBAAyB,EAC1BhB,UAAWrD,IAhBjB,4CA3GF,wDAiIdsD,kBAAoB,SAACC,EAAIe,GACrB,EAAK3H,SAAS,CAAC0G,UAAWE,EACXC,yBAAyB,KAnI9B,EAuIde,eAAiB,WACb,EAAK5H,SAAS,CAAC0G,UAAW,MAxIhB,EA4IdI,oBAAsB,WAClB,EAAK9G,SAAS,CAAC6G,yBAAyB,KA1IxC,EAAKP,cAAgB1H,IAAMqB,YAC3B,EAAK8G,YAAc,GACnB,EAAKC,OAAS,GACd,EAAKC,OAAS,GACd,EAAKV,iBAAmB3H,IAAMqB,YAC9B,EAAKH,MAAQ,CAAC4G,UAAW,GACXN,aAAc,gBACdC,cAAe,SACfa,yBAAyB,EACzBC,4BAA4B,EAC5BC,wBAAwB,EACxBS,WAAY,eACZC,YAAa,sBACbC,SAAU,GACVC,mBAAmB,GAjBvB,E,iFAuBV7J,KAAKmI,cAAc3G,QAAQO,U,+BAyHnB,IAAD,OACP,OACI,6BACA,gCACyB,IAAxB/B,KAAK2B,MAAM4G,UAAkB,yBAAKxI,UAAU,cAAa,8BAAOC,KAAK2B,MAAM4G,WAC7D,4BAAQxI,UAAU,cAAcG,QAASF,KAAKyJ,gBAC3C,0BAAM1J,UAAU,kBACD,KAC5BC,KAAK2B,MAAMoH,wBACV,kBAAC,EAAD,CAAqBhC,oBAAqB/G,KAAK+G,oBAC1BO,kBAAmBtH,KAAKsH,oBAAuB,KACrEtH,KAAK2B,MAAMqH,2BACT,kBAAC,EAAD,CAAwBjC,oBAAqB/G,KAAK+G,oBAC1Be,SAAU9H,KAAK6I,OACflB,OAAQ3H,KAAK8I,OACblB,eAAgB5H,KAAK4H,iBAAoB,KACnE5H,KAAK2B,MAAMsH,uBACV,kBAAC,EAAD,CAAqBlC,oBAAqB/G,KAAK+G,oBAC1BJ,cAAe3G,KAAK2G,gBAAoB,KAC/D,0BAAMxG,GAAG,iBAAiBwF,SAAU3F,KAAKgI,mBACzC,2BAAO8B,QAAQ,aAAaC,MAAO,CAAEC,QAAS,EAAGC,SAAU,KAA3D,SAEI,2BACA9H,IAAKnC,KAAKmI,cACVpI,UAAU,0BACVmC,KAAK,QACL4D,YAAY,sBACZ3F,GAAG,aACH4F,QAAQ,kDACRC,UAAU,KAGd,4BACA,2BAAO8D,QAAQ,gBAAgBC,MAAO,CAAEC,QAAS,EAAGC,SAAU,KAA9D,YAEI,2BACA9H,IAAKnC,KAAKoI,iBACVrI,UAAU,0BACVmC,KAAK,WACL4D,YAAY,iBACZC,QAAQ,8BACRC,UAAU,KAGd,uBAAGjG,UAAU,YAAYI,GAAG,WAAW4J,MAAO,CAAEE,SAAU,MAC1D,4BACI/H,KAAK,SACLnC,UAAU,uDACV,0BAAMI,GAAG,iBAAiBJ,UAAWC,KAAK2B,MAAMsG,eAHpD,OAIWjI,KAAK2B,MAAMuG,eAEtB,2BACA,4BAAQhG,KAAK,SAASnC,UAAU,0BACxBG,QAAS,WAAO,EAAK2B,SAAS,CAAC6G,yBAAyB,MADhE,qBADA,KAII,4BAAQxG,KAAK,SAASnC,UAAU,0BACxBG,QAAS,WAAO,EAAK2B,SAAS,CAACkH,yBAAyB,MADhE,wBAIJ,4BAAQ7G,KAAK,SAASnC,UAAU,iBAC7BG,QAAS,kBAAM,EAAKkJ,sBAAsB,YAC3C,0BAAMrJ,UAAWC,KAAK2B,MAAM+H,aAF9B,OAGK1J,KAAK2B,MAAMgI,aAEhB,2BACI,iDAGH3J,KAAK2B,MAAM+G,wBACV,kBAAC,EAAD,CACEnE,QAAQ,EACRS,KAAMhF,KAAKwI,kBACX9C,OAAQ1F,KAAK2I,sBAA0B,KAC1C3I,KAAK2B,MAAM4H,wBAA0B,kBAAC,EAAD,MAA0B,W,GA3NpD9I,IAAMC,WCafwJ,E,iLAdP,OACA,yBAAKnK,UAAU,eACX,gCACA,6CACA,gEACA,yBAAKK,IAAI,gFACRE,OAAO,MAAMC,MAAM,QACpB,uBAAGwJ,MAAO,CAACI,UAAW,WAAtB,qC,GAVW1J,IAAMC,W,QC4Bd0J,E,iLAzBP,OACA,yBAAKjK,GAAG,aAAaJ,UAAU,QAAQiC,KAAK,UAC5C,yBAAKjC,UAAU,iBACX,yBAAKA,UAAU,gBACb,gCACE,wBAAIA,UAAU,eAAc,uDAE7B,4BAAQI,GAAG,aAAaJ,UAAU,cAAcG,QAASF,KAAKP,MAAMwC,OAApE,SAGH,yBAAKlC,UAAU,cACb,wEAEF,yBAAKA,UAAU,gBACT,4BAAQA,UAAU,iBAAiBG,QAASF,KAAKP,MAAM4K,aAAvD,eAEA,4BAAQtK,UAAU,oBAAoBG,QAASF,KAAKP,MAAMwC,OAA1D,qB,GAnBexB,IAAMC,WCwGxB4J,E,YApGb,aAAe,IAAD,8BACZ,+CASFC,UAAY,SAACpK,GACX,EAAKV,MAAM+K,UAAUrK,GACrB,EAAKV,MAAMI,WAAWjB,EAAQK,mBAZlB,EAkBdoL,YAAc,WACZ,EAAK5K,MAAM4K,cACX,EAAKxI,SAAS,CAAC4I,mBAAmB,KApBtB,EA6BdtF,cAAgB,SAAChF,GACf,EAAKV,MAAMiL,YAAYvK,GACvB,EAAK0B,SAAS,CAAC4I,mBAAmB,KA/BtB,EAqCdE,YAAc,WAEd,IADA,IAAIC,EAAQ,GADQ,WAEXC,GACPD,EAAME,KACJ,wBAAIC,IAAKF,GACP,4BAAK,EAAKpL,MAAMuL,OAAOH,GAAGI,KAAKC,UAAU,EAAE,KAC3C,4BAAK,EAAKzL,MAAMuL,OAAOH,GAAGM,QAC1B,4BAAMC,OAAO,EAAK3L,MAAMuL,OAAOH,GAAGQ,SAC5BD,OAAO,EAAK3L,MAAMuL,OAAOH,GAAGS,SAC5B,KAAO,EAAK7L,MAAMuL,OAAOH,GAAGU,QAAU,GACpC,IAAM,EAAK9L,MAAMuL,OAAOH,GAAGU,QAC3B,EAAK9L,MAAMuL,OAAOH,GAAGU,SAAW,KAClC,EAAK9L,MAAMuL,OAAOH,GAAGQ,QACrB,OAAS,EAAK5L,MAAMuL,OAAOH,GAAGS,QAAU,KACvC,EAAK7L,MAAMuL,OAAOH,GAAGU,QAAU,GAC9B,IAAM,EAAK9L,MAAMuL,OAAOH,GAAGU,QAC3B,EAAK9L,MAAMuL,OAAOH,GAAGU,SAAW,KAExC,4BAAI,4BAAQrL,QAAS,EAAKT,MAAME,SAAW,KAAO,kBAChD,EAAK4K,UAAUM,KACX,0BAAM9K,UAAU,gBACtB,4BAAI,4BAAQG,QAAS,EAAKT,MAAME,SAAW,KACzC,kBAAM,EAAKwF,cAAc0F,KACrB,0BAAM9K,UAAU,qBArBnB8K,EAAI,EAAGA,EAAI,EAAKpL,MAAMuL,OAAO7H,SAAU0H,EAAI,EAA3CA,GAyBT,OAAOD,GA9DL,EAAKjJ,MAAQ,CAAC8I,mBAAmB,GAFrB,E,sEAqEJ,IAAD,OACP,OACA,yBAAK1K,UAAU,eACb,6BACA,2BAAOA,UAAU,qBACf,2BAAOA,UAAU,eACjB,4BACE,oCACA,sCACA,qCACA,4CACA,wCAGF,+BAC6C,IAA1CV,OAAOmM,KAAKxL,KAAKP,MAAMuL,QAAQ7H,OAChC,4BACA,wBAAIsI,QAAQ,IAAI1B,MAAO,CAACI,UAAW,WAAnC,qBACQnK,KAAK2K,gBAIhB3K,KAAK2B,MAAM8I,kBACV,kBAAC,EAAD,CACExI,MAAO,kBAAM,EAAKJ,SAAS,CAAC4I,mBAAmB,KAC/CJ,YAAarK,KAAKqK,cAAkB,U,GAhGpB5J,IAAMC,WCqJjBgL,E,YArJb,WAAYjM,GAAQ,IAAD,uBACnB,4CAAMA,KA6BJ4B,aAAe,SAACwB,GACZ,IAAMK,EAAOL,EAAMI,OAAOC,KAC1B,GAAa,YAATA,EAAoB,CACtB,IAAIyI,EAAU9I,EAAMI,OAAOxB,MAAM0B,OAAS,EAAI,IAC5CN,EAAMI,OAAOxB,MAAQoB,EAAMI,OAAOxB,MAChCmK,EAAS,EAAKC,WAAW,EAAKlK,MAAM0J,QAAS,EAAK1J,MAAM2J,QAC/BK,GAC7B,EAAK9J,SAAS,CAAC0J,QAASI,EAAQG,IAAKF,SAChC,GAAa,YAAT1I,EAAoB,CAC7B,IAAI6I,EAAalJ,EAAMI,OAAOxB,MAC1BmK,EAAS,EAAKC,WAAWE,EAAY,EAAKpK,MAAM2J,QAClD,EAAK3J,MAAM4J,SACb,EAAK1J,SAAS,CAACwJ,QAASU,EAAYD,IAAKF,SACpC,GAAa,YAAT1I,EAAoB,CAC3B,IAAI8I,EAASnJ,EAAMI,OAAOxB,MACtBmK,EAAS,EAAKC,WAAW,EAAKlK,MAAM0J,QAASW,EAC/C,EAAKrK,MAAM4J,SACb,EAAK1J,SAAS,CAACyJ,QAASU,EAAQF,IAAKF,SAEvC,EAAK/J,SAAL,eAAgBqB,EAAOL,EAAMI,OAAOxB,SAjDzB,EA2DjBwC,aAAe,SAACpB,GAEZ,EAAKhB,SAAS,CAACoK,OAAQ,wBACPC,SAAW,EAAKzM,MAAMC,OAASd,EAAQI,gBAC3B,YAAc,gBAE1C,IAAImN,EAAY,EAAKxK,aACdwK,EAAUF,cACVE,EAAUD,SAEjB7C,WAAW,EAAK5J,MAAM2M,UAAU,IAAKD,GACrCtJ,EAAMsB,kBAtEO,EA0EjB0H,WAAa,SAACR,EAASgB,EAAKC,GAC1B,OAAQlB,OAAOC,GAAWD,OAAOiB,GACnB,IAAMC,GAzExB,IAAIC,EAAQ,IAAIC,KAAKA,KAAKC,MAAuC,KAAhC,IAAID,MAAQE,qBAE7C,GAAI,EAAKjN,MAAMC,OAASd,EAAQI,gBAG9B,EAAK2C,MAAQ,CAACsJ,KAAOsB,EAAMI,cAAcC,OAAO,EAAE,IACpCzB,OAAQ,GACRjJ,KAAM,WACN2K,MAAO,KACPxB,QAAS,GACTC,QAAS,GACTC,QAAS,KACTuB,MAAO,GACPb,OAAQ,aACRC,SAAU,uBACnB,CAGL,IAAIa,EAAS,eAAO,EAAKtN,MAAMuN,kBACxBD,EAAU5M,GACjB4M,EAAUd,OAAS,aACnBc,EAAUb,SAAW,oBACrB,EAAKvK,MAAQoL,EAzBI,S,sEAgFf,OACE,0BAAMhN,UAAU,cAAc4F,SAAU3F,KAAKiE,cAC3C,gCACE,uCAEE,2BAAOf,KAAK,OAAOnD,UAAU,2BAC3BmC,KAAK,OAAOT,MAAOzB,KAAK2B,MAAMsJ,KAAM7I,SAAUpC,KAAKqB,gBAEvD,4BACA,yCAEE,2BAAO6B,KAAK,SAASnD,UAAU,2BAA2BmC,KAAK,OAC7DT,MAAOzB,KAAK2B,MAAMwJ,OAAQ/I,SAAUpC,KAAKqB,aACzCyE,YAAY,gBAAgBD,KAAK,KAAKU,UAAU,QAEtD,4BACA,uCACA,4BAAQrD,KAAK,OAAOzB,MAAOzB,KAAK2B,MAAMO,KACpCnC,UAAU,2BAA2BqC,SAAUpC,KAAKqB,cACpD,4BAAQI,MAAM,YAAd,YACA,4BAAQA,MAAM,cAAd,gBAGF,4BACA,0CACA,4BAAQyB,KAAK,QAAQzB,MAAOzB,KAAK2B,MAAMkL,MACrC9M,UAAU,2BAA2BqC,SAAUpC,KAAKqB,cACpD,4BAAQI,MAAM,KAAd,KACA,4BAAQA,MAAM,MAAd,QAGF,4BACA,4CACA,2BAAOyB,KAAK,UAAUnD,UAAU,2BAA2BmC,KAAK,SAC9DmK,IAAI,IAAIY,IAAI,MAAMxL,MAAOzB,KAAK2B,MAAM0J,QACpCjJ,SAAUpC,KAAKqB,gBAEjB,4BACA,wCAAa,6BACb,2BAAO6B,KAAK,UAAUhB,KAAK,SAAS2D,KAAK,IACvCwG,IAAI,KAAKY,IAAI,MAAMxL,MAAOzB,KAAK2B,MAAM2J,QACrClJ,SAAUpC,KAAKqB,eAHjB,IAIA,2BAAO6B,KAAK,UAAUhB,KAAK,SAAS2D,KAAK,IACvCwG,IAAI,IAAIY,IAAI,KAAKxL,MAAOzB,KAAK2B,MAAM4J,QACnCnJ,SAAUpC,KAAKqB,gBAEjB,4BACA,mDAAwB,6BACpB,2BAAO6B,KAAK,MAAMnD,UAAU,cAAcmC,KAAK,OAAO2D,KAAK,IACzDvD,UAAU,EAAMb,MAAOzB,KAAK6L,WAAW7L,KAAK2B,MAAM0J,QAAQrL,KAAK2B,MAAM2J,QAAQtL,KAAK2B,MAAM4J,YAE9F,4BACA,wCACI,8BAAUrI,KAAK,QAAQnD,UAAU,eAAesG,KAAK,IAAIC,KAAK,KAC5DR,YAAY,oBAAoBrE,MAAOzB,KAAK2B,MAAMmL,MAClD1K,SAAUpC,KAAKqB,gBAErB,4BACA,4BACA,4BAAQa,KAAK,SAAS6H,MAAO,CAACxJ,MAAO,MAAM0J,SAAU,QACnDlK,UAAU,mCACR,0BAAMA,UAAWC,KAAK2B,MAAMsK,SAFhC,OAEgDjM,KAAK2B,MAAMuK,gB,GA9I7CzL,IAAMC,WCSfwM,E,iLART,OACE,yBAAKnN,UAAU,WAAWG,QAASF,KAAKP,MAAM0N,aAC5C,0BAAMpN,UAAU,kC,GAJGU,IAAMC,WCwJpB0M,E,YA7IX,aAAe,IAAD,8BACV,+CAYJC,SAbc,uCAaH,WAAOC,GAAP,mBAAApJ,EAAA,6DACDG,EAAM,WAAa,EAAK5E,MAAM8N,QAAQpN,GADrC,SAEWqE,MAAMH,EAAK,CACzBI,QAAS,CACL,OAAU,mBACV,eAAgB,oBAEpBC,OAAQ,OACRC,KAAMC,KAAKC,UAAUyI,KARlB,cAEDxI,EAFC,gBASWA,EAAIG,OATf,OASDwD,EATC,OAUW,KAAd3D,EAAIC,QACJ,EAAKlD,SAAS,CAAC+E,SAAU6B,IACzB,EAAKhJ,MAAMI,WAAWjB,EAAQG,UAE9B,EAAK8C,SAAS,CAAC+E,SAAU,KACzB,EAAKnH,MAAM+N,gBAAgB5O,EAAQG,SAfhC,2CAbG,wDAoCdwL,UApCc,uCAoCF,WAAO+C,GAAP,mBAAApJ,EAAA,6DACFG,EAAM,WAAa,EAAK5E,MAAM8N,QAAQpN,GAAK,IAC7C,EAAKV,MAAM8N,QAAQvC,OAAO,EAAKyC,QAAQC,IAFnC,SAGUlJ,MAAMH,EAAK,CACzBI,QAAS,CACL,OAAU,mBACV,eAAgB,oBAEpBC,OAAQ,MACRC,KAAMC,KAAKC,UAAUyI,KATjB,cAGFxI,EAHE,gBAUUA,EAAIG,OAVd,OAUFwD,EAVE,OAWU,KAAd3D,EAAIC,QACJ,EAAKlD,SAAS,CAAC+E,SAAU6B,IACzB,EAAKhJ,MAAMI,WAAWjB,EAAQG,SAE9B,EAAKU,MAAM+N,gBAAgB5O,EAAQG,QAf/B,2CApCE,wDA0DdsL,YA1Dc,sBA0DA,gCAAAnG,EAAA,6DACJG,EAAM,WAAa,EAAK5E,MAAM8N,QAAQpN,GAAK,IAC7C,EAAKV,MAAM8N,QAAQvC,OAAO,EAAK2C,UAAUD,IAFnC,SAGQlJ,MAAMH,EAAK,CAACK,OAAQ,WAH5B,cAGJI,EAHI,gBAIQA,EAAIG,OAJZ,OAIJwD,EAJI,OAKQ,KAAd3D,EAAIC,QACJ,EAAKlD,SAAS,CAAC+E,SAAU,oEACvB6B,IACF,EAAKhJ,MAAMI,WAAWjB,EAAQG,SAE9B,EAAKU,MAAM+N,gBAAgB5O,EAAQG,QAV7B,2CA1DA,EA0Ed2L,YAAc,SAACkD,GACX,EAAKD,SAAWC,EAChB,EAAK/L,SAAS,CAAC+E,SAAU,MA5Ef,EAiFd4D,UAAY,SAACoD,GACT,EAAKH,OAASG,EACd,EAAK/L,SAAS,CAAC+E,SAAU,MAnFf,EAsFdiH,cAAgB,WACZ,EAAKhM,SAAS,CAAC+E,SAAU,MArFzB,EAAK+G,SAAW,GAChB,EAAKF,OAAS,GACd,EAAK9L,MAAQ,CAACiF,SAAU,IAJd,E,sEA6FJ,IAAD,OACL,OAAO5G,KAAKP,MAAMC,MACd,KAAKd,EAAQG,OACT,OACI,oCACwB,IAAvBiB,KAAK2B,MAAMiF,SAAiB,yBAAK7G,UAAU,cAAa,8BAAOC,KAAK2B,MAAMiF,UACxE,4BAAQ7G,UAAU,cAAcG,QAASF,KAAK6N,eAC3C,0BAAM9N,UAAU,kBACD,KACrB,kBAAC,EAAD,CACIiL,OAAQhL,KAAKP,MAAM8N,QAAQvC,OAC3BR,UAAWxK,KAAKwK,UAChBE,YAAa1K,KAAK0K,YAClBL,YAAarK,KAAKqK,YAClBxK,WAAYG,KAAKP,MAAMI,WACvBF,SAAUK,KAAKP,MAAME,WACzB,kBAAC,EAAD,CACIwN,YAAa,kBACb,EAAK1N,MAAMI,WAAWjB,EAAQI,kBAC9BW,SAAUK,KAAKP,MAAME,SACrBmO,KAAM,gBAGlB,KAAKlP,EAAQI,gBACT,OACI,kBAAC,EAAD,CACIU,KAAMM,KAAKP,MAAMC,KACjBsN,UAAW,GACXZ,UAAWpM,KAAKqN,WAE5B,KAAKzO,EAAQK,iBACT,IAAI8N,EAAS,eAAO/M,KAAKP,MAAM8N,QAAQvC,OAAOhL,KAAKyN,SAMnD,OALAV,EAAU9B,KAAO8B,EAAU9B,KAAK2B,OAAO,EAAE,IACrCG,EAAUxB,QAAU,KACpBwB,EAAUxB,QAAU,IAAMwB,EAAUxB,gBAEjCwB,EAAUjB,IAEb,kBAAC,EAAD,CACIpM,KAAMM,KAAKP,MAAMC,KACjBsN,UAAWD,EACXX,UAAWpM,KAAKuK,iB,GAzInB9J,IAAMC,W,gCCmEZqN,E,YAxEX,aAAc,IAAD,8BACT,+CAWJC,uBAAyB,WACrB,EAAKnM,UAAS,SAAAF,GAAK,MAAK,CAACsM,kBAAmBtM,EAAMsM,sBAbzC,EAebC,UAfa,sBAeD,sBAAAhK,EAAA,sDACI,eACZM,MADY,gBAEX2J,MAAK,SAAChH,GACH,GAAuB,KAAnBA,EAASpC,OACT,OAAOoC,EAAS3B,OAIhB,MADA,EAAK4I,YAAY,UAAYjH,EAASkH,YAChCC,MAAMnH,EAASkH,eAG5BF,MAAK,SAAC/G,GAEHmH,QAAQC,IAAI,gBACZ,IAAIC,EAAa7J,KAAKa,MAAM2B,GAE5B,EAAKvF,SAAS,CACVsJ,OAAQsD,EAAWC,KAAI,SAACC,GAAD,OACnB,kBAACC,EAAA,EAAD,CAAM7E,MAAO,CAAC8E,UAAW,OAAQC,aAAc,SAC3C,kBAACC,EAAA,EAAD,CAAMhE,IAAK4D,EAAExO,GAAI4J,MAAO,CAAExJ,MAAO,QAASyO,QAAS,SACnD,kBAACD,EAAA,EAAKE,IAAN,CAAUlP,UAAU,eAAemP,QAAQ,MAAM9O,IAAKuO,EAAEQ,UACxD,kBAACJ,EAAA,EAAKK,KAAN,KACI,kBAACL,EAAA,EAAKM,MAAN,kBAAuBV,EAAEW,UACzB,kBAACP,EAAA,EAAKQ,KAAN,gBAAoBZ,EAAEa,SAE1B,kBAACT,EAAA,EAAKU,OAAN,gBAAsBd,EAAEe,eAOpCnB,QAAQC,IAAIC,MACbkB,OAAM,SAACC,GACNrB,QAAQC,IAAI,iBAnCR,2CAZR,EAAK7M,MAAM,CACPsM,kBAAkB,GAJb,E,iFASTjO,KAAKkO,c,+BA8CL,OACI,6BACE,6BACA,+BACE,+BACA,kBAAC2B,EAAA,EAAD,CAAWC,OAAO,GACd,kBAACC,EAAA,EAAD,CAAKC,WAAS,GACThQ,KAAK2B,MAAMwJ,gB,GAhEX1K,IAAMC,WCgBhBuP,E,iLAdP,OACI,yBAAKlQ,UAAU,eACX,gCACA,8CACA,gEACA,yBAAKK,IAAI,gFACRE,OAAO,MAAMC,MAAM,QACpB,uBAAGwJ,MAAO,CAACI,UAAW,WAAtB,qC,GAVY1J,IAAMC,W,gBCyDnBwP,E,iLAtDX,OACI,yBAAKnQ,UAAU,QAAQiC,KAAK,UAC5B,yBAAKjC,UAAU,yBACX,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,gBACX,gDACA,4BAAQA,UAAU,cAAcG,QAASF,KAAKP,MAAM0Q,aAApD,SAIJ,yBAAKpQ,UAAU,cACX,yBACAK,IAAI,gFACJE,OAAO,MAAMC,MAAM,QACnB,sFAEA,mEAAwC,6BAAxC,iEAIA,yBAAKwJ,MAAO,CAACqG,UAAW,SACxB,sDACA,4BACA,wDAA6B,kDAA7B,KACA,uFACC,mDADD,KAEA,kIACwC,kDADxC,MAIA,qKAEmB,qDAFnB,gEAIA,wEAA6C,uBAC7CC,KAAK,yBAAyBpN,OAAO,UADQ,yBAA7C,8CAEmD,uBACnDoN,KAAK,2BACLpN,OAAO,UAF4C,qBAFnD,QAI0C,uBAC1CoN,KAAK,0BAA0BpN,OAAO,UADI,iBAJ1C,OASJ,yBAAKlD,UAAU,gBACX,4BAAQA,UAAU,kCAClBG,QAASF,KAAKP,MAAM0Q,aADpB,c,GA/CS1P,IAAMC,WCqThB4P,E,YA/SX,aAAc,IAAD,8BACT,+CAyBJC,gBAAkB,WACd,EAAK1O,SAAS,CAAC2O,uBAAwB,KA3B9B,EA8BbC,qBAAuB,SAACC,GACpB,EAAK7O,SAAS,CAAC8O,kBAAoBD,KA/B1B,EAkCbE,cAAgB,WACZ,EAAK/O,SAAS,CAACgP,aAAc,KAnCpB,EAsCbC,eAAiB,WACb,EAAKjP,SAAS,CAACgP,aAAc,KAvCpB,EA0CbE,2BAA6B,WACzB,EAAKlP,SAAS,CAACmP,qBAAsB,IACrC,EAAKP,qBAAqB,mBA5CjB,EA+CbQ,4BAA8B,WAC1B,EAAKpP,SAAS,CAACmP,qBAAsB,IACrC,EAAKP,qBAAqB,kBAjDjB,EAwDbS,kBAAoB,SAAArO,GAChB,IAAMsO,EAAQtO,EAAMI,OAAOxB,MAC3B,EAAKI,UAAS,SAAAuP,GACZ,IAAMC,EAAeD,EAAUE,KAAKC,QAAO,SAAAC,GACzC,OAAOA,EAAQrR,GAAGsR,cAAcC,SAASP,EAAMM,kBAcjD,MAXa,IAATN,GAEA,EAAKL,iBACL,EAAKL,qBAAqB,mBAI1B,EAAKG,gBACL,EAAKH,qBAAqB,cAAeY,EAAalO,OAAQ,sBAG3D,CACLgO,QACAE,oBA5EK,EAkFbnD,UAlFa,sBAkFD,sBAAAhK,EAAA,sDACI,eACZM,MADY,gBAEX2J,MAAK,SAAChH,GACH,GAAuB,KAAnBA,EAASpC,OACT,OAAOoC,EAAS3B,OAIhB,MADA,EAAK4I,YAAY,UAAYjH,EAASkH,YAChCC,MAAMnH,EAASkH,eAG5BF,MAAK,SAAC/G,GAEHmH,QAAQC,IAAI,4BACZ,IAAI8C,EAAO1M,KAAKa,MAAM2B,GACd+J,EAAU,EAAKxP,MAAfwP,MACFE,EAAeC,EAAKC,QAAO,SAAAC,GAC/B,OAAOA,EAAQrR,GAAGsR,cAAcC,SAASP,EAAMM,kBAGjD,EAAK5P,SAAS,CACZyP,OACAD,oBAEH1B,OAAM,SAACC,GACNrB,QAAQC,IAAI,iBA1BR,2CAlFC,EAgHbmD,kBAhHa,uCAgHO,WAAOxR,GAAP,SAAA+D,EAAA,sDAChB,EAAK6M,6BACL,EAAKD,iBAELtM,MADY,YAAYrE,GAEvBgO,MAAK,SAAChH,GACH,GAAuB,KAAnBA,EAASpC,OACT,OAAOoC,EAAS3B,OAIhB,MADA,EAAK4I,YAAY,UAAYjH,EAASkH,YAChCC,MAAMnH,EAASkH,eAG5BF,MAAK,SAAC/G,GAEHmH,QAAQC,IAAI,+BACZ,IAAIC,EAAa7J,KAAKa,MAAM2B,GAC5B,EAAKvF,SAAS,CACVsJ,OACI,kBAACyD,EAAA,EAAD,CAAM7E,MAAO,CAAC8E,UAAW,OAAQC,aAAc,SAC3C,kBAACC,EAAA,EAAD,CAAMhE,IAAK0D,EAAWtO,GAAI4J,MAAO,CAAExJ,MAAO,QAASyO,QAAS,SAC5D,kBAACD,EAAA,EAAKE,IAAN,CAAUlP,UAAU,eAAemP,QAAQ,MAAM9O,IAAKqO,EAAWU,UACjE,kBAACJ,EAAA,EAAKK,KAAN,KACI,kBAACL,EAAA,EAAKM,MAAN,kBAAuBZ,EAAWa,UAClC,kBAACP,EAAA,EAAKQ,KAAN,gBAAoBd,EAAWe,QAC/B,kBAACoC,EAAA,EAAD,CAAQ1R,QAAS,EAAK2R,uBAAtB,cAEJ,kBAAC9C,EAAA,EAAKU,OAAN,gBAAsBhB,EAAWiB,eAK9CC,OAAM,SAACC,GACNrB,QAAQC,IAAIoB,MAlCA,2CAhHP,wDAsJbkC,uBAAyB,WACrB,EAAKjQ,UAAS,SAAAF,GAAK,MAAK,CAACoQ,kBAAmBpQ,EAAMoQ,sBAvJzC,EA0Jb/D,uBAAyB,WACrB,EAAKnM,UAAS,SAAAF,GAAK,MAAK,CAACsM,kBAAmBtM,EAAMsM,sBA3JzC,EA8Jb4D,sBAAwB,WACpB,EAAKhQ,UAAS,SAAAF,GAAK,MAAK,CAAC6O,uBAAwB7O,EAAM6O,2BA/J9C,EAkKbwB,UAlKa,uCAkKD,WAAO1E,GAAP,mBAAApJ,EAAA,6DACRqK,QAAQC,IAAIlB,GACNjJ,EAAM,YAAc,EAAK1C,MAAMxB,GAF7B,SAGUqE,MAAMH,EAAK,CACzBI,QAAS,CACL,OAAU,mBACV,eAAgB,oBAEpBC,OAAQ,OACRC,KAAMC,KAAKC,UAAUyI,KATjB,cAGFxI,EAHE,gBAUUA,EAAIG,OAVd,OAUFwD,EAVE,OAWU,KAAd3D,EAAIC,QACJwJ,QAAQC,IAAI,WACZD,QAAQC,IAAI/F,KAIZ8F,QAAQC,IAAI,WACZD,QAAQC,IAAI/F,IAlBR,2CAlKC,wDA2LbxE,aAAe,SAACpB,GACZA,EAAMsB,iBACN,IAAI8N,EAAa,CACb9R,GAAI,EAAKwB,MAAMxB,GACfuP,OAAQ,EAAK/N,MAAM+N,OACnBF,OAAQ,EAAK7N,MAAM6N,OACnBL,QAAS,EAAKxN,MAAMwN,QACpBG,SAAU,EAAK3N,MAAM2N,SACrB4C,QAAS,EAAKvQ,MAAMuQ,QACpBC,gBAAiB,EAAKxQ,MAAMwQ,gBAC5BC,QAAS,EAAKzQ,MAAMyQ,QACpBC,UAAW,EAAK1Q,MAAM0Q,UACtBC,aAAc,EAAK3Q,MAAM2Q,cAE7B,EAAKN,UAAUC,IAzMN,EA6Mb9E,YAAc,SAACtK,GACXA,EAAMsB,iBAE8B,iBAAhC,EAAKxC,MAAMgP,oBAI0B,kBAAhC,EAAKhP,MAAMgP,mBAEhB,EAAKM,8BACL,EAAKH,iBACL,EAAKjP,SAAS,CAACsP,MAAO,OAGtB,EAAKJ,6BACL,EAAKD,iBACL,EAAKjP,SAAS,CACVsJ,OAAQ,EAAKxJ,MAAM0P,aAAa3C,KAAI,SAACC,GAAD,OAChC,kBAACC,EAAA,EAAD,CAAM7E,MAAO,CAAC8E,UAAW,OAAQC,aAAc,SAC3C,kBAACC,EAAA,EAAD,CAAMhE,IAAK4D,EAAExO,GAAI4J,MAAO,CAAExJ,MAAO,QAASyO,QAAS,SACnD,kBAACD,EAAA,EAAKE,IAAN,CAAUlP,UAAU,eAAemP,QAAQ,MAAM9O,IAAKuO,EAAEQ,UACxD,kBAACJ,EAAA,EAAKK,KAAN,KACI,kBAACL,EAAA,EAAKM,MAAN,kBAAuBV,EAAEW,UACzB,kBAACP,EAAA,EAAKQ,KAAN,gBAAoBZ,EAAEa,QACtB,kBAACoC,EAAA,EAAD,CAAQ1R,QAAS,EAAK2R,uBAAtB,cAEJ,kBAAC9C,EAAA,EAAKU,OAAN,gBAAsBd,EAAEe,kBAvO/B,EA+ObrO,aAAe,SAACwB,GACZ,EAAKhB,SAAL,eAAgBgB,EAAMI,OAAOC,KAAOL,EAAMI,OAAOxB,SAhPxC,EAmPb8Q,SAAW,aAhPP,EAAK5Q,MAAM,CACPoQ,kBAAkB,EAClB9D,kBAAkB,EAClB+C,qBAAqB,EACrBH,aAAa,EACbL,uBAAuB,EACvBG,kBAAmB,gBACnBQ,MAAO,GACPG,KAAM,GACND,aAAc,GACdlR,GAAI,GACJuP,OAAQ,GACRF,OAAQ,GACRL,QAAS,GACTG,SAAU,GACV4C,QAAS,GACTC,gBAAiB,GACjBC,QAAS,GACTC,UAAW,GACXC,aAAc,IAtBT,E,kFAqDTtS,KAAKkO,c,+BAkMC,IAAD,OACL,OACI,6BACI,yBAAKnE,MAAO,CAACiF,QAAS,SAClB,oEACA,4BACI,uBAAGwD,WAAS,iBAAZ,UACA,kBAAC,IAAD,CAAcC,OAAO,SACjB,yPAQZ,2BAAO1I,MAAO,CAACxJ,MAAO,OAAQuF,YAAY,mCACzCrE,MAAOzB,KAAK2B,MAAMwP,MAAO/O,SAAUpC,KAAKkR,kBACxC5O,WAAUtC,KAAK2B,MAAMqP,sBACtB,4BAAQ9Q,QAASF,KAAKmN,aAAcnN,KAAK2B,MAAMgP,mBAE9C3Q,KAAK2B,MAAMkP,YAAc,6BAAM7Q,KAAK2B,MAAM0P,aAAa3C,KAAI,SAAAgE,GAAC,OAAI,uBAAG3S,UAAU,qBAAqBG,QAAS,kBAAM,EAAKyR,kBAAkBe,EAAEvS,MAAMuS,EAAEvS,QAAkB,KACpKH,KAAK2B,MAAMqP,oBAAsB,yBAAKjH,MAAO,CAAC8E,UAAW,SAAS,mDACnE,kBAACgB,EAAA,EAAD,CAAWC,OAAO,GACd,kBAACC,EAAA,EAAD,CAAKC,WAAS,GACThQ,KAAK2B,MAAMwJ,SAHc,MAM/B,KAoBFnL,KAAK2B,MAAM6O,sBACZ,kBAAC,EAAD,CAAYL,YAAanQ,KAAK6R,wBAC5B,U,GA3SYpR,IAAMC,WCcrBiS,E,iLAXP,OAAO3S,KAAKP,MAAMC,MACd,KAAKd,EAAQM,QACT,OAAQ,kBAAC,EAAD,CAAiBqO,QAASvN,KAAKP,MAAM8N,UACjD,KAAK3O,EAAQO,eACT,OAAQ,kBAAC,EAAD,MACZ,KAAKP,EAAQQ,YACT,OAAQ,kBAAC,EAAD,W,GATEqB,IAAMC,WCqDjBkS,E,iLAtDX,OACI,yBAAK7S,UAAU,QAAQiC,KAAK,UAC5B,yBAAKjC,UAAU,yBACX,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,gBACX,gDACA,4BAAQA,UAAU,cAAcG,QAASF,KAAKP,MAAMwC,OAApD,SAIJ,yBAAKlC,UAAU,cACX,yBACAK,IAAI,gFACJE,OAAO,MAAMC,MAAM,QACnB,sFAEA,mEAAwC,6BAAxC,iEAIA,yBAAKwJ,MAAO,CAACqG,UAAW,SACxB,sDACA,4BACA,wDAA6B,kDAA7B,KACA,uFACC,mDADD,KAEA,kIACwC,kDADxC,MAIA,qKAEmB,qDAFnB,gEAIA,wEAA6C,uBAC7CC,KAAK,yBAAyBpN,OAAO,UADQ,yBAA7C,8CAEmD,uBACnDoN,KAAK,2BACLpN,OAAO,UAF4C,qBAFnD,QAI0C,uBAC1CoN,KAAK,0BAA0BpN,OAAO,UADI,iBAJ1C,OASJ,yBAAKlD,UAAU,gBACX,4BAAQA,UAAU,kCAClBG,QAASF,KAAKP,MAAMwC,OADpB,c,GA/COxB,IAAMC,WCUvBmS,EAAY,GAClBA,EAAUjU,EAAQC,OAAS,wBAC3BgU,EAAUjU,EAAQE,MAAQ,gBAC1B+T,EAAUjU,EAAQG,QAAU,YAC5B8T,EAAUjU,EAAQI,iBAAmB,gBACrC6T,EAAUjU,EAAQK,kBAAoB,aACtC4T,EAAUjU,EAAQM,SAAW,iBAC7B2T,EAAUjU,EAAQO,gBAAkB,iBACpC0T,EAAUjU,EAAQQ,aAAe,iCAEjC,IAAM0T,EAAa,GACnBA,EAAWlU,EAAQC,OAASkJ,EAC5B+K,EAAWlU,EAAQE,MAAQoL,EAC3B4I,EAAWlU,EAAQG,QAAUqO,EAC7B0F,EAAWlU,EAAQI,iBAAmBoO,EACtC0F,EAAWlU,EAAQK,kBAAoBmO,EACvC0F,EAAWlU,EAAQM,SAAWyT,EAC9BG,EAAWlU,EAAQO,gBAAkBwT,EACrCG,EAAWlU,EAAQQ,aAAeuT,E,IAyJnBI,E,YApJb,aAAe,IAAD,8BACZ,+CAqCFvF,gBAtCc,uCAsCI,WAAMwF,GAAN,iBAAA9O,EAAA,sEACKM,MAAM,UAAY,EAAK7C,MAAM4L,QAAQpN,IAD1C,cACZgH,EADY,gBAECA,EAAS3B,OAFV,OAEhB2B,EAFgB,OAGVC,EAAMxC,KAAKa,MAAM0B,GACvB,EAAKtF,SAAS,CACZ0L,QAASnG,EACT1H,KAAMsT,IANQ,2CAtCJ,wDAiDdC,iBAAmB,SAACD,GAClB,EAAKnR,SAAS,CAACnC,KAAMsT,KAlDT,EAqDdE,SAAW,WACT,EAAKrR,SAAS,CAAClC,UAAW,KAtDd,EAyDdwT,UAAY,WACV,EAAKtR,SAAS,CAAClC,UAAW,KA1Dd,EA6DdG,eAAiB,WACf,EAAK+B,UAAS,SAAAuP,GAAS,MAAK,CAACzR,UAAWyR,EAAUzR,cA9DtC,EAiEdyT,UAAY,SAACC,GACX,EAAKxR,SAAS,CAAC0D,OAAQ8N,EACRC,eAAe,KAnElB,EAsEdC,gBAAkB,WAChB,EAAK1R,SAAS,CAAC2R,uBAAuB,KAvE1B,EA2EdC,kBAAoB,WAClB,EAAK5R,SAAS,CAAC2R,uBAAuB,KA5E1B,EAmFdE,gBAAkB,SAACjL,EAAKe,GAClBA,EACF,EAAK3H,SAAS,CAAC2R,uBAAuB,EACvBjL,UAAWE,EACX/I,KAAMd,EAAQC,QAE3B,EAAKgD,SAAS,CAAC2R,uBAAuB,EACpCjL,UAAWE,KA1FL,EA8FdgB,eAAiB,WACf,EAAK5H,SAAS,CAAC0G,UAAW,MA7F1B,EAAK5G,MAAQ,CAACjC,KAAMd,EAAQC,MACdc,UAAU,EACV2T,eAAe,EACf/F,QAAS,CAACzM,YAAa,GAAID,cAAe,IAC1CG,aAAa,EACbwS,uBAAuB,EACvBjL,UAAW,GACXoL,iBAAiB,GATnB,E,iFAcO,IAAD,OACb3T,KAAK2B,MAAM2R,eAEd9O,MAAM,cACH2J,MAAK,SAAChH,GAAD,OAAcA,EAAS3B,UAC5B2I,MAAK,SAAC/G,GACDA,EAAIwM,iBACN,EAAK/R,SAAS,CACZ0L,QAASnG,EAAIyM,KACbP,eAAe,EACf5T,KAAMd,EAAQE,Y,+BA0EhB,IAAD,OACDgV,EAAWhB,EAAW9S,KAAK2B,MAAMjC,MACvC,OACE,yBAAKK,UAAU,eACZC,KAAK2B,MAAMgS,gBACV,kBAAC,EAAD,CAAU1R,MAAO,kBAAM,EAAKJ,SAAS,CAAC8R,iBAAiB,OAAa,KAC7C,IAAxB3T,KAAK2B,MAAM4G,UAAkB,yBAAKxI,UAAU,cACvC,8BAAOC,KAAK2B,MAAM4G,WAClB,4BAAQxI,UAAU,cAAcG,QAASF,KAAKyJ,gBAC1C,0BAAM1J,UAAU,kBAAuC,KAChEC,KAAK2B,MAAM6R,sBACR,kBAAC,EAAD,CACEjP,QAAQ,EACRgB,OAAQvF,KAAK2B,MAAM4L,QAAQpN,GAC3B6E,KAAMhF,KAAK0T,gBACXhO,OAAQ1F,KAAKyT,oBAAuB,KAC1C,kBAAC,EAAD,CACExT,UAAWD,KAAK2B,MAAMgS,gBACtBnT,MAAOqS,EAAU7S,KAAK2B,MAAMjC,MAC5BA,KAAMM,KAAK2B,MAAMjC,KACjBG,WAAYG,KAAKiT,iBACjBtT,SAAUK,KAAK2B,MAAMhC,SACrBG,eAAgBE,KAAKF,iBACrB,kBAAC,EAAD,CACED,WAAYG,KAAKiT,iBACjBtT,SAAYK,KAAK2B,MAAMhC,SACvBD,KAAMM,KAAK2B,MAAMjC,KACjBI,eAAgBE,KAAKF,eACrBgB,YAAad,KAAK2B,MAAM4L,QAAQzM,YAChCD,cAAeb,KAAK2B,MAAM4L,QAAQ1M,cAClCE,aAAkD,UAApCf,KAAK2B,MAAM4L,QAAQlG,aACjCrG,YAAahB,KAAKuT,gBAClBrS,OAAQ,kBAAM,EAAK+R,iBAAiBrU,EAAQC,QAC5CoC,UAAW,WAAO,EAAKY,SAAS,CAAC8R,iBAAiB,OACpD,kBAAC,EAAD,CACE1T,UAAWD,KAAK2B,MAAMgS,gBACtBjU,KAAMM,KAAK2B,MAAMjC,KACjBG,WAAYG,KAAKiT,iBACjBtT,SAAUK,KAAK2B,MAAMhC,WACvB,kBAACmU,EAAD,CACEnU,SAAUK,KAAK2B,MAAMhC,SACrBD,KAAMM,KAAK2B,MAAMjC,KACjBG,WAAYG,KAAKiT,iBACjB1F,QAASvN,KAAK2B,MAAM4L,QACpBC,gBAAiBxN,KAAKwN,uB,GAhJhB/M,IAAMC,WCrBJqT,QACW,cAA7B1L,OAAOiH,SAAS0E,UAEe,UAA7B3L,OAAOiH,SAAS0E,UAEhB3L,OAAOiH,SAAS0E,SAAS1S,MACvB,2DCTN2S,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpG,MAAK,SAAAqG,GACjCA,EAAaC,kB","file":"static/js/main.b4689525.chunk.js","sourcesContent":["/* AppMode: The enumerated type for AppMode. */\r\n\r\nconst AppMode = {\r\n    LOGIN: \"LoginMode\",\r\n    FEED: \"FeedMode\",\r\n    ROUNDS: \"RoundsMode\",\r\n    ROUNDS_LOGROUND: \"RoundsMode-LogRound\",\r\n    ROUNDS_EDITROUND: \"RoundsMode-EditRound\",\r\n    COURSES: \"CoursesMode\",\r\n    COURSES_NEARBY: \"CoursesMode-Nearby\",\r\n    COURSES_ALL: \"CoursesMode-All\"\r\n};\r\n\r\nObject.freeze(AppMode); //This ensures that the object is immutable.\r\n\r\nexport default AppMode;","import React from 'react';\r\nimport AppMode from '../AppMode';\r\n\r\nclass NavBar extends React.Component {\r\n\r\n  getMenuBtnIcon = () => {\r\n      if (this.props.mode === AppMode.ROUNDS_LOGROUND || \r\n          this.props.mode === AppMode.ROUNDS_EDITROUND)\r\n          return \"fa fa-arrow-left\";\r\n      if (this.props.menuOpen)\r\n        return \"fa fa-times\";\r\n      return \"fa fa-bars\";\r\n  }\r\n\r\n  handleMenuBtnClick = () => {\r\n    if (this.props.mode === AppMode.ROUNDS_LOGROUND ||\r\n        this.props.mode === AppMode.ROUNDS_EDITROUND) {\r\n      this.props.changeMode(AppMode.ROUNDS);\r\n    } else if (this.props.mode != AppMode.LOGIN) {\r\n      this.props.toggleMenuOpen();\r\n    }\r\n  }\r\n\r\n    \r\n  render() {\r\n    return (\r\n    <div className={\"navbar\" + (this.props.aboutOpen ? \" ignore-click\":\"\")}>  \r\n    <span className=\"navbar-items\">\r\n      <button className=\"sidemenu-btn\" onClick={this.handleMenuBtnClick}>\r\n        <span id=\"menuBtnIcon\" className={\"sidemenu-btn-icon \" + this.getMenuBtnIcon()}>\r\n        </span>\r\n      </button>\r\n      <img src=\"http://tiny.cc/sslogo\" alt=\"Speed Score Logo\" height=\"38px\"\r\n      width=\"38px\" />\r\n      <span className=\"navbar-title\">\r\n        &nbsp;{this.props.title}\r\n      </span>\r\n    </span>\r\n  </div>\r\n); \r\n}\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport AppMode from './../AppMode.js'\r\nimport App from './App.js';\r\n\r\nclass SideMenu extends React.Component {\r\n\r\n//renderModeItems -- Renders correct subset of mode menu items based on\r\n//current mode, which is stored in this.prop.mode. Uses switch statement to\r\n//determine mode.\r\nrenderModeMenuItems = () => {\r\n  switch (this.props.mode) {\r\n    case AppMode.FEED:\r\n      return(\r\n        <div>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-users\"></span>&nbsp;Followed Users</a>\r\n        <a className=\"sidemenu-item \">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Feed</a>\r\n        </div>\r\n      );\r\n    break;\r\n    case AppMode.ROUNDS:\r\n      return(\r\n        <div>\r\n          <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Log New Round</a>\r\n          <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Rounds</a>\r\n        </div>\r\n      );\r\n    break;\r\n    case AppMode.COURSES:\r\n    case AppMode.COURSES_NEARBY:\r\n    case AppMode.COURSES_ALL:\r\n      return(\r\n        <div>\r\n        <a className=\"sidemenu-item\" onClick={() => this.props.changeMode(AppMode.COURSES)}>\r\n            <span className=\"fa fa-search\"></span>&nbsp;Specific Course</a>\r\n        <a className=\"sidemenu-item\" onClick={() => this.props.changeMode(AppMode.COURSES_NEARBY)}>\r\n            <span className=\"fa fa-map-marker\"></span>&nbsp;Nearby Courses</a>\r\n        <a className=\"sidemenu-item\" onClick={() => this.props.changeMode(AppMode.COURSES_ALL)}>\r\n            <span className=\"fa fa-th-list\"></span>&nbsp;All Speedgolf-Friendly Courses</a>\r\n        </div>\r\n      );\r\n    default:\r\n        return null;\r\n    }\r\n}\r\n\r\n    render() {\r\n       return (\r\n        <div className={\"sidemenu \" + (this.props.menuOpen ? \"sidemenu-open\" : \"sidemenu-closed\")}\r\n             onClick={this.props.toggleMenuOpen}>\r\n          {/* SIDE MENU TITLE */}\r\n          <div className=\"sidemenu-title\">\r\n            <img src={this.props.profilePicURL} height='60' width='60' />\r\n            <span id=\"userID\" className=\"sidemenu-userID\">&nbsp;{this.props.displayName}</span>\r\n        </div>\r\n          {/* MENU CONTENT */}\r\n          {this.renderModeMenuItems()}\r\n          {/* The following menu items are present regardless of mode */}\r\n          {this.props.localAccount ? \r\n            <a id=\"accountBtn\" className=\"sidemenu-item\" onClick={this.props.editAccount}>\r\n              <span className=\"fa fa-user\"></span>&nbsp;Account</a> : null}\r\n          <a id=\"aboutBtn\" className=\"sidemenu-item\" onClick={this.props.showAbout}>\r\n            <span className=\"fa fa-info-circle\"></span>&nbsp;About</a>\r\n          <a id=\"logOutBtn\" className=\"sidemenu-item\" onClick={this.props.logOut}>\r\n            <span className=\"fa fa-sign-out-alt\"></span>&nbsp;Log Out</a>\r\n        </div>\r\n       );\r\n    }\r\n}\r\n\r\nexport default SideMenu;\r\n","import React from 'react';\r\nimport AppMode from '../AppMode.js';\r\n\r\n\r\nclass ModeBar extends React.Component {\r\n    render() {\r\n      return(\r\n        <div className={\"modebar\" + (this.props.mode === AppMode.LOGIN ? \r\n          \" invisible\" : (this.props.menuOpen || this.props.aboutOpen ? \" ignore-click visible\" : \" visible\"))}>\r\n        <a className={(this.props.mode === AppMode.FEED ? \" item-selected\" : null)}\r\n            onClick={()=>this.props.changeMode(AppMode.FEED)}>\r\n          <span className=\"modebaricon fa fa-th-list\"></span>\r\n          <span className=\"modebar-text\">Feed</span>\r\n        </a>\r\n        <a className={(this.props.mode === AppMode.ROUNDS || \r\n               this.props.mode === AppMode.ROUNDS_EDITROUND || \r\n               this.props.mode === AppMode.ROUNDS_LOGROUND ? \r\n                  \" item-selected\" : null)}\r\n           onClick={()=>this.props.changeMode(AppMode.ROUNDS)}>\r\n          <span className=\"modebar-icon  fa fa-history\"></span>\r\n          <span className=\"modebar-text\">Rounds</span>\r\n        </a>\r\n        <a className={((this.props.mode === AppMode.COURSES) || \r\n        (this.props.mode === AppMode.COURSES_NEARBY) || \r\n        (this.props.mode === AppMode.COURSES_ALL) ? \" item-selected\" : null)}\r\n          onClick={()=>this.props.changeMode(AppMode.COURSES)}>\r\n          <span className=\"modebar-icon  fa fa-flag\"></span>\r\n          <span className=\"modebar-text\">Courses</span>\r\n        </a> \r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default ModeBar;\r\n","import React from 'react';\r\n\r\nclass ConfirmDeleteAccount extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.emailRef = React.createRef();\r\n        this.state = {emailMatches: false};\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.emailRef.current.focus();\r\n    }\r\n\r\n    handleChange = () => {\r\n        const match = (this.emailRef.current.value === this.props.email);\r\n        if (match != this.state.emailMatches) {\r\n            this.setState({emailMatches: match});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <center>\r\n                <h3 className=\"modal-title\"><b>Confirm Account Deletion</b></h3>\r\n              </center>\r\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\r\n                 &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <p>Do you really want to delete your account? <br />\r\n                 <i>This action cannot be undone.</i></p>\r\n              <label>\r\n                Confirm Email ({this.props.email}):\r\n                <br/>\r\n                <input \r\n                    className=\"form-center\"\r\n                    type=\"text\"\r\n                    ref={this.emailRef}\r\n                    onChange={this.handleChange} />\r\n                </label>\r\n                <br />\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteAccount} disabled={!this.state.emailMatches}>\r\n                  Yes, Delete My Account</button>\r\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\r\n                  No, Cancel</button>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmDeleteAccount;","import React from 'react';\r\nimport ConfirmDeleteAccount from './ConfirmDeleteAccount.js';\r\nimport confirmDeleteAccount from './ConfirmDeleteAccount.js';\r\n\r\nclass CreateEditAccountDialog extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.origAccountInfo = null;\r\n        //Create a ref for the email input DOM element\r\n        this.newUserRef = React.createRef();\r\n        this.repeatPassRef = React.createRef();\r\n        this.profilePicRef = React.createRef();\r\n        this.state = {accountName: \"\",\r\n                      displayName: \"\",\r\n                      profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\r\n                      password: \"\",\r\n                      passwordRepeat: \"\",\r\n                      securityQuestion: \"\",\r\n                      securityAnswer: \"\",\r\n                      formUpdated: false,\r\n                      confirmDelete: false};\r\n    } \r\n\r\n    //componentDidMount -- If we are editing an existing user acccount, we need to grab the data from\r\n    //the database and push them into the state.\r\n    async componentDidMount() {\r\n        if (!this.props.create) {\r\n            //obtain current user data from database and push into state\r\n            const url = \"/users/\" + this.props.userId;\r\n            const res = await fetch(url);\r\n            const json = await res.json();\r\n            const userData = JSON.parse(json);\r\n            this.origAccountInfo = userData; //This determines whether update can occur\r\n            this.origAccountInfo.passwordRepeat = userData.password;\r\n            this.setState({accountName: this.props.userId,\r\n                           displayName: userData.displayName,\r\n                           profilePicURL: userData.profilePicURL,\r\n                           password: userData.password,\r\n                           passwordRepeat: userData.password,\r\n                           securityQuestion: userData.securityQuestion,\r\n                           securityAnswer: userData.securityAnswer});\r\n        }\r\n    }\r\n\r\n    //checkDataValidity -- Callback function invoked after a form element in\r\n    //the 'Create Account' dialog box changes and component state has been\r\n    //updated. We first check whether the passwords match. If they do not, \r\n    //we set a custom validity message to be displayed when the user clicks the\r\n    //'Create Account' button. Otherwise, we reset the custom validity message\r\n    //to empty so that it will NOT fire when the user clicks 'Create Account'.\r\n    //Second, we check whether anything in the form changed from the original.\r\n    //If so, we update the 'formUpdated' state var, so that the form's submit\r\n    //button is enabled.\r\n    checkDataValidity = () => {\r\n        if (this.state.password != this.state.passwordRepeat) {\r\n            //Passwords don't match\r\n            this.repeatPassRef.current.setCustomValidity(\r\n            \"This password must match password entered in previous field.\");\r\n        } else {\r\n            this.repeatPassRef.current.setCustomValidity(\"\");\r\n        }\r\n    }\r\n\r\n    //handleChange--Called when a field in a dialog box form changes.\r\n    handleChange = (event) => {\r\n        const formUpdated = (this.origAccountInfo == null ? true : this.formIsUpdated(event.target.name,event.target.value));\r\n        if (event.target.name === \"profilePic\") {\r\n            if (event.target.value.length == 0) { //The user canceled the file selection -- set back to default\r\n                this.setState({profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\r\n                               formUpdated: formUpdated},\r\n                               this.checkDataValidity);\r\n            } else { //The user selected a file\r\n                const self = this;\r\n                const reader = new FileReader();\r\n                reader.readAsDataURL(this.profilePicRef.current.files[0]);\r\n                reader.addEventListener(\"load\",function() {\r\n                    self.setState({profilePicURL:  this.result,\r\n                                   formUpdated: formUpdated},this.checkDataValidity);\r\n                });\r\n                \r\n            }\r\n        } else {\r\n            this.setState({[event.target.name]: event.target.value,\r\n                           formUpdated: formUpdated},this.checkDataValidity);\r\n        }\r\n    } \r\n\r\n    //formisUpdated-- Checks whether any form data element has changed from the original. If so, \r\n    //returns true. Returns false otherwise. Note that in case of editing new account, always returns\r\n    //true since this.origAccountInfo is set to null.\r\n    //Should be called whenever the user makes a change to form data.\r\n    formIsUpdated = (updateField,updateVal) => {\r\n        if (this.origAccountInfo[updateField] != updateVal) {return true;}\r\n        if (updateField != \"displayName\" && \r\n             this.state.displayName != this.origAccountInfo.displayName) \r\n             {return true;}\r\n        if (updateField != \"profilePicURL\" && \r\n             this.state.profilePicURL != this.origAccountInfo.profilePicURL) \r\n             {return true;}\r\n        if (updateField != \"password\" &&\r\n            this.state.password !== this.origAccountInfo.password)\r\n            {return true;}\r\n        if (updateField != \"passwordRepeat\" &&\r\n            this.state.passwordRepeat !== this.origAccountInfo.passwordRepeat)\r\n            {return true;}\r\n        if (updateField != \"securityQuestion\" &&\r\n            this.state.securityQuestion !== this.origAccountInfo.securityQuestion)\r\n            {return true;}\r\n        if (updateField != \"securityAnswer\" &&\r\n            this.state.securityAnswer !== this.origAccountInfo.securityAnswer)\r\n            {return true;}\r\n        return false;\r\n    }\r\n\r\n    //setDefaultDisplayName -- Triggered by onBlur() event of Email field.\r\n    //Sets default value of display name to value entered into Email field \r\n    //as a courtesy.\r\n    setDefaultDisplayName = (event) => {\r\n      if (event.target.value.length > 0 && this.state.displayName === \"\") {\r\n        this.setState({displayName: event.target.value});\r\n      }\r\n    }\r\n\r\n    //handleSubmit -- Triggered when user clicks on submit button to\r\n    //either create or edit account.\r\n    //Custom data checking ensures user account under this email does not \r\n    //already exist and that the rest of the info is valid. We create a new  \r\n    // object for user, save it to localStorage and take user to app's \r\n    //landing page. \r\n    handleSubmit = async(event) => {\r\n        event.preventDefault();\r\n        //Initialize user account\r\n        let userData = {\r\n            displayName: this.state.displayName,\r\n            password: this.state.password,\r\n            profilePicURL: this.state.profilePicURL,\r\n            securityQuestion: this.state.securityQuestion,\r\n            securityAnswer: this.state.securityAnswer\r\n        };\r\n        const url = '/users/' + this.state.accountName;\r\n        let res;\r\n        if (this.props.create) { //use POST route to create new user account\r\n            res = await fetch(url, {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                    },\r\n                method: 'POST',\r\n                body: JSON.stringify(userData)}); \r\n            if (res.status == 200) { //successful account creation!\r\n                this.props.done(\"New account created! Enter credentials to log in.\",false);\r\n            } else { //Unsuccessful account creation\r\n                //Grab textual error message\r\n                const resText = await res.text();\r\n                this.props.done(resText,false);\r\n            }\r\n        } else { //use PUT route to update existing user account\r\n            res = await fetch(url, {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                    },\r\n                method: 'PUT',\r\n                body: JSON.stringify(userData)}); \r\n            if (res.status == 200) { //successful account creation!\r\n                this.props.done(\"User Account Updated!\",false);\r\n            } else { //Unsuccessful account update\r\n                //Grab textual error message\r\n                const resText = await res.text();\r\n                this.props.done(resText,false);\r\n            }\r\n        }\r\n    }\r\n\r\n    //deleteAccount -- Called after confirms account deletion. \r\n    //Uses DELETE server route to perform server deletion. \r\n    //Calls on done with status message and\r\n    //true if delete was succesful, false otherwise.\r\n    deleteAccount = async() => {\r\n       const url = '/users/' + this.state.accountName;\r\n       const res = await fetch(url, \r\n                    {method: 'DELETE'}); \r\n        if (res.status == 200) { //successful account deletion!\r\n            this.props.done(\"Account '\" + this.state.accountName + \"' has been deleted.\",true);\r\n        } else { //Unsuccessful account deletion\r\n            //Grab textual error message\r\n            const resText = await res.text();\r\n            this.props.done(resText,false);\r\n        }\r\n        this.setState({confirmDelete: false});\r\n    }\r\n\r\n    //confirmDeleteAccount -- Called when user clicks on \"Delete Account...\"\r\n    //button to indicate intention to delete account. Presents the Confirm\r\n    //Delete dialog box.\r\n    confirmDeleteAccount = (e) => {\r\n        e.preventDefault();\r\n        this.setState({confirmDelete: true});\r\n    }\r\n\r\n    render() {\r\n    return (  \r\n    <div className=\"modal\" role=\"dialog\">\r\n    <div className=\"modal-dialog modal-lg\"></div>\r\n        <div className=\"modal-content form-center\">\r\n            <div className=\"modal-header\">\r\n              <h3><b>{this.props.create ? \"Create New Account\" : \"Edit Account\"}</b></h3>\r\n              <button className=\"modal-close\" \r\n                       onClick={this.props.cancel}>\r\n                &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n            <form onSubmit={this.handleSubmit}>\r\n            <label>\r\n                Email: \r\n                <input  \r\n                autocomplete=\"off\"\r\n                disabled={!this.props.create}\r\n                className=\"form-control form-text form-center\"\r\n                name=\"accountName\"\r\n                type=\"email\"\r\n                size=\"35\"\r\n                placeholder=\"Enter Email Address\"\r\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                required={true}\r\n                ref={this.newUserRef}\r\n                value={this.state.accountName}\r\n                onChange={this.handleChange}\r\n                onBlur={this.setDefaultDisplayName}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Password:\r\n                <input\r\n                autocomplete=\"off\"\r\n                className=\"form-control form-text form-center\"\r\n                name=\"password\"\r\n                type=\"password\"\r\n                size=\"35\"\r\n                placeholder=\"Enter Password\"\r\n                pattern=\r\n                \"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                required={true}\r\n                value={this.state.password}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Repeat Password:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"passwordRepeat\"\r\n                type=\"password\"\r\n                size=\"35\"\r\n                placeholder=\"Repeat Password\"\r\n                required={true}\r\n                ref={this.repeatPassRef}\r\n                value={this.state.passwordRepeat}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Display Name:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"displayName\"\r\n                type=\"text\"\r\n                size=\"30\"\r\n                placeholder=\"Display Name\"\r\n                required={true}\r\n                value={this.state.displayName}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Profile Picture:<br/>\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"profilePic\"\r\n                type=\"file\"\r\n                accept=\"image/x-png,image/gif,image/jpeg\" \r\n                ref={this.profilePicRef}\r\n                value={this.state.profilePic}\r\n                onChange={this.handleChange}\r\n                />\r\n                <img src={this.state.profilePicURL != \"\" ? \r\n                            this.state.profilePicURL :\r\n                            this.state.profilePicDataURL} \r\n                        height=\"60\" width=\"60\" \r\n                 />\r\n            </label> \r\n            <br/>\r\n            <label>\r\n                Security Question:\r\n                <textarea\r\n                className=\"form-control form-text form-center\"\r\n                name=\"securityQuestion\"\r\n                size=\"35\"\r\n                placeholder=\"Security Question\"\r\n                rows=\"2\"\r\n                cols=\"35\"\r\n                maxLength=\"100\"\r\n                required={true}\r\n                value={this.state.securityQuestion}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Answer to Security Question:\r\n                <textarea\r\n                className=\"form-control form-text form-center\"\r\n                name=\"securityAnswer\"\r\n                type=\"text\"\r\n                placeholder=\"Answer\"\r\n                rows=\"2\"\r\n                cols=\"35\"\r\n                maxLength=\"100\"\r\n                required={true}\r\n                value={this.state.securityAnswer}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            {!this.props.create ?  \r\n            <button className=\"btn btn-small btn-danger\" onClick={this.confirmDeleteAccount}>\r\n                Delete Account...\r\n            </button> : null}\r\n            <br/><br/>\r\n            <button role=\"submit\" \r\n                disabled={!this.state.formUpdated}\r\n                className=\"btn btn-primary btn-color-theme modal-submit-btn\">\r\n                <span className={this.props.create ? \"fa fa-user-plus\" : \"fa fa-user\"}></span>\r\n                &nbsp;{this.props.create ? \"Create Account\" : \"Update Account\"}\r\n            </button>\r\n            </form>\r\n            </div>\r\n        </div>\r\n        {this.state.confirmDelete ? \r\n          <ConfirmDeleteAccount email={this.state.accountName}\r\n                                deleteAccount={this.deleteAccount}\r\n                                close={() => (this.setState({confirmDelete: false}))}\r\n         /> : null}\r\n    </div>\r\n    );\r\n}\r\n}\r\n\r\nexport default CreateEditAccountDialog;","import React from 'react'\r\n\r\nclass ResetPasswordDialog extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.resetPasswordRef = React.createRef();\r\n        this.resetPasswordRepeatRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //handleSubmit -- When the user submits the form, ensure that the passwords match.\r\n    //If so, call on resetPassword in parent component to actually reset the password.\r\n    //Otherwise, display an error message prompting the user to try again.\r\n    handleSubmit= (event) => {\r\n        event.preventDefault();\r\n        if (this.resetPasswordRef.current.value === this.resetPasswordRepeatRef.current.value) {\r\n            this.props.resetPassword(this.resetPasswordRef.current.value);\r\n        } else {\r\n            this.resetPasswordRepeatRef.current.focus();\r\n            this.setState({errorMsg: \"The passwords you entered do not match. Please try again.\"});\r\n        }\r\n    }\r\n\r\n    checkForSubmit = (e) => {\r\n        if (e.code === \"Enter\") {\r\n            e.preventDefault();\r\n            this.handleSubmit();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"modal-title\"><b>Reset Password</b>\r\n                    </h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={this.props.cancelResetPassword}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \r\n                    <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        New Password: \r\n                        <input\r\n                        type=\"password\"\r\n                        placeholder=\"Enter new password\"\r\n                pattern=\"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                        className=\"form-control form-text\"\r\n                        ref={this.resetPasswordRef}\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Repeat New Password: \r\n                        <input\r\n                        type=\"password\"\r\n                        placeholder=\"Repeat new password\"\r\n                        className=\"form-control form-text\"\r\n                        onKeyUp={this.checkForSubmit}\r\n                        ref={this.resetPasswordRepeatRef}\r\n                        />\r\n                    </label>\r\n                    <button role=\"submit\" \r\n                     className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-key\"></span>&nbsp;Reset Password\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          );\r\n        \r\n    }\r\n}\r\n\r\nexport default ResetPasswordDialog;","import React from 'react';\r\nimport AppMode from '../AppMode.js';\r\n\r\nclass LookUpAccountDialog extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.emailRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //handleLookUpAccount: When the user clicks on the \"Look Up Account\" dialog box\r\n    //button, we check whether the account exists. If it does, we update the state,\r\n    //setting the resetEmail var to the email entered, hiding the current dialog box\r\n    //and showing the security question dialog box.\r\n    handleLookUpAccount = async(event) => {\r\n        event.preventDefault();\r\n        let response = await fetch(\"/users/\" + this.emailRef.current.value);\r\n        if (response.status == 200) {\r\n            const json = await response.json();\r\n            const obj = JSON.parse(json);\r\n            if (obj.authStrategy === \"local\") {\r\n                this.props.getSecurityAnswer(obj.id,obj.securityQuestion, obj.securityAnswer);\r\n            } else { //Account exists but was created through OAuth so password can't be reset \r\n                this.setState({ErrMsg: \"That account is authenticated through \" + obj.authStrategy + \". \" +\r\n                               \"Please log in to \" + obj.authStrategy + \" to reset the password.\"});\r\n            }\r\n        } else {\r\n            this.setState({errorMsg: \"Sorry, there is no account associated with '\" + this.emailRef.current.value + \"'.\"});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"modal-title\"><b>Look Up Account</b></h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={() => {this.props.cancelResetPassword()}}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null}\r\n                    <form onSubmit={this.handleLookUpAccount}>\r\n                    <label>\r\n                        Account Email Address: \r\n                        <input\r\n                        ref={this.emailRef}\r\n                        className=\"form-control form-text\"\r\n                        type=\"email\"\r\n                        size=\"35\"\r\n                        placeholder=\"Enter Email Address\"\r\n                        pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                        ref={this.emailRef}\r\n                        required={true}\r\n                        />\r\n                    </label>\r\n                    <button type=\"submit\" \r\n                        className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-search\"></span>&nbsp;Look Up Account\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>  \r\n        );   \r\n    }\r\n\r\n}\r\n\r\nexport default LookUpAccountDialog;\r\n","import React from 'react';\r\n\r\nclass SecurityQuestionDialog extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.securityAnswerRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //Focus cursor in email secrity answer field when mounted\r\n    componentDidMount() {\r\n        this.securityAnswerRef.current.focus();\r\n    }  \r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (this.securityAnswerRef.current.value === this.props.answer) {\r\n            this.props.getNewPassword();\r\n        } else {\r\n            this.securityAnswerRef.current.focus();\r\n            this.setState({errorMsg: \"Sorry, that is not the correct answer to the security question. Try again.\"});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"modal-title\"><b>Answer Security Question</b>\r\n                    </h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={this.props.cancelResetPassword}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \r\n                    <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        Security Question: \r\n                        <textarea\r\n                        readOnly={true}\r\n                        value={this.props.question}\r\n                        className=\"form-control form-text\"\r\n                        rows=\"3\"\r\n                        cols=\"35\"\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Security Answer: \r\n                        <textarea\r\n                        className=\"form-control form-text\"\r\n                        placeholder=\"Enter Security Question Answer\"\r\n                        ref={this.securityAnswerRef}\r\n                        rows=\"3\"\r\n                        cols=\"35\"\r\n                        />\r\n                    </label>\r\n                    <button role=\"submit\" \r\n                      className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-check\"></span>&nbsp;Verify Answer\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          );        \r\n    }\r\n}\r\n export default SecurityQuestionDialog;","import React from 'react';\r\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js';\r\nimport ResetPasswordDialog from './ResetPasswordDialog.js';\r\nimport LookUpAccountDialog from './LookUpAccountDialog.js';\r\nimport SecurityQuestionDialog from './SecurityQuestionDialog.js';\r\n\r\nclass LoginPage extends React.Component {\r\n\r\nconstructor() {\r\n    super();\r\n    //Create a ref for the email input DOM element\r\n    this.emailInputRef = React.createRef();\r\n    this.resetUserId = \"\";\r\n    this.resetQ = \"\";\r\n    this.resetA = \"\";\r\n    this.passwordInputRef = React.createRef();\r\n    this.state = {statusMsg: \"\",\r\n                  loginBtnIcon: \"fa fa-sign-in\",\r\n                  loginBtnLabel: \"Log In\",\r\n                  showLookUpAccountDialog: false,\r\n                  showSecurityQuestionDialog: false,\r\n                  showResetPaswordDialog: false,\r\n                  githubIcon: \"fa fa-github\",\r\n                  githubLabel: \"Sign in with GitHub\",\r\n                  loginMsg: \"\",\r\n                  newAccountCreated: false\r\n                  };\r\n} \r\n    \r\n//Focus cursor in email input field when mounted\r\ncomponentDidMount() {\r\n    this.emailInputRef.current.focus();\r\n}  \r\n\r\n//handleLoginSubmit -- Called when user clicks on login button.\r\nhandleLoginSubmit = async (event) => {\r\n    event.preventDefault();\r\n    this.setState({loginBtnIcon: \"fa fa-spin fa-spinner\",\r\n                   loginBtnLabel: \"Logging In...\"});\r\n    const url = \"auth/login?username=\" + this.emailInputRef.current.value +\r\n                \"&password=\" + this.passwordInputRef.current.value;\r\n    const res = await fetch(url, {method: 'POST'}); \r\n    if (res.status == 200) { //successful login!\r\n        window.open(\"/\",\"_self\");\r\n    } else { //Unsuccessful login\r\n      const resText = await res.text();\r\n      this.setState({loginBtnIcon: \"fa fa-sign-in\",\r\n                     loginBtnLabel: \"Log In\",\r\n                     statusMsg: resText});\r\n    }\r\n}\r\n\r\n  //accountCreateDone -- Called by child CreateAccountDialog component when \r\n  //user attempted to create new account. Hide the dialog and display \r\n  //a message indicating result of the attempt.\r\n  accountCreateDone = (msg) => {\r\n      this.setState({statusMsg: msg,\r\n                     showCreateAccountDialog: false});\r\n  }\r\n\r\n  //cancelCreateAccount -- Called by child CreateAccountDialog componenet when user decides\r\n  //to cancel creation of new account by clicking the \"X\" in top-right of dialog.\r\n  cancelCreateAccount = () => {\r\n      this.setState({showCreateAccountDialog: false});\r\n  }\r\n\r\n//cancelResetPassword -- Called by one of the child three child dialog box components when\r\n//the user decides to cancel resetting their password. Toggles state so that all three\r\n//of the dialog boxes are hidden\r\ncancelResetPassword = () => {\r\n    this.resetUserId = \"\";\r\n    this.resetQ = \"\";\r\n    this.resetA = \"\";\r\n    this.setState({showLookUpAccountDialog: false,\r\n                   showSecurityQuestionDialog: false,\r\n                   showResetPaswordDialog: false});             \r\n}\r\n\r\n//handleOAuthLogin -- Callback function that initiates contact with OAuth\r\n//provider\r\nhandleOAuthLogin = (provider) => {\r\n    window.open(`/auth/${provider}`,\"_self\");\r\n}\r\n\r\n//handleOAuthLoginClick -- Called whent the user clicks on button to\r\n//authenticate via a third-party OAuth service. The name of the provider is\r\n//passed in as a parameter.\r\nhandleOAuthLoginClick = (provider) => {\r\n   this.setState({[provider + \"Icon\"] : \"fa fa-spin fa-spinner\",\r\n                  [provider + \"Label\"] : \"Connecting...\"});\r\n   setTimeout(() => this.handleOAuthLogin(provider),1000);\r\n}\r\n\r\n//getSecurityAnswer: Given the id, security question, and security answer obtained\r\n//from the LookUpAccountDialog component, update state such that the user will\r\n//next be prompted to enter security question and answer for verification\r\ngetSecurityAnswer = (userId, question, answer) => {\r\n    this.resetUserId = userId;\r\n    this.resetQ = question;\r\n    this.resetA = answer;\r\n    this.setState({showLookUpAccountDialog: false,\r\n                   showSecurityQuestionDialog: true\r\n                });\r\n}\r\n\r\n//getNewPassword-- Called after user successfully provides correct answer\r\n//to security question. Presents the \"Reset Password\" dialog box.\r\ngetNewPassword = () => {\r\n    this.setState({showSecurityQuestionDialog: false,\r\n                    showResetPaswordDialog: true});\r\n}\r\n\r\n//resetPassword--Called after the user successfully enters a new (acceptable)\r\n//password. pw contains the new password. Call on the Update (PUT) server\r\n//route to update the user's password in the database.\r\nresetPassword = async(pw) => {\r\n    const url = \"/users/\" + this.resetUserId;\r\n    const res = await fetch(url, {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n            },\r\n        method: 'PUT',\r\n        body: JSON.stringify({password: pw})}); \r\n    if (res.status == 200) { //successful update creation!\r\n        this.setState({showResetPaswordDialog: false,\r\n                       statusMsg: \"Password successfully reset!\"});\r\n    } else { //Unsuccessful account creation\r\n        //Grab textual error message\r\n        const resText = await res.text();\r\n        this.setState({showResetPasswordDialog: false,\r\n                      statusMsg: resText});\r\n    }\r\n    \r\n}\r\n\r\n//newAccountCreated -- Called after successful creation of a new account\r\naccountCreateDone = (msg,deleted) => {\r\n    this.setState({statusMsg: msg,\r\n                   showCreateAccountDialog: false});\r\n}\r\n\r\n//closeStatusMsg -- Called when user clicks on \"x\" to dismiss status message\r\ncloseStatusMsg = () => {\r\n    this.setState({statusMsg: \"\"});\r\n}\r\n\r\n//cancelCreateAccount -- called to hide Create Account dialog without creating acct\r\ncancelCreateAccount = () => {\r\n    this.setState({showCreateAccountDialog: false});\r\n}\r\n\r\n  render() {\r\n    return(\r\n        <div>\r\n        <center>\r\n        {this.state.statusMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.statusMsg}</span>\r\n                       <button className=\"modal-close\" onClick={this.closeStatusMsg}>\r\n                          <span className=\"fa fa-times\"></span>\r\n                        </button></div>: null}\r\n            {this.state.showLookUpAccountDialog ? \r\n              <LookUpAccountDialog cancelResetPassword={this.cancelResetPassword}\r\n                                   getSecurityAnswer={this.getSecurityAnswer}/> : null}\r\n            {this.state.showSecurityQuestionDialog ? \r\n               <SecurityQuestionDialog cancelResetPassword={this.cancelResetPassword}\r\n                                       question={this.resetQ}\r\n                                       answer={this.resetA}\r\n                                       getNewPassword={this.getNewPassword}/> : null}\r\n            {this.state.showResetPaswordDialog ? \r\n              <ResetPasswordDialog cancelResetPassword={this.cancelResetPassword}\r\n                                   resetPassword={this.resetPassword} /> : null}\r\n            <form id=\"loginInterface\" onSubmit={this.handleLoginSubmit}>\r\n            <label htmlFor=\"emailInput\" style={{ padding: 0, fontSize: 24 }}>\r\n                Email:\r\n                <input\r\n                ref={this.emailInputRef}\r\n                className=\"form-control login-text\"\r\n                type=\"email\"\r\n                placeholder=\"Enter Email Address\"\r\n                id=\"emailInput\"\r\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                required={true}\r\n                />\r\n            </label>\r\n            <p />\r\n            <label htmlFor=\"passwordInput\" style={{ padding: 0, fontSize: 24 }}>\r\n                Password:\r\n                <input\r\n                ref={this.passwordInputRef}\r\n                className=\"form-control login-text\"\r\n                type=\"password\"\r\n                placeholder=\"Enter Password\"\r\n                pattern=\"[A-Za-z0-9!@#$%^&*()_+\\-]+\"\r\n                required={true}\r\n                />\r\n            </label>\r\n            <p className=\"bg-danger\" id=\"feedback\" style={{ fontSize: 16 }} />\r\n            <button\r\n                type=\"submit\"\r\n                className=\"btn-color-theme btn btn-primary btn-block login-btn\">\r\n                <span id=\"login-btn-icon\" className={this.state.loginBtnIcon}/>\r\n                &nbsp;{this.state.loginBtnLabel}\r\n            </button>\r\n            <p>\r\n            <button type=\"button\" className=\"btn btn-link login-link\" \r\n                    onClick={() => {this.setState({showCreateAccountDialog: true});}}>\r\n                Create an account</button> | \r\n                <button type=\"button\" className=\"btn btn-link login-link\"\r\n                        onClick={() => {this.setState({showLookUpAccountDialog: true});}}>\r\n                Reset your password</button>\r\n            </p>  \r\n            <button type=\"button\" className=\"btn btn-github\"\r\n               onClick={() => this.handleOAuthLoginClick(\"github\")}>\r\n              <span className={this.state.githubIcon}></span>&nbsp;\r\n                {this.state.githubLabel}\r\n            </button>\r\n            <p>\r\n                <i>Version CptS 489</i>\r\n            </p>\r\n            </form>\r\n            {this.state.showCreateAccountDialog ? \r\n              <CreateEditAccountDialog\r\n                create={true} \r\n                done={this.accountCreateDone}\r\n                cancel={this.cancelCreateAccount} /> : null}\r\n            {this.state.showResetPasswordDialog ? <ResetPasswordDialog /> : null}\r\n        </center>\r\n        </div>\r\n        )\r\n    }\r\n} \r\n\r\nexport default LoginPage;\r\n","import React from 'react';\r\n\r\nclass FeedPage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"padded-page\">\r\n            <center>\r\n            <h1 >Activity Feed</h1>\r\n            <h2>This page is under construction.</h2>\r\n            <img src=\"https://dl.dropboxusercontent.com/s/qpjhy9x9gwdxpob/SpeedScoreLogo64Trans.png\" \r\n             height=\"200\" width=\"200\"/>\r\n            <p style={{fontStyle: \"italic\"}}>Version CptS 489 React Demo</p>\r\n            </center>\r\n        </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default FeedPage;","import React from 'react';\r\n\r\nclass ConfirmDeleteRound extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <center>\r\n                <h3 className=\"modal-title\"><b>Confirm Round Deletion</b></h3>\r\n              </center>\r\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\r\n                 &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <p>Do you really want to delete this round?</p>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteRound}>\r\n                  Yes, Delete</button>\r\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\r\n                  No, Cancel</button>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmDeleteRound;","import React from 'react';\r\nimport ConfirmDeleteRound from './ConfirmDeleteRound.js';\r\nimport AppMode from './../AppMode.js';\r\n\r\nclass RoundsTable extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {showConfirmDelete: false};\r\n  }\r\n\r\n  //editRound -- Triggered when the user clicks the edit button for a given\r\n  //round. The id param is the unique property that identifies the round.\r\n  //Set the state variable representing the id of the round to be edited and\r\n  //then switch to the ROUNDS_EDITROUND mode to allow the user to edit the\r\n  //chosen round.\r\n  editRound = (id) => {\r\n    this.props.setEditId(id);\r\n    this.props.changeMode(AppMode.ROUNDS_EDITROUND);\r\n  }\r\n\r\n  //deleteRound -- Triggered when the user clicks on the \"Yes, Delete\"\r\n  //button in the Confirm Delete dialog box. It executes the deletion and\r\n  //closes the dialog box.\r\n  deleteRound = () => {\r\n    this.props.deleteRound();\r\n    this.setState({showConfirmDelete: false});\r\n  }\r\n\r\n\r\n  //confirmDelete -- Triggered when the user clicks the delete button\r\n  //for a given round. The id paam is the unique property that \r\n  //identifies the round. Set the state variable representing the id\r\n  //of the round to be deleted and then present a dialog box asking\r\n  //the user to confirm the deletion.\r\n  confirmDelete = (id) => {\r\n    this.props.setDeleteId(id);\r\n    this.setState({showConfirmDelete: true});\r\n  }\r\n\r\n\r\n  //renderTable -- render an HTML table displaying the rounds logged\r\n  //by the current user and providing buttons to view/edit and delete each round.\r\n  renderTable = () => {\r\n  let table = [];\r\n  for (let r = 0; r < this.props.rounds.length; ++r) {\r\n    table.push(\r\n      <tr key={r}>\r\n        <td>{this.props.rounds[r].date.substring(0,10)}</td>\r\n        <td>{this.props.rounds[r].course}</td>\r\n        <td>{(Number(this.props.rounds[r].strokes) + \r\n              Number(this.props.rounds[r].minutes)) +\r\n              \":\" + (this.props.rounds[r].seconds < 10 ?  \r\n                \"0\" + this.props.rounds[r].seconds :\r\n                this.props.rounds[r].seconds) + \" (\" + \r\n              this.props.rounds[r].strokes + \r\n              \" in \" + this.props.rounds[r].minutes + \":\" + \r\n              (this.props.rounds[r].seconds < 10 ?  \r\n                \"0\" + this.props.rounds[r].seconds :\r\n                this.props.rounds[r].seconds) + \")\"}\r\n        </td>\r\n        <td><button onClick={this.props.menuOpen ? null : () => \r\n          this.editRound(r)}>\r\n              <span className=\"fa fa-eye\"></span></button></td>\r\n        <td><button onClick={this.props.menuOpen ? null : \r\n          () => this.confirmDelete(r)}>\r\n              <span className=\"fa fa-trash\"></span></button></td>\r\n      </tr> \r\n    );\r\n  }\r\n  return table;\r\n  }\r\n\r\n  //render--render the entire rounds table with header, displaying a \"No\r\n  //Rounds Logged\" message in case the table is empty.\r\n  render() {\r\n    return(\r\n    <div className=\"padded-page\">\r\n      <h1></h1>\r\n      <table className=\"table table-hover\">\r\n        <thead className=\"thead-light\">\r\n        <tr>\r\n          <th>Date</th>\r\n          <th>Course</th>\r\n          <th>Score</th>\r\n          <th>View/Edit...</th>\r\n          <th>Delete</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n          {Object.keys(this.props.rounds).length === 0 ? \r\n          <tr>\r\n          <td colSpan=\"5\" style={{fontStyle: \"italic\"}}>No rounds logged</td>\r\n          </tr> : this.renderTable()\r\n          }\r\n        </tbody>\r\n      </table>\r\n      {this.state.showConfirmDelete ?\r\n        <ConfirmDeleteRound \r\n          close={() => this.setState({showConfirmDelete: false})} \r\n          deleteRound={this.deleteRound} /> : null}\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RoundsTable;\r\n","import React from 'react';\r\nimport AppMode from './../AppMode.js';\r\n\r\nclass RoundForm extends React.Component {\r\n  constructor(props) {\r\n  super(props);\r\n  //Create date object for today, taking time zone into consideration\r\n  let today = new Date(Date.now()-(new Date()).getTimezoneOffset()*60000);\r\n  //store date as ISO string\r\n  if (this.props.mode === AppMode.ROUNDS_LOGROUND) {\r\n    //If logging a new round, the starting state is a default round with\r\n    //today's date.\r\n    this.state = {date:  today.toISOString().substr(0,10), \r\n                  course: \"\",\r\n                  type: \"practice\",\r\n                  holes: \"18\",\r\n                  strokes: 80,\r\n                  minutes: 50,\r\n                  seconds: \"00\",\r\n                  notes: \"\",\r\n                  faIcon: \"fa fa-save\",\r\n                  btnLabel: \"Save Round Data\"}\r\n  } else {\r\n    //if editing an existing round, the starting state is the round's\r\n    //current data\r\n    let thisRound = {...this.props.startData};\r\n    delete thisRound.id;\r\n    thisRound.faIcon = \"fa fa-edit\";\r\n    thisRound.btnLabel = \"Update Round Data\";\r\n    this.state = thisRound;\r\n  }\r\n}\r\n  \r\n  \r\n    handleChange = (event) => {\r\n        const name = event.target.name;\r\n        if (name === \"seconds\") {\r\n          let newSec = (event.target.value.length < 2 ? \"0\" + \r\n            event.target.value : event.target.value);\r\n          let newSGS = this.computeSGS(this.state.strokes, this.state.minutes, \r\n                                       newSec);\r\n          this.setState({seconds: newSec, SGS: newSGS});\r\n        } else if (name === \"strokes\") {\r\n          let newStrokes = event.target.value;\r\n          let newSGS = this.computeSGS(newStrokes, this.state.minutes, \r\n            this.state.seconds);\r\n          this.setState({strokes: newStrokes, SGS: newSGS});\r\n        } else if (name === \"minutes\") {\r\n            let newMin = event.target.value;\r\n            let newSGS = this.computeSGS(this.state.strokes, newMin, \r\n              this.state.seconds);\r\n            this.setState({minutes: newMin, SGS: newSGS});\r\n        } else {\r\n          this.setState({[name]: event.target.value});\r\n        }\r\n    }\r\n  \r\n  \r\n    //handleSubmit -- When the user clicks on the button to save/update the\r\n    //round, start the spinner and invoke the parent component's saveRound\r\n    //method to do the actual work. Note that saveRound is set to the correct\r\n    //parent method based on whether the user is logging a new round or editing\r\n    //an existing round.\r\n    handleSubmit = (event) => {\r\n        //start spinner\r\n        this.setState({faIcon: \"fa fa-spin fa-spinner\",\r\n                        btnLabel: (this.props.mode === AppMode.ROUNDS_LOGROUND ? \r\n                                    \"Saving...\" : \"Updating...\")});\r\n        //Prepare current round data to be saved\r\n        let roundData = this.state;\r\n        delete roundData.faIcon;\r\n        delete roundData.btnLabel;\r\n        //call saveRound on 1 second delay to show spinning icon\r\n        setTimeout(this.props.saveRound,1000,roundData); \r\n        event.preventDefault(); \r\n        }\r\n  \r\n\r\n    computeSGS = (strokes, min, sec) => {\r\n      return (Number(strokes) + Number(min)) \r\n                  + \":\" + sec;\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <form className=\"padded-page\" onSubmit={this.handleSubmit}>\r\n          <center>\r\n            <label>\r\n              Date:\r\n              <input name=\"date\" className=\"form-control form-center\" \r\n                type=\"date\" value={this.state.date} onChange={this.handleChange} />\r\n            </label>\r\n            <p></p>\r\n            <label>\r\n              Course:\r\n              <input name=\"course\" className=\"form-control form-center\" type=\"text\"\r\n                value={this.state.course} onChange={this.handleChange}\r\n                placeholder=\"Course played\" size=\"50\" maxLength=\"50\" />\r\n            </label>\r\n          <p></p>\r\n          <label>Type:\r\n          <select name=\"type\" value={this.state.type} \r\n            className=\"form-control form-center\" onChange={this.handleChange}>\r\n            <option value=\"practice\">Practice</option>\r\n            <option value=\"tournament\">Tournament</option>\r\n          </select> \r\n          </label>\r\n          <p></p>\r\n          <label># Holes:\r\n          <select name=\"holes\" value={this.state.holes} \r\n            className=\"form-control form-center\" onChange={this.handleChange}>\r\n            <option value=\"9\">9</option>\r\n            <option value=\"18\">18</option>\r\n          </select> \r\n          </label>\r\n          <p></p>\r\n          <label># Strokes:\r\n          <input name=\"strokes\" className=\"form-control form-center\" type=\"number\" \r\n            min=\"9\" max=\"200\" value={this.state.strokes} \r\n            onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <label>Time: <br></br>\r\n          <input name=\"minutes\" type=\"number\" size=\"3\"\r\n            min=\"10\" max=\"400\" value={this.state.minutes}\r\n            onChange={this.handleChange} />:  \r\n          <input name=\"seconds\" type=\"number\" size=\"2\"\r\n            min=\"0\" max=\"60\" value={this.state.seconds} \r\n            onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <label>Speedgolf Score: <br></br>\r\n              <input name=\"SGS\" className=\"form-center\" type=\"text\" size=\"6\" \r\n                disabled={true} value={this.computeSGS(this.state.strokes,this.state.minutes,this.state.seconds)} />\r\n          </label>\r\n          <p></p>\r\n          <label>Notes:\r\n              <textarea name=\"notes\" className=\"form-control\" rows=\"6\" cols=\"75\" \r\n                placeholder=\"Enter round notes\" value={this.state.notes} \r\n                onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <p></p>\r\n          <button type=\"submit\" style={{width: \"70%\",fontSize: \"36px\"}} \r\n            className=\"btn btn-primary btn-color-theme\">\r\n              <span className={this.state.faIcon}/>&nbsp;{this.state.btnLabel}\r\n          </button>\r\n          </center>\r\n        </form>\r\n      );\r\n    }\r\n}\r\n\r\nexport default RoundForm;","import React from 'react';\r\n\r\nclass FloatingButton extends React.Component {\r\n    render() {\r\n      return(\r\n        <div className=\"floatbtn\" onClick={this.props.handleClick}>\r\n          <span className=\"floatbtn-icon fa fa-plus\"></span>\r\n        </div>  \r\n      );\r\n    }\r\n}\r\n\r\nexport default FloatingButton;\r\n","//Rounds -- A parent component for the app's \"rounds\" mode.\r\n//Manages the rounds data for the current user and conditionally renders the\r\n//appropriate rounds mode page based on App's mode, which is passed in as a prop.\r\n\r\nimport React from 'react';\r\nimport AppMode from './../AppMode.js';\r\nimport RoundsTable from './RoundsTable.js';\r\nimport RoundForm from './RoundForm.js';\r\nimport FloatingButton from './FloatingButton.js';\r\n\r\nclass Rounds extends React.Component {\r\n\r\n    //Initialize a Rounds object based on local storage\r\n    constructor() {\r\n        super();\r\n        this.deleteId = \"\";\r\n        this.editId = \"\";\r\n        this.state = {errorMsg: \"\"};           \r\n    }\r\n\r\n    //addRound -- Given an object newData containing a new round, use the \r\n    //server POST route to add the new round to the database. If the add is\r\n    //successful, call on the refreshOnUpdate() method to force the parent\r\n    //App component to refresh its state from the database and re-render itself,\r\n    //allowing the change to be propagated to the Rounds table. Then switch\r\n    //the mode back to AppMode.ROUNDS since the user is done adding a round.\r\n    addRound = async (newData) => {\r\n        const url = '/rounds/' + this.props.userObj.id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'POST',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.setState({errorMsg: \"\"});\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n\r\n    //editRound -- Given an object newData containing updated data on an\r\n    //existing round, update the current user's round in the database. \r\n    //toggle the mode back to AppMode.ROUNDS since the user is done editing the\r\n    //round. \r\n    editRound = async (newData) => {\r\n        const url = '/rounds/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.rounds[this.editId]._id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'PUT',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n\r\n\r\n    //deleteRound -- Delete the current user's round uniquely identified by\r\n    //this.state.deleteId, delete from the database, and reset deleteId to empty.\r\n    deleteRound = async () => {\r\n        const url = '/rounds/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.rounds[this.deleteId]._id;\r\n        const res = await fetch(url, {method: 'DELETE'}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: \"An error occurred when attempting to delete round from database: \" \r\n            + msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }  \r\n    }\r\n \r\n    //setDeleteId -- Capture in this.state.deleteId the unique id of the item\r\n    //the user is considering deleting.\r\n    setDeleteId = (val) => {\r\n        this.deleteId = val;\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n\r\n    //setEditId -- Capture in this.state.editId the unique id of the item\r\n    //the user is considering editing.\r\n    setEditId = (val) => {\r\n        this.editId = val;\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n\r\n    closeErrorMsg = () => {\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n    \r\n    //render -- Conditionally render the Rounds mode page as either the rounds\r\n    //table, the rounds form set to obtain a new round, or the rounds form set\r\n    //to edit an existing round.\r\n    render() {\r\n        switch(this.props.mode) {\r\n            case AppMode.ROUNDS:\r\n                return (\r\n                    <>\r\n                    {this.state.errorMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.errorMsg}</span>\r\n                       <button className=\"modal-close\" onClick={this.closeErrorMsg}>\r\n                          <span className=\"fa fa-times\"></span>\r\n                        </button></div>: null}\r\n                    <RoundsTable \r\n                        rounds={this.props.userObj.rounds}\r\n                        setEditId={this.setEditId}\r\n                        setDeleteId={this.setDeleteId}\r\n                        deleteRound={this.deleteRound}\r\n                        changeMode={this.props.changeMode}\r\n                        menuOpen={this.props.menuOpen} /> \r\n                    <FloatingButton\r\n                        handleClick={() => \r\n                        this.props.changeMode(AppMode.ROUNDS_LOGROUND)}\r\n                        menuOpen={this.props.menuOpen}\r\n                        icon={\"fa fa-plus\"} />\r\n                    </>\r\n                );\r\n            case AppMode.ROUNDS_LOGROUND:\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={\"\"} \r\n                        saveRound={this.addRound} />\r\n                );\r\n            case AppMode.ROUNDS_EDITROUND:\r\n                let thisRound = {...this.props.userObj.rounds[this.editId]};\r\n                thisRound.date = thisRound.date.substr(0,10);\r\n                if (thisRound.seconds < 10) {\r\n                    thisRound.seconds = \"0\" + thisRound.seconds;\r\n                } \r\n                delete thisRound.SGS;\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={thisRound} \r\n                        saveRound={this.editRound} />\r\n                );\r\n        }\r\n    }\r\n\r\n}   \r\n\r\nexport default Rounds;\r\n","import React from 'react';\r\nimport { Navbar, Container, Row, Col, Card, Button } from \"react-bootstrap\";\r\n\r\nclass AllCourses extends React.Component {\r\n\r\n    constructor(){\r\n        super();\r\n    \r\n        this.state={\r\n            getCourseClicked: false\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getCourse();\r\n    }\r\n    \r\n    toggleGetCourseClicked = () => {\r\n        this.setState(state => ({getCourseClicked: !state.getCourseClicked}));\r\n    }\r\n    getCourse = async () => {\r\n        const url = '/allcourses/';\r\n        fetch(url)\r\n        .then((response) => {\r\n            if (response.status == 200)\r\n                return response.json();\r\n            else\r\n            {\r\n                this.setErrorMsg(\"ERROR: \" + response.statusText);\r\n                throw Error(response.statusText);\r\n            }\r\n        })\r\n        .then((obj) => \r\n        {\r\n            console.log(\"GET SUCCESS!\");\r\n            let thisCourse = JSON.parse(obj);\r\n\r\n            this.setState({\r\n                course: thisCourse.map((c) =>(\r\n                    <Col  style={{marginTop: \"20px\", marginBottom: \"50px\"}}>\r\n                        <Card key={c.id} style={{ width: \"30rem\", display: \"flex\" }}>\r\n                        <Card.Img className=\"course-image\" variant=\"top\" src={c.picture}></Card.Img>\r\n                        <Card.Body>\r\n                            <Card.Title>Location: {c.location}</Card.Title>\r\n                            <Card.Text>Review: {c.review}</Card.Text>\r\n                        </Card.Body>\r\n                        <Card.Footer>Rating: {c.rating}</Card.Footer>\r\n                        </Card>\r\n                    </Col>\r\n                ))\r\n            });\r\n\r\n            // this.renderCourses(thisCourse);\r\n            console.log(thisCourse);\r\n        }).catch((error) =>{\r\n            console.log(\"GET ERROR!\");\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n              <h1></h1>\r\n              <table >\r\n                <tbody>\r\n                <Container fluid={true}>\r\n                    <Row noGutters>                    \r\n                        {this.state.course}\r\n                    </Row>\r\n                </Container> \r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            );\r\n    }   \r\n}\r\n\r\nexport default AllCourses;","import React from 'react';\r\n\r\nclass NearbyCourses extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"padded-page\">\r\n                <center>\r\n                <h1 >Nearby Courses</h1>\r\n                <h2>This page is under construction.</h2>\r\n                <img src=\"https://dl.dropboxusercontent.com/s/qpjhy9x9gwdxpob/SpeedScoreLogo64Trans.png\" \r\n                 height=\"200\" width=\"200\"/>\r\n                <p style={{fontStyle: \"italic\"}}>Version CptS 489 React Demo</p>\r\n                </center>\r\n            </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default NearbyCourses;","import React from 'react';\r\n\r\nclass RatesModal extends React.Component {\r\n\r\nrender() {\r\n    return (\r\n        <div className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-dialog modal-lg\">\r\n            <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n                <h3>About SpeedScore</h3>\r\n                <button className=\"modal-close\" onClick={this.props.handleClose}>\r\n                    &times;\r\n                </button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n                <img\r\n                src=\"https://dl.dropboxusercontent.com/s/awuwr1vpuw1lkyl/SpeedScore4SplashLogo.png\"\r\n                height=\"200\" width=\"200\"/>\r\n                <h3>The World's First and Only Suite of Apps for\r\n                Speedgolf</h3>\r\n                <p>Version CptS 489 Fa20 Complete (MERN)<br/>\r\n                &copy; 2017-20 The Professor of Speedgolf. All rights\r\n                reserved.\r\n                </p>\r\n                <div style={{textAlign: \"left\"}}>\r\n                <p>SpeedScore apps support</p>\r\n                <ul>\r\n                <li>live touranment scoring (<i>SpeedScore Live&reg;</i>)</li>\r\n                <li>tracking personal speedgolf rounds and sharing results\r\n                (<i>SpeedScore Track&reg;</i>)</li>\r\n                <li>finding speedgolf-friendly courses, booking tee times, and\r\n                paying to play speedgolf by the minute (<i>SpeedScore\r\n                Play&reg;</i>)</li>\r\n                </ul>\r\n                <p>SpeedScore was first developed by Dr. Chris Hundhausen,\r\n                associate professor of computer science at Washington State\r\n                University and the <i>Professor of Speedgolf</i>, with support\r\n                from Scott Dawley, CEO of Speedgolf USA, LLC.</p>\r\n                <p>For more information on SpeedScore, visit <a\r\n                href=\"http://speedscore.live\" target=\"_blank\">SpeedScore's web\r\n                site</a>. For more information on speedgolf, visit <a\r\n                href=\"http://playspeedgolf.com\"\r\n                target=\"_blank\">playspeedgolf.com</a> and <a\r\n                href=\"http://usaspeedgolf.com\" target=\"_blank\">Speedgolf\r\n                USA</a>.</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                <button className=\"btn btn-primary btn-color-theme\"\r\n                onClick={this.props.handleClose}>OK</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default RatesModal;","import React from 'react';\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport { Navbar, Container, Row, Col, Card, Button, Modal } from \"react-bootstrap\";\r\nimport FloatingButton from \"./FloatingButton.js\";\r\nimport RatesModal from \"./RatesModal.js\";\r\n\r\nclass SpecificCourses extends React.Component {\r\n\r\n    constructor(){\r\n        super();\r\n\r\n        this.state={\r\n            addCourseClicked: false,\r\n            getCourseClicked: false,\r\n            searchCourseClicked: false,\r\n            searchStart: false,\r\n            getRatesButtonClicked: false,\r\n            selectButtonValue: \"Select Course\",\r\n            query: \"\",\r\n            data: [],\r\n            filteredData: [],\r\n            id: \"\",\r\n            rating: \"\",\r\n            review: \"\",\r\n            picture: \"\",\r\n            location: \"\",\r\n            yardage: \"\",\r\n            runningDistance: \"\",\r\n            timePar: \"\",\r\n            bestScore: \"\",\r\n            recordHolder: \"\"\r\n        };\r\n    }\r\n\r\n    setGetRatesTrue = () => {\r\n        this.setState({getRatesButtonClicked : true});\r\n    }\r\n\r\n    setSelectButtonValue = (newVal) => {\r\n        this.setState({selectButtonValue : newVal});\r\n    }\r\n\r\n    setSearchTrue = () => {\r\n        this.setState({searchStart : true});\r\n    }\r\n\r\n    setSearchFalse = () => {\r\n        this.setState({searchStart : false});\r\n    }\r\n\r\n    setSearchCourseClickedTrue = () => {\r\n        this.setState({searchCourseClicked : true});\r\n        this.setSelectButtonValue(\"Clear Selected\");\r\n    }\r\n\r\n    setSearchCourseClickedFalse = () => {\r\n        this.setState({searchCourseClicked : false});\r\n        this.setSelectButtonValue(\"Select Course\");\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.getCourse();\r\n    }\r\n\r\n    handleInputChange = event => {\r\n        const query = event.target.value;\r\n        this.setState(prevState => {\r\n          const filteredData = prevState.data.filter(element => {\r\n            return element.id.toLowerCase().includes(query.toLowerCase());\r\n          });\r\n\r\n          if (query == \"\")\r\n          {\r\n              this.setSearchFalse();\r\n              this.setSelectButtonValue(\"Select Course\");\r\n          }\r\n          else\r\n          {\r\n              this.setSearchTrue();\r\n              this.setSelectButtonValue(\"Select All \"+ filteredData.length +\" Matching Courses\");\r\n          }\r\n\r\n          return {\r\n            query,\r\n            filteredData\r\n          };\r\n        });\r\n\r\n    };\r\n\r\n    getCourse = async () => {\r\n        const url = '/allcourses/';\r\n        fetch(url)\r\n        .then((response) => {\r\n            if (response.status == 200)\r\n                return response.json();\r\n            else\r\n            {\r\n                this.setErrorMsg(\"ERROR: \" + response.statusText);\r\n                throw Error(response.statusText);\r\n            }\r\n        })\r\n        .then((obj) => \r\n        {\r\n            console.log(\"GET ALL COURSES SUCCESS!\");\r\n            let data = JSON.parse(obj);\r\n            const { query } = this.state;\r\n            const filteredData = data.filter(element => {\r\n              return element.id.toLowerCase().includes(query.toLowerCase());\r\n            });\r\n    \r\n            this.setState({\r\n              data,\r\n              filteredData\r\n            });\r\n        }).catch((error) =>{\r\n            console.log(\"GET ERROR!\");\r\n        });\r\n    }\r\n\r\n    getSearchedCourse = async (id) => {\r\n        this.setSearchCourseClickedTrue();\r\n        this.setSearchFalse();\r\n        const url = '/courses/'+id;\r\n        fetch(url)\r\n        .then((response) => {\r\n            if (response.status == 200)\r\n                return response.json();\r\n            else\r\n            {\r\n                this.setErrorMsg(\"ERROR: \" + response.statusText);\r\n                throw Error(response.statusText);\r\n            }\r\n        })\r\n        .then((obj) => \r\n        {\r\n            console.log(\"GET SEARCH COURSES SUCCESS!\");\r\n            let thisCourse = JSON.parse(obj);\r\n            this.setState({\r\n                course: (\r\n                    <Col  style={{marginTop: \"20px\", marginBottom: \"50px\"}}>\r\n                        <Card key={thisCourse.id} style={{ width: \"30rem\", display: \"flex\" }}>\r\n                        <Card.Img className=\"course-image\" variant=\"top\" src={thisCourse.picture}></Card.Img>\r\n                        <Card.Body>\r\n                            <Card.Title>Location: {thisCourse.location}</Card.Title>\r\n                            <Card.Text>Review: {thisCourse.review}</Card.Text>\r\n                            <Button onClick={this.toggleGetRatesClicked}>Get Rates</Button>\r\n                        </Card.Body>\r\n                        <Card.Footer>Rating: {thisCourse.rating}</Card.Footer>\r\n                        </Card>\r\n                    </Col>\r\n                )\r\n            });\r\n        }).catch((error) =>{\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    toggleAddCourseClicked = () => {\r\n        this.setState(state => ({addCourseClicked: !state.addCourseClicked}));\r\n    }\r\n\r\n    toggleGetCourseClicked = () => {\r\n        this.setState(state => ({getCourseClicked: !state.getCourseClicked}));\r\n    }\r\n\r\n    toggleGetRatesClicked = () => {\r\n        this.setState(state => ({getRatesButtonClicked: !state.getRatesButtonClicked}));\r\n    }\r\nf\r\n    addCourse = async (newData) => {\r\n        console.log(newData);\r\n        const url = '/courses/' + this.state.id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'POST',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status == 200) {\r\n            console.log(\"SUCCESS\");\r\n            console.log(msg);\r\n            // this.setState({errorMsg: msg});\r\n            // this.props.changeMode(AppMode.COURSE);\r\n        } else {\r\n            console.log(\"FAILURE\");\r\n            console.log(msg);\r\n            // this.setState({errorMsg: \"\"});\r\n            // this.props.refreshOnUpdate(AppMode.COURSE);\r\n        }\r\n    }\r\n\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        let courseData = {\r\n            id: this.state.id,\r\n            rating: this.state.rating,\r\n            review: this.state.review,\r\n            picture: this.state.picture,\r\n            location: this.state.location,\r\n            yardage: this.state.yardage,\r\n            runningDistance: this.state.runningDistance,\r\n            timePar: this.state.timePar,\r\n            bestScore: this.state.bestScore,\r\n            recordHolder: this.state.recordHolder\r\n        };\r\n        this.addCourse(courseData);\r\n\r\n    }\r\n\r\n    handleClick = (event) =>{\r\n        event.preventDefault();\r\n\r\n        if (this.state.selectButtonValue == \"Select Course\")\r\n        {\r\n\r\n        }\r\n        else if (this.state.selectButtonValue == \"Clear Selected\")\r\n        {\r\n            this.setSearchCourseClickedFalse();\r\n            this.setSearchFalse();\r\n            this.setState({query: \"\"});\r\n        }\r\n        else{\r\n            this.setSearchCourseClickedTrue();\r\n            this.setSearchFalse();\r\n            this.setState({\r\n                course: this.state.filteredData.map((c) =>(\r\n                    <Col  style={{marginTop: \"20px\", marginBottom: \"50px\"}}>\r\n                        <Card key={c.id} style={{ width: \"30rem\", display: \"flex\" }}>\r\n                        <Card.Img className=\"course-image\" variant=\"top\" src={c.picture}></Card.Img>\r\n                        <Card.Body>\r\n                            <Card.Title>Location: {c.location}</Card.Title>\r\n                            <Card.Text>Review: {c.review}</Card.Text>\r\n                            <Button onClick={this.toggleGetRatesClicked}>Get Rates</Button>\r\n                        </Card.Body>\r\n                        <Card.Footer>Rating: {c.rating}</Card.Footer>\r\n                        </Card>\r\n                    </Col>\r\n                ))\r\n            });\r\n        }\r\n    }\r\n\r\n    handleChange = (event) =>{\r\n        this.setState({[event.target.name]: event.target.value});\r\n    }\r\n\r\n    getRates = () => {\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div style={{display: 'flex'}}>\r\n                    <h3>Find Speedgolf-Friendly Courses:&nbsp;</h3>\r\n                    <h3>\r\n                        <a data-tip=\"React-tooltip\">&#9432;</a>\r\n                        <ReactTooltip effect=\"solid\">\r\n                            <span>\r\n                                Enter search term or course name to see matching courses, or enter a space to see ALL courses in the database.\r\n                                Click on course in the list to select it, or click on 'Select' button to select all matching courses.\r\n                            </span>\r\n                        </ReactTooltip>\r\n                    </h3>\r\n                </div>\r\n\r\n                <input style={{width: '60%'}} placeholder=\"Enter course name or search term\"\r\n                 value={this.state.query} onChange={this.handleInputChange}\r\n                 disabled={this.state.searchCourseClicked ? true:false}></input>\r\n                <button onClick={this.handleClick}>{this.state.selectButtonValue}</button>\r\n                {/* <button onClick={this.toggleAddCourseClicked}>Add Course</button> */}\r\n                {this.state.searchStart ? <div>{this.state.filteredData.map(i => <a className=\"course-search-list\" onClick={() => this.getSearchedCourse(i.id)}>{i.id}</a>)}</div> : null}\r\n                {this.state.searchCourseClicked ? <div style={{marginTop: \"50px\"}}><h3>1 Course Selected: </h3>\r\n                <Container fluid={true}>\r\n                    <Row noGutters>  \r\n                        {this.state.course}\r\n                    </Row>\r\n                </Container>  </div>               \r\n                 : null}\r\n\r\n                {/* {this.state.addCourseClicked ? \r\n                <form onSubmit={this.handleSubmit}>\r\n                    <h3>Add Course</h3>\r\n                    <input name=\"id\" placeholder=\"id\" value={this.state.id} onChange={this.handleChange}></input>\r\n                    <input name=\"rating\" placeholder=\"rating\" value={this.state.rating} onChange={this.handleChange}></input>\r\n                    <input name=\"review\"  placeholder=\"review\" value={this.state.review} onChange={this.handleChange}></input>\r\n                    <input name=\"picture\"  placeholder=\"picture\" value={this.state.picture} onChange={this.handleChange}></input>\r\n                    <input name=\"location\"  placeholder=\"location\" value={this.state.location} onChange={this.handleChange}></input>\r\n                    <input name=\"yardage\"  placeholder=\"yardage\" value={this.state.yardage} onChange={this.handleChange}></input>\r\n                    <input name=\"runningDistance\"  placeholder=\"runningDistance\" value={this.state.runningDistance} onChange={this.handleChange}></input>\r\n                    <input name=\"timePar\"  placeholder=\"timePar\" value={this.state.timePar} onChange={this.handleChange}></input>\r\n                    <input name=\"bestScore\"  placeholder=\"bestScore\" value={this.state.bestScore} onChange={this.handleChange}></input>\r\n                    <input name=\"recordHolder\"  placeholder=\"recordHolder\" value={this.state.recordHolder} onChange={this.handleChange}></input>\r\n                    <button>Submit</button>\r\n                </form>\r\n                : null} */}\r\n\r\n                {/* <FloatingButton handleClick={this.toggleGetRatesClicked}/> */}\r\n                {this.state.getRatesButtonClicked ? \r\n                <RatesModal handleClose={this.toggleGetRatesClicked} />\r\n                : null}\r\n            </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default SpecificCourses;","import React from 'react';\r\nimport AppMode from '../AppMode';\r\nimport AllCourses from './AllCourses.js';\r\nimport NearbyCourses from './NearbyCourses.js';\r\nimport SpecificCourses from './SpecificCourses.js';\r\n\r\nclass CoursesPage extends React.Component {\r\n\r\n    render() {\r\n        switch(this.props.mode){\r\n            case AppMode.COURSES:\r\n                return (<SpecificCourses userObj={this.props.userObj} />);\r\n            case AppMode.COURSES_NEARBY:\r\n                return (<NearbyCourses />);\r\n            case AppMode.COURSES_ALL:\r\n                return (<AllCourses />);\r\n        }\r\n    }   \r\n}\r\n\r\nexport default CoursesPage;","import React from 'react';\r\n\r\nclass AboutBox extends React.Component {\r\n\r\nrender() {\r\n    return (\r\n        <div className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-dialog modal-lg\">\r\n            <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n                <h3>About SpeedScore</h3>\r\n                <button className=\"modal-close\" onClick={this.props.close}>\r\n                    &times;\r\n                </button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n                <img\r\n                src=\"https://dl.dropboxusercontent.com/s/awuwr1vpuw1lkyl/SpeedScore4SplashLogo.png\"\r\n                height=\"200\" width=\"200\"/>\r\n                <h3>The World's First and Only Suite of Apps for\r\n                Speedgolf</h3>\r\n                <p>Version CptS 489 Fa20 Complete (MERN)<br/>\r\n                &copy; 2017-20 The Professor of Speedgolf. All rights\r\n                reserved.\r\n                </p>\r\n                <div style={{textAlign: \"left\"}}>\r\n                <p>SpeedScore apps support</p>\r\n                <ul>\r\n                <li>live touranment scoring (<i>SpeedScore Live&reg;</i>)</li>\r\n                <li>tracking personal speedgolf rounds and sharing results\r\n                (<i>SpeedScore Track&reg;</i>)</li>\r\n                <li>finding speedgolf-friendly courses, booking tee times, and\r\n                paying to play speedgolf by the minute (<i>SpeedScore\r\n                Play&reg;</i>)</li>\r\n                </ul>\r\n                <p>SpeedScore was first developed by Dr. Chris Hundhausen,\r\n                associate professor of computer science at Washington State\r\n                University and the <i>Professor of Speedgolf</i>, with support\r\n                from Scott Dawley, CEO of Speedgolf USA, LLC.</p>\r\n                <p>For more information on SpeedScore, visit <a\r\n                href=\"http://speedscore.live\" target=\"_blank\">SpeedScore's web\r\n                site</a>. For more information on speedgolf, visit <a\r\n                href=\"http://playspeedgolf.com\"\r\n                target=\"_blank\">playspeedgolf.com</a> and <a\r\n                href=\"http://usaspeedgolf.com\" target=\"_blank\">Speedgolf\r\n                USA</a>.</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                <button className=\"btn btn-primary btn-color-theme\"\r\n                onClick={this.props.close}>OK</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default AboutBox;","import React from 'react';\r\nimport NavBar from './NavBar.js';\r\nimport SideMenu from './SideMenu.js';\r\nimport ModeBar from './ModeBar.js';\r\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js'\r\nimport LoginPage from './LoginPage.js';\r\nimport AppMode from \"./../AppMode.js\"\r\nimport FeedPage from './FeedPage.js';\r\nimport Rounds from './Rounds.js';\r\nimport CoursesPage from './CoursesPage.js';\r\nimport AboutBox from './AboutBox.js';\r\n\r\nconst modeTitle = {};\r\nmodeTitle[AppMode.LOGIN] = \"Welcome to SpeedScore\";\r\nmodeTitle[AppMode.FEED] = \"Activity Feed\";\r\nmodeTitle[AppMode.ROUNDS] = \"My Rounds\";\r\nmodeTitle[AppMode.ROUNDS_LOGROUND] = \"Log New Round\";\r\nmodeTitle[AppMode.ROUNDS_EDITROUND] = \"Edit Round\";\r\nmodeTitle[AppMode.COURSES] = \"Search Courses\";\r\nmodeTitle[AppMode.COURSES_NEARBY] = \"Nearby Courses\";\r\nmodeTitle[AppMode.COURSES_ALL] = \"All Speedgolf-Friendly Courses\";\r\n\r\nconst modeToPage = {};\r\nmodeToPage[AppMode.LOGIN] = LoginPage;\r\nmodeToPage[AppMode.FEED] = FeedPage;\r\nmodeToPage[AppMode.ROUNDS] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_LOGROUND] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_EDITROUND] = Rounds;\r\nmodeToPage[AppMode.COURSES] = CoursesPage;\r\nmodeToPage[AppMode.COURSES_NEARBY] = CoursesPage;\r\nmodeToPage[AppMode.COURSES_ALL] = CoursesPage;\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {mode: AppMode.LOGIN,\r\n                  menuOpen: false,\r\n                  authenticated: false,\r\n                  userObj: {displayName: \"\", profilePicURL: \"\"},\r\n                  editAccount: false,\r\n                  showEditAccountDialog: false,\r\n                  statusMsg: \"\",\r\n                  showAboutDialog: false\r\n                 };\r\n  }\r\n\r\n  //componentDidMount\r\n  componentDidMount() {\r\n    if (!this.state.authenticated) { \r\n      //Use /auth/test route to (re)-test authentication and obtain user data\r\n      fetch(\"/auth/test\")\r\n        .then((response) => response.json())\r\n        .then((obj) => {\r\n          if (obj.isAuthenticated) {\r\n            this.setState({\r\n              userObj: obj.user,\r\n              authenticated: true,\r\n              mode: AppMode.FEED //We're authenticated so can get into the app.\r\n            });\r\n          }\r\n        }\r\n      )\r\n    } \r\n  }\r\n\r\n  //refreshOnUpdate(newMode) -- Called by child components when user data changes in \r\n  //the database. The function calls the users/:userid (GET) route to update \r\n  //the userObj state var based on the latest database changes, and sets the \r\n  //mode state var is set to newMode. After this method is called, the\r\n  //App will re-render itself, forcing the new data to \r\n  //propagate to the child components when they are re-rendered.\r\n  refreshOnUpdate = async(newMode) => {\r\n    let response = await fetch(\"/users/\" + this.state.userObj.id);\r\n    response = await response.json();\r\n    const obj = JSON.parse(response);\r\n    this.setState({\r\n      userObj: obj,\r\n      mode: newMode\r\n    });\r\n  }\r\n\r\n\r\n  handleChangeMode = (newMode) => {\r\n    this.setState({mode: newMode});\r\n  }\r\n\r\n  openMenu = () => {\r\n    this.setState({menuOpen : true});\r\n  }\r\n  \r\n  closeMenu = () => {\r\n    this.setState({menuOpen : false});\r\n  }\r\n\r\n  toggleMenuOpen = () => {\r\n    this.setState(prevState => ({menuOpen: !prevState.menuOpen}));\r\n  }\r\n\r\n  setUserId = (Id) => {\r\n    this.setState({userId: Id,\r\n                   authenticated: true});\r\n  }\r\n\r\n  showEditAccount = () => {\r\n    this.setState({showEditAccountDialog: true});\r\n\r\n  }\r\n\r\n  cancelEditAccount = () => {\r\n    this.setState({showEditAccountDialog: false});\r\n  }\r\n\r\n  //editAccountDone -- called after successful edit or\r\n  //deletion of user account. msg contains the status\r\n  //message and deleted indicates whether an account was\r\n  //edited (deleted == false) or deleted (deleted == true)\r\n  editAccountDone = (msg, deleted) => {\r\n    if (deleted) {\r\n      this.setState({showEditAccountDialog: false,\r\n                     statusMsg: msg,\r\n                     mode: AppMode.LOGIN});\r\n      } else {\r\n        this.setState({showEditAccountDialog: false,\r\n          statusMsg: msg});\r\n      }\r\n  }\r\n\r\n  closeStatusMsg = () => {\r\n    this.setState({statusMsg: \"\"});\r\n  }\r\n\r\n  render() {\r\n    const ModePage = modeToPage[this.state.mode];\r\n    return (\r\n      <div className=\"padded-page\">\r\n        {this.state.showAboutDialog ? \r\n          <AboutBox close={() => this.setState({showAboutDialog: false})}/> : null}\r\n        {this.state.statusMsg != \"\" ? <div className=\"status-msg\">\r\n              <span>{this.state.statusMsg}</span>\r\n              <button className=\"modal-close\" onClick={this.closeStatusMsg}>\r\n                  <span className=\"fa fa-times\"></span></button></div> : null}\r\n        {this.state.showEditAccountDialog ? \r\n            <CreateEditAccountDialog \r\n              create={false} \r\n              userId={this.state.userObj.id} \r\n              done={this.editAccountDone} \r\n              cancel={this.cancelEditAccount}/> : null}\r\n        <NavBar \r\n          aboutOpen={this.state.showAboutDialog}\r\n          title={modeTitle[this.state.mode]} \r\n          mode={this.state.mode}\r\n          changeMode={this.handleChangeMode}\r\n          menuOpen={this.state.menuOpen}\r\n          toggleMenuOpen={this.toggleMenuOpen}/>\r\n          <SideMenu \r\n            changeMode={this.handleChangeMode}\r\n            menuOpen = {this.state.menuOpen}\r\n            mode={this.state.mode}\r\n            toggleMenuOpen={this.toggleMenuOpen}\r\n            displayName={this.state.userObj.displayName}\r\n            profilePicURL={this.state.userObj.profilePicURL}\r\n            localAccount={this.state.userObj.authStrategy === \"local\"}\r\n            editAccount={this.showEditAccount}\r\n            logOut={() => this.handleChangeMode(AppMode.LOGIN)}\r\n            showAbout={() => {this.setState({showAboutDialog: true})}}/>\r\n          <ModeBar \r\n            aboutOpen={this.state.showAboutDialog}\r\n            mode={this.state.mode} \r\n            changeMode={this.handleChangeMode}\r\n            menuOpen={this.state.menuOpen}/>\r\n          <ModePage \r\n            menuOpen={this.state.menuOpen}\r\n            mode={this.state.mode}\r\n            changeMode={this.handleChangeMode}\r\n            userObj={this.state.userObj}\r\n            refreshOnUpdate={this.refreshOnUpdate}/>\r\n      </div>\r\n    );  \r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap-social/bootstrap-social.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport './styles/index.css';\r\nimport App from './components/App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}