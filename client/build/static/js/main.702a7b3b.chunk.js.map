{"version":3,"sources":["AppMode.js","components/NavBar.js","components/CourseRates.js","components/SideMenu.js","components/ModeBar.js","components/ConfirmDeleteAccount.js","components/CreateEditAccountDialog.js","components/ResetPasswordDialog.js","components/LookUpAccountDialog.js","components/SecurityQuestionDialog.js","components/LoginPage.js","components/FeedPage.js","components/ConfirmDeleteRound.js","components/RoundsTable.js","components/RoundForm.js","components/FloatingButton.js","components/Rounds.js","components/CourseHome.js","components/CoursesPage.js","components/AboutBox.js","components/App.js","serviceWorker.js","index.js"],"names":["AppMode","LOGIN","FEED","ROUNDS","ROUNDS_LOGROUND","ROUNDS_EDITROUND","COURSES","COURSES_HOME","COURSE_RATES","Object","freeze","NavBar","getMenuBtnIcon","props","mode","menuOpen","handleMenuBtnClick","changeMode","toggleMenuOpen","className","this","aboutOpen","onClick","id","src","alt","height","width","title","React","Component","CourseRates","handleChange","event","target","name","state","CourseName","CourseRate","role","close","value","onChange","deleteRound","SideMenu","renderModeMenuItems","profilePicURL","displayName","localAccount","editAccount","showAbout","logOut","ModeBar","ConfirmDeleteAccount","match","emailRef","current","email","emailMatches","setState","createRef","focus","type","ref","deleteAccount","disabled","CreateEditAccountDialog","checkDataValidity","password","passwordRepeat","repeatPassRef","setCustomValidity","formUpdated","origAccountInfo","formIsUpdated","length","self","reader","FileReader","readAsDataURL","profilePicRef","files","addEventListener","result","updateField","updateVal","securityQuestion","securityAnswer","setDefaultDisplayName","handleSubmit","a","preventDefault","userData","url","accountName","create","fetch","headers","method","body","JSON","stringify","res","status","done","text","resText","confirmDelete","confirmDeleteAccount","e","newUserRef","userId","json","parse","cancel","onSubmit","autocomplete","size","placeholder","pattern","required","onBlur","accept","profilePic","profilePicDataURL","rows","cols","maxLength","ResetPasswordDialog","resetPasswordRef","resetPasswordRepeatRef","resetPassword","errorMsg","checkForSubmit","code","cancelResetPassword","onKeyUp","LookUpAccountDialog","handleLookUpAccount","response","obj","authStrategy","getSecurityAnswer","ErrMsg","errMsg","SecurityQuestionDialog","securityAnswerRef","answer","getNewPassword","readOnly","question","LoginPage","handleLoginSubmit","loginBtnIcon","loginBtnLabel","emailInputRef","passwordInputRef","window","open","statusMsg","accountCreateDone","msg","showCreateAccountDialog","cancelCreateAccount","resetUserId","resetQ","resetA","showLookUpAccountDialog","showSecurityQuestionDialog","showResetPaswordDialog","handleOAuthLogin","provider","handleOAuthLoginClick","setTimeout","pw","showResetPasswordDialog","deleted","closeStatusMsg","githubIcon","githubLabel","loginMsg","newAccountCreated","htmlFor","style","padding","fontSize","FeedPage","fontStyle","ConfirmDeleteRound","RoundsTable","editRound","setEditId","showConfirmDelete","setDeleteId","renderTable","table","r","push","key","rounds","date","substring","course","Number","strokes","minutes","seconds","keys","colSpan","RoundForm","newSec","newSGS","computeSGS","SGS","newStrokes","newMin","faIcon","btnLabel","roundData","saveRound","min","sec","today","Date","now","getTimezoneOffset","toISOString","substr","holes","notes","thisRound","startData","max","FloatingButton","handleClick","Rounds","addRound","newData","userObj","refreshOnUpdate","editId","_id","deleteId","val","closeErrorMsg","icon","CourseHome","CoursesPage","AboutBox","textAlign","href","modeTitle","modeToPage","App","newMode","handleChangeMode","openMenu","closeMenu","prevState","setUserId","Id","authenticated","showEditAccount","showEditAccountDialog","cancelEditAccount","editAccountDone","showAboutDialog","then","isAuthenticated","user","ModePage","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.702a7b3b.chunk.js","sourcesContent":["/* AppMode: The enumerated type for AppMode. */\r\n\r\nconst AppMode = {\r\n    LOGIN: \"LoginMode\",\r\n    FEED: \"FeedMode\",\r\n    ROUNDS: \"RoundsMode\",\r\n    ROUNDS_LOGROUND: \"RoundsMode-LogRound\",\r\n    ROUNDS_EDITROUND: \"RoundsMode-EditRound\",\r\n    COURSES: \"CoursesMode\", \r\n    COURSES_HOME: \"CoursesMode-CourseHome\", \r\n    COURSE_RATES: \"CoursesMode-CourseRates\"\r\n};\r\n\r\nObject.freeze(AppMode); //This ensures that the object is immutable.\r\n\r\nexport default AppMode;","import React from 'react';\r\nimport AppMode from '../AppMode';\r\n\r\nclass NavBar extends React.Component {\r\n\r\n  getMenuBtnIcon = () => {\r\n      if (this.props.mode === AppMode.ROUNDS_LOGROUND || \r\n          this.props.mode === AppMode.ROUNDS_EDITROUND)\r\n          return \"fa fa-arrow-left\";\r\n      if (this.props.menuOpen)\r\n        return \"fa fa-times\";\r\n      return \"fa fa-bars\";\r\n  }\r\n\r\n  handleMenuBtnClick = () => {\r\n    if (this.props.mode === AppMode.ROUNDS_LOGROUND ||\r\n        this.props.mode === AppMode.ROUNDS_EDITROUND) {\r\n      this.props.changeMode(AppMode.ROUNDS);\r\n    } else if (this.props.mode != AppMode.LOGIN) {\r\n      this.props.toggleMenuOpen();\r\n    }\r\n  }\r\n\r\n    \r\n  render() {\r\n    return (\r\n      <div className={\"navbar\" + (this.props.aboutOpen ? \" ignore-click\":\"\")}>  \r\n    <span className=\"navbar-items\">\r\n      <button className=\"sidemenu-btn\" onClick={this.handleMenuBtnClick}>\r\n        <span id=\"menuBtnIcon\" className={\"sidemenu-btn-icon \" + this.getMenuBtnIcon()}>\r\n        </span>\r\n      </button>\r\n      <img src=\"http://tiny.cc/sslogo\" alt=\"Speed Score Logo\" height=\"38px\"\r\n      width=\"38px\" />\r\n      <span className=\"navbar-title\">\r\n        &nbsp;{this.props.title}\r\n      </span>\r\n    </span>\r\n  </div>\r\n); \r\n}\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\n\r\n//work on getting the actual course name to go with\r\nclass CourseRates extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {CourseName: \"Pasco Airport\",\r\n                      CourseRate: \"$50.00\"\r\n                    };           \r\n    }\r\n    \r\n    handleChange = (event) => {\r\n        const name = event.target.name;\r\n        \r\n    }\r\n    render() {\r\n        return (\r\n            <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n            <div className=\"modal-content\">\r\n                <div className=\"modal-header\">\r\n                <h3>Course Rates</h3>\r\n                <button className=\"modal-close\" onClick={this.props.close}>\r\n                    &times;\r\n                </button>\r\n            </div>\r\n                <center>\r\n                <h1 > Course Rates</h1>\r\n                <h2></h2>\r\n                <label>\r\n              Course Name:\r\n              <input name=\"CourseName\" className=\"form-control form-center\" CourseName=\"text\"\r\n                value={this.state.CourseName} onChange={this.handleChange} />\r\n            </label>\r\n            <label>\r\n              Course Rate Per Hour:\r\n              <input name=\"CourseRate\" className=\"form-control form-center\" \r\n             value={this.state.CourseRate} onChange={this.handleChange} />\r\n            </label>\r\n            <p></p>\r\n                </center>\r\n                <div className=\"modal-footer\">\r\n                      <button className=\"btn btn-danger\" onClick={this.props.deleteRound}>\r\n                      Close</button>\r\n                </div>\r\n            </div>\r\n            </div>\r\n            );\r\n        }\r\n    }\r\n    \r\nexport default CourseRates;","import React from 'react';\r\nimport AppMode from './../AppMode.js'\r\nimport CourseRates from './CourseRates';\r\n\r\nclass SideMenu extends React.Component {\r\n\r\n//renderModeItems -- Renders correct subset of mode menu items based on\r\n//current mode, which is stored in this.prop.mode. Uses switch statement to\r\n//determine mode.\r\nrenderModeMenuItems = () => {\r\n  switch (this.props.mode) {\r\n    case AppMode.FEED:\r\n      return(\r\n        <div>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-users\"></span>&nbsp;Followed Users</a>\r\n        <a className=\"sidemenu-item \">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Feed</a>\r\n        </div>\r\n      );\r\n    break;\r\n    case AppMode.ROUNDS:\r\n      return(\r\n        <div>\r\n          <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Log New Round</a>\r\n          <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Rounds</a>\r\n        </div>\r\n      );\r\n    break;\r\n    case AppMode.COURSES:\r\n    case AppMode.COURSES_HOME:\r\n    case AppMode.COURSE_RATES:\r\n      return(\r\n        <div>\r\n        <a className=\"sidemenu-item\" onClick={() => this.props.changeMode(AppMode.COURSES)}>\r\n            <span className=\"fa fa-search\"></span>&nbsp;Courses</a>\r\n        <a className=\"sidemenu-item\" onClick={() => this.props.changeMode(AppMode.COURSES_HOME)}>\r\n            <span className=\"fa fa-map-marker\"></span>&nbsp;Courses Home</a>\r\n        <a className=\"sidemenu-item\" onClick={() => this.props.changeMode(AppMode.COURSE_RATES)} >\r\n            <span className=\"fa fa-th-list\"></span>&nbsp;Course Rates</a>\r\n        </div>\r\n      );\r\n    default:\r\n        return null;\r\n    }\r\n}\r\n\r\n    render() {\r\n       return (\r\n        <div className={\"sidemenu \" + (this.props.menuOpen ? \"sidemenu-open\" : \"sidemenu-closed\")}\r\n             onClick={this.props.toggleMenuOpen}>\r\n          {/* SIDE MENU TITLE */}\r\n          <div className=\"sidemenu-title\">\r\n            <img src={this.props.profilePicURL} height='60' width='60' />\r\n            <span id=\"userID\" className=\"sidemenu-userID\">&nbsp;{this.props.displayName}</span>\r\n        </div>\r\n          {/* MENU CONTENT */}\r\n          {this.renderModeMenuItems()}\r\n          {/* The following menu items are present regardless of mode */}\r\n          {this.props.localAccount ? \r\n            <a id=\"accountBtn\" className=\"sidemenu-item\" onClick={this.props.editAccount}>\r\n              <span className=\"fa fa-user\"></span>&nbsp;Account</a> : null}\r\n          <a id=\"aboutBtn\" className=\"sidemenu-item\" onClick={this.props.showAbout}>\r\n            <span className=\"fa fa-info-circle\"></span>&nbsp;About</a>\r\n          <a id=\"logOutBtn\" className=\"sidemenu-item\" onClick={this.props.logOut}>\r\n            <span className=\"fa fa-sign-out-alt\"></span>&nbsp;Log Out</a>\r\n            \r\n        </div>\r\n        \r\n       );\r\n    }\r\n}\r\n\r\nexport default SideMenu;\r\n","import React from 'react';\r\nimport AppMode from '../AppMode.js';\r\n\r\n\r\nclass ModeBar extends React.Component {\r\n    render() {\r\n      return(\r\n        <div className={\"modebar\" + (this.props.mode === AppMode.LOGIN ? \r\n          \" invisible\" : (this.props.menuOpen ? \" ignore-click visible\" : \" visible\"))}>\r\n        <a className={(this.props.mode === AppMode.FEED ? \" item-selected\" : null)}\r\n            onClick={()=>this.props.changeMode(AppMode.FEED)}>\r\n          <span className=\"modebaricon fa fa-th-list\"></span>\r\n          <span className=\"modebar-text\">Feed</span>\r\n        </a>\r\n        <a className={(this.props.mode === AppMode.ROUNDS || \r\n               this.props.mode === AppMode.ROUNDS_EDITROUND || \r\n               this.props.mode === AppMode.ROUNDS_LOGROUND ? \r\n                  \" item-selected\" : null)}\r\n           onClick={()=>this.props.changeMode(AppMode.ROUNDS)}>\r\n          <span className=\"modebar-icon  fa fa-history\"></span>\r\n          <span className=\"modebar-text\">Rounds</span>\r\n        </a>\r\n        <a className={((this.props.mode === AppMode.COURSES) \r\n        || (this.props.mode === AppMode.COURSES_HOME) ||\r\n         (this.props.mode === AppMode.COURSE_RATES) ? \" item-selected\" : null)}\r\n          onClick={()=>this.props.changeMode(AppMode.COURSES)}>\r\n          <span className=\"modebar-icon  fa fa-flag\"></span>\r\n          <span className=\"modebar-text\">Courses</span>\r\n        </a> \r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default ModeBar;\r\n","import React from 'react';\r\n\r\nclass ConfirmDeleteAccount extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.emailRef = React.createRef();\r\n        this.state = {emailMatches: false};\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.emailRef.current.focus();\r\n    }\r\n\r\n    handleChange = () => {\r\n        const match = (this.emailRef.current.value === this.props.email);\r\n        if (match != this.state.emailMatches) {\r\n            this.setState({emailMatches: match});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <center>\r\n                <h3 className=\"modal-title\"><b>Confirm Account Deletion</b></h3>\r\n              </center>\r\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\r\n                 &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <p>Do you really want to delete your account? <br />\r\n                 <i>This action cannot be undone.</i></p>\r\n              <label>\r\n                Confirm Email ({this.props.email}):\r\n                <br/>\r\n                <input \r\n                    className=\"form-center\"\r\n                    type=\"text\"\r\n                    ref={this.emailRef}\r\n                    onChange={this.handleChange} />\r\n                </label>\r\n                <br />\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteAccount} disabled={!this.state.emailMatches}>\r\n                  Yes, Delete My Account</button>\r\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\r\n                  No, Cancel</button>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmDeleteAccount;","import React from 'react';\r\nimport ConfirmDeleteAccount from './ConfirmDeleteAccount.js';\r\nimport confirmDeleteAccount from './ConfirmDeleteAccount.js';\r\n\r\nclass CreateEditAccountDialog extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.origAccountInfo = null;\r\n        //Create a ref for the email input DOM element\r\n        this.newUserRef = React.createRef();\r\n        this.repeatPassRef = React.createRef();\r\n        this.profilePicRef = React.createRef();\r\n        this.state = {accountName: \"\",\r\n                      displayName: \"\",\r\n                      profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\r\n                      password: \"\",\r\n                      passwordRepeat: \"\",\r\n                      securityQuestion: \"\",\r\n                      securityAnswer: \"\",\r\n                      formUpdated: false,\r\n                      confirmDelete: false};\r\n    } \r\n\r\n    //componentDidMount -- If we are editing an existing user acccount, we need to grab the data from\r\n    //the database and push them into the state.\r\n    async componentDidMount() {\r\n        if (!this.props.create) {\r\n            //obtain current user data from database and push into state\r\n            const url = \"/users/\" + this.props.userId;\r\n            const res = await fetch(url);\r\n            const json = await res.json();\r\n            const userData = JSON.parse(json);\r\n            this.origAccountInfo = userData; //This determines whether update can occur\r\n            this.origAccountInfo.passwordRepeat = userData.password;\r\n            this.setState({accountName: this.props.userId,\r\n                           displayName: userData.displayName,\r\n                           profilePicURL: userData.profilePicURL,\r\n                           password: userData.password,\r\n                           passwordRepeat: userData.password,\r\n                           securityQuestion: userData.securityQuestion,\r\n                           securityAnswer: userData.securityAnswer});\r\n        }\r\n    }\r\n\r\n    //checkDataValidity -- Callback function invoked after a form element in\r\n    //the 'Create Account' dialog box changes and component state has been\r\n    //updated. We first check whether the passwords match. If they do not, \r\n    //we set a custom validity message to be displayed when the user clicks the\r\n    //'Create Account' button. Otherwise, we reset the custom validity message\r\n    //to empty so that it will NOT fire when the user clicks 'Create Account'.\r\n    //Second, we check whether anything in the form changed from the original.\r\n    //If so, we update the 'formUpdated' state var, so that the form's submit\r\n    //button is enabled.\r\n    checkDataValidity = () => {\r\n        if (this.state.password != this.state.passwordRepeat) {\r\n            //Passwords don't match\r\n            this.repeatPassRef.current.setCustomValidity(\r\n            \"This password must match password entered in previous field.\");\r\n        } else {\r\n            this.repeatPassRef.current.setCustomValidity(\"\");\r\n        }\r\n    }\r\n\r\n    //handleChange--Called when a field in a dialog box form changes.\r\n    handleChange = (event) => {\r\n        const formUpdated = (this.origAccountInfo == null ? true : this.formIsUpdated(event.target.name,event.target.value));\r\n        if (event.target.name === \"profilePic\") {\r\n            if (event.target.value.length == 0) { //The user canceled the file selection -- set back to default\r\n                this.setState({profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\r\n                               formUpdated: formUpdated},\r\n                               this.checkDataValidity);\r\n            } else { //The user selected a file\r\n                const self = this;\r\n                const reader = new FileReader();\r\n                reader.readAsDataURL(this.profilePicRef.current.files[0]);\r\n                reader.addEventListener(\"load\",function() {\r\n                    self.setState({profilePicURL:  this.result,\r\n                                   formUpdated: formUpdated},this.checkDataValidity);\r\n                });\r\n                \r\n            }\r\n        } else {\r\n            this.setState({[event.target.name]: event.target.value,\r\n                           formUpdated: formUpdated},this.checkDataValidity);\r\n        }\r\n    } \r\n\r\n    //formisUpdated-- Checks whether any form data element has changed from the original. If so, \r\n    //returns true. Returns false otherwise. Note that in case of editing new account, always returns\r\n    //true since this.origAccountInfo is set to null.\r\n    //Should be called whenever the user makes a change to form data.\r\n    formIsUpdated = (updateField,updateVal) => {\r\n        if (this.origAccountInfo[updateField] != updateVal) {return true;}\r\n        if (updateField != \"displayName\" && \r\n             this.state.displayName != this.origAccountInfo.displayName) \r\n             {return true;}\r\n        if (updateField != \"profilePicURL\" && \r\n             this.state.profilePicURL != this.origAccountInfo.profilePicURL) \r\n             {return true;}\r\n        if (updateField != \"password\" &&\r\n            this.state.password !== this.origAccountInfo.password)\r\n            {return true;}\r\n        if (updateField != \"passwordRepeat\" &&\r\n            this.state.passwordRepeat !== this.origAccountInfo.passwordRepeat)\r\n            {return true;}\r\n        if (updateField != \"securityQuestion\" &&\r\n            this.state.securityQuestion !== this.origAccountInfo.securityQuestion)\r\n            {return true;}\r\n        if (updateField != \"securityAnswer\" &&\r\n            this.state.securityAnswer !== this.origAccountInfo.securityAnswer)\r\n            {return true;}\r\n        return false;\r\n    }\r\n\r\n    //setDefaultDisplayName -- Triggered by onBlur() event of Email field.\r\n    //Sets default value of display name to value entered into Email field \r\n    //as a courtesy.\r\n    setDefaultDisplayName = (event) => {\r\n      if (event.target.value.length > 0 && this.state.displayName === \"\") {\r\n        this.setState({displayName: event.target.value});\r\n      }\r\n    }\r\n\r\n    //handleSubmit -- Triggered when user clicks on submit button to\r\n    //either create or edit account.\r\n    //Custom data checking ensures user account under this email does not \r\n    //already exist and that the rest of the info is valid. We create a new  \r\n    // object for user, save it to localStorage and take user to app's \r\n    //landing page. \r\n    handleSubmit = async(event) => {\r\n        event.preventDefault();\r\n        //Initialize user account\r\n        let userData = {\r\n            displayName: this.state.displayName,\r\n            password: this.state.password,\r\n            profilePicURL: this.state.profilePicURL,\r\n            securityQuestion: this.state.securityQuestion,\r\n            securityAnswer: this.state.securityAnswer\r\n        };\r\n        const url = '/users/' + this.state.accountName;\r\n        let res;\r\n        if (this.props.create) { //use POST route to create new user account\r\n            res = await fetch(url, {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                    },\r\n                method: 'POST',\r\n                body: JSON.stringify(userData)}); \r\n            if (res.status == 200) { //successful account creation!\r\n                this.props.done(\"New account created! Enter credentials to log in.\",false);\r\n            } else { //Unsuccessful account creation\r\n                //Grab textual error message\r\n                const resText = await res.text();\r\n                this.props.done(resText,false);\r\n            }\r\n        } else { //use PUT route to update existing user account\r\n            res = await fetch(url, {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                    },\r\n                method: 'PUT',\r\n                body: JSON.stringify(userData)}); \r\n            if (res.status == 200) { //successful account creation!\r\n                this.props.done(\"User Account Updated!\",false);\r\n            } else { //Unsuccessful account update\r\n                //Grab textual error message\r\n                const resText = await res.text();\r\n                this.props.done(resText,false);\r\n            }\r\n        }\r\n    }\r\n\r\n    //deleteAccount -- Called after confirms account deletion. \r\n    //Uses DELETE server route to perform server deletion. \r\n    //Calls on done with status message and\r\n    //true if delete was succesful, false otherwise.\r\n    deleteAccount = async() => {\r\n       const url = '/users/' + this.state.accountName;\r\n       const res = await fetch(url, \r\n                    {method: 'DELETE'}); \r\n        if (res.status == 200) { //successful account deletion!\r\n            this.props.done(\"Account '\" + this.state.accountName + \"' has been deleted.\",true);\r\n        } else { //Unsuccessful account deletion\r\n            //Grab textual error message\r\n            const resText = await res.text();\r\n            this.props.done(resText,false);\r\n        }\r\n        this.setState({confirmDelete: false});\r\n    }\r\n\r\n    //confirmDeleteAccount -- Called when user clicks on \"Delete Account...\"\r\n    //button to indicate intention to delete account. Presents the Confirm\r\n    //Delete dialog box.\r\n    confirmDeleteAccount = (e) => {\r\n        e.preventDefault();\r\n        this.setState({confirmDelete: true});\r\n    }\r\n\r\n    render() {\r\n    return (  \r\n    <div className=\"modal\" role=\"dialog\">\r\n    <div className=\"modal-dialog modal-lg\"></div>\r\n        <div className=\"modal-content form-center\">\r\n            <div className=\"modal-header\">\r\n              <h3><b>{this.props.create ? \"Create New Account\" : \"Edit Account\"}</b></h3>\r\n              <button className=\"modal-close\" \r\n                       onClick={this.props.cancel}>\r\n                &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n            <form onSubmit={this.handleSubmit}>\r\n            <label>\r\n                Email: \r\n                <input  \r\n                autocomplete=\"off\"\r\n                disabled={!this.props.create}\r\n                className=\"form-control form-text form-center\"\r\n                name=\"accountName\"\r\n                type=\"email\"\r\n                size=\"35\"\r\n                placeholder=\"Enter Email Address\"\r\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                required={true}\r\n                ref={this.newUserRef}\r\n                value={this.state.accountName}\r\n                onChange={this.handleChange}\r\n                onBlur={this.setDefaultDisplayName}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Password:\r\n                <input\r\n                autocomplete=\"off\"\r\n                className=\"form-control form-text form-center\"\r\n                name=\"password\"\r\n                type=\"password\"\r\n                size=\"35\"\r\n                placeholder=\"Enter Password\"\r\n                pattern=\r\n                \"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                required={true}\r\n                value={this.state.password}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Repeat Password:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"passwordRepeat\"\r\n                type=\"password\"\r\n                size=\"35\"\r\n                placeholder=\"Repeat Password\"\r\n                required={true}\r\n                ref={this.repeatPassRef}\r\n                value={this.state.passwordRepeat}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Display Name:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"displayName\"\r\n                type=\"text\"\r\n                size=\"30\"\r\n                placeholder=\"Display Name\"\r\n                required={true}\r\n                value={this.state.displayName}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Profile Picture:<br/>\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"profilePic\"\r\n                type=\"file\"\r\n                accept=\"image/x-png,image/gif,image/jpeg\" \r\n                ref={this.profilePicRef}\r\n                value={this.state.profilePic}\r\n                onChange={this.handleChange}\r\n                />\r\n                <img src={this.state.profilePicURL != \"\" ? \r\n                            this.state.profilePicURL :\r\n                            this.state.profilePicDataURL} \r\n                        height=\"60\" width=\"60\" \r\n                 />\r\n            </label> \r\n            <br/>\r\n            <label>\r\n                Security Question:\r\n                <textarea\r\n                className=\"form-control form-text form-center\"\r\n                name=\"securityQuestion\"\r\n                size=\"35\"\r\n                placeholder=\"Security Question\"\r\n                rows=\"2\"\r\n                cols=\"35\"\r\n                maxLength=\"100\"\r\n                required={true}\r\n                value={this.state.securityQuestion}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Answer to Security Question:\r\n                <textarea\r\n                className=\"form-control form-text form-center\"\r\n                name=\"securityAnswer\"\r\n                type=\"text\"\r\n                placeholder=\"Answer\"\r\n                rows=\"2\"\r\n                cols=\"35\"\r\n                maxLength=\"100\"\r\n                required={true}\r\n                value={this.state.securityAnswer}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            {!this.props.create ?  \r\n            <button className=\"btn btn-small btn-danger\" onClick={this.confirmDeleteAccount}>\r\n                Delete Account...\r\n            </button> : null}\r\n            <br/><br/>\r\n            <button role=\"submit\" \r\n                disabled={!this.state.formUpdated}\r\n                className=\"btn btn-primary btn-color-theme modal-submit-btn\">\r\n                <span className={this.props.create ? \"fa fa-user-plus\" : \"fa fa-user\"}></span>\r\n                &nbsp;{this.props.create ? \"Create Account\" : \"Update Account\"}\r\n            </button>\r\n            </form>\r\n            </div>\r\n        </div>\r\n        {this.state.confirmDelete ? \r\n          <ConfirmDeleteAccount email={this.state.accountName}\r\n                                deleteAccount={this.deleteAccount}\r\n                                close={() => (this.setState({confirmDelete: false}))}\r\n         /> : null}\r\n    </div>\r\n    );\r\n}\r\n}\r\n\r\nexport default CreateEditAccountDialog;","import React from 'react'\r\n\r\nclass ResetPasswordDialog extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.resetPasswordRef = React.createRef();\r\n        this.resetPasswordRepeatRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //handleSubmit -- When the user submits the form, ensure that the passwords match.\r\n    //If so, call on resetPassword in parent component to actually reset the password.\r\n    //Otherwise, display an error message prompting the user to try again.\r\n    handleSubmit= (event) => {\r\n        event.preventDefault();\r\n        if (this.resetPasswordRef.current.value === this.resetPasswordRepeatRef.current.value) {\r\n            this.props.resetPassword(this.resetPasswordRef.current.value);\r\n        } else {\r\n            this.resetPasswordRepeatRef.current.focus();\r\n            this.setState({errorMsg: \"The passwords you entered do not match. Please try again.\"});\r\n        }\r\n    }\r\n\r\n    checkForSubmit = (e) => {\r\n        if (e.code === \"Enter\") {\r\n            e.preventDefault();\r\n            this.handleSubmit();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"modal-title\"><b>Reset Password</b>\r\n                    </h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={this.props.cancelResetPassword}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \r\n                    <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        New Password: \r\n                        <input\r\n                        type=\"password\"\r\n                        placeholder=\"Enter new password\"\r\n                pattern=\"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                        className=\"form-control form-text\"\r\n                        ref={this.resetPasswordRef}\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Repeat New Password: \r\n                        <input\r\n                        type=\"password\"\r\n                        placeholder=\"Repeat new password\"\r\n                        className=\"form-control form-text\"\r\n                        onKeyUp={this.checkForSubmit}\r\n                        ref={this.resetPasswordRepeatRef}\r\n                        />\r\n                    </label>\r\n                    <button role=\"submit\" \r\n                     className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-key\"></span>&nbsp;Reset Password\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          );\r\n        \r\n    }\r\n}\r\n\r\nexport default ResetPasswordDialog;","import React from 'react';\r\nimport AppMode from '../AppMode.js';\r\n\r\nclass LookUpAccountDialog extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.emailRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //handleLookUpAccount: When the user clicks on the \"Look Up Account\" dialog box\r\n    //button, we check whether the account exists. If it does, we update the state,\r\n    //setting the resetEmail var to the email entered, hiding the current dialog box\r\n    //and showing the security question dialog box.\r\n    handleLookUpAccount = async(event) => {\r\n        event.preventDefault();\r\n        let response = await fetch(\"/users/\" + this.emailRef.current.value);\r\n        if (response.status == 200) {\r\n            const json = await response.json();\r\n            const obj = JSON.parse(json);\r\n            if (obj.authStrategy === \"local\") {\r\n                this.props.getSecurityAnswer(obj.id,obj.securityQuestion, obj.securityAnswer);\r\n            } else { //Account exists but was created through OAuth so password can't be reset \r\n                this.setState({ErrMsg: \"That account is authenticated through \" + obj.authStrategy + \". \" +\r\n                               \"Please log in to \" + obj.authStrategy + \" to reset the password.\"});\r\n            }\r\n        } else {\r\n            this.setState({errorMsg: \"Sorry, there is no account associated with '\" + this.emailRef.current.value + \"'.\"});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"modal-title\"><b>Look Up Account</b></h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={() => {this.props.cancelResetPassword()}}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null}\r\n                    <form onSubmit={this.handleLookUpAccount}>\r\n                    <label>\r\n                        Account Email Address: \r\n                        <input\r\n                        ref={this.emailRef}\r\n                        className=\"form-control form-text\"\r\n                        type=\"email\"\r\n                        size=\"35\"\r\n                        placeholder=\"Enter Email Address\"\r\n                        pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                        ref={this.emailRef}\r\n                        required={true}\r\n                        />\r\n                    </label>\r\n                    <button type=\"submit\" \r\n                        className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-search\"></span>&nbsp;Look Up Account\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>  \r\n        );   \r\n    }\r\n\r\n}\r\n\r\nexport default LookUpAccountDialog;\r\n","import React from 'react';\r\n\r\nclass SecurityQuestionDialog extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.securityAnswerRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //Focus cursor in email secrity answer field when mounted\r\n    componentDidMount() {\r\n        this.securityAnswerRef.current.focus();\r\n    }  \r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (this.securityAnswerRef.current.value === this.props.answer) {\r\n            this.props.getNewPassword();\r\n        } else {\r\n            this.securityAnswerRef.current.focus();\r\n            this.setState({errorMsg: \"Sorry, that is not the correct answer to the security question. Try again.\"});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"modal-title\"><b>Answer Security Question</b>\r\n                    </h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={this.props.cancelResetPassword}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \r\n                    <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        Security Question: \r\n                        <textarea\r\n                        readOnly={true}\r\n                        value={this.props.question}\r\n                        className=\"form-control form-text\"\r\n                        rows=\"3\"\r\n                        cols=\"35\"\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Security Answer: \r\n                        <textarea\r\n                        className=\"form-control form-text\"\r\n                        placeholder=\"Enter Security Question Answer\"\r\n                        ref={this.securityAnswerRef}\r\n                        rows=\"3\"\r\n                        cols=\"35\"\r\n                        />\r\n                    </label>\r\n                    <button role=\"submit\" \r\n                      className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-check\"></span>&nbsp;Verify Answer\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          );        \r\n    }\r\n}\r\n export default SecurityQuestionDialog;","import React from 'react';\r\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js';\r\nimport ResetPasswordDialog from './ResetPasswordDialog.js';\r\nimport LookUpAccountDialog from './LookUpAccountDialog.js';\r\nimport SecurityQuestionDialog from './SecurityQuestionDialog.js';\r\n\r\nclass LoginPage extends React.Component {\r\n\r\nconstructor() {\r\n    super();\r\n    //Create a ref for the email input DOM element\r\n    this.emailInputRef = React.createRef();\r\n    this.resetUserId = \"\";\r\n    this.resetQ = \"\";\r\n    this.resetA = \"\";\r\n    this.passwordInputRef = React.createRef();\r\n    this.state = {statusMsg: \"\",\r\n                  loginBtnIcon: \"fa fa-sign-in\",\r\n                  loginBtnLabel: \"Log In\",\r\n                  showLookUpAccountDialog: false,\r\n                  showSecurityQuestionDialog: false,\r\n                  showResetPaswordDialog: false,\r\n                  githubIcon: \"fa fa-github\",\r\n                  githubLabel: \"Sign in with GitHub\",\r\n                  loginMsg: \"\",\r\n                  newAccountCreated: false\r\n                  };\r\n} \r\n    \r\n//Focus cursor in email input field when mounted\r\ncomponentDidMount() {\r\n    this.emailInputRef.current.focus();\r\n}  \r\n\r\n//handleLoginSubmit -- Called when user clicks on login button.\r\nhandleLoginSubmit = async (event) => {\r\n    event.preventDefault();\r\n    this.setState({loginBtnIcon: \"fa fa-spin fa-spinner\",\r\n                   loginBtnLabel: \"Logging In...\"});\r\n    const url = \"auth/login?username=\" + this.emailInputRef.current.value +\r\n                \"&password=\" + this.passwordInputRef.current.value;\r\n    const res = await fetch(url, {method: 'POST'}); \r\n    if (res.status == 200) { //successful login!\r\n        window.open(\"/\",\"_self\");\r\n    } else { //Unsuccessful login\r\n      const resText = await res.text();\r\n      this.setState({loginBtnIcon: \"fa fa-sign-in\",\r\n                     loginBtnLabel: \"Log In\",\r\n                     statusMsg: resText});\r\n    }\r\n}\r\n\r\n  //accountCreateDone -- Called by child CreateAccountDialog component when \r\n  //user attempted to create new account. Hide the dialog and display \r\n  //a message indicating result of the attempt.\r\n  accountCreateDone = (msg) => {\r\n      this.setState({statusMsg: msg,\r\n                     showCreateAccountDialog: false});\r\n  }\r\n\r\n  //cancelCreateAccount -- Called by child CreateAccountDialog componenet when user decides\r\n  //to cancel creation of new account by clicking the \"X\" in top-right of dialog.\r\n  cancelCreateAccount = () => {\r\n      this.setState({showCreateAccountDialog: false});\r\n  }\r\n\r\n//cancelResetPassword -- Called by one of the child three child dialog box components when\r\n//the user decides to cancel resetting their password. Toggles state so that all three\r\n//of the dialog boxes are hidden\r\ncancelResetPassword = () => {\r\n    this.resetUserId = \"\";\r\n    this.resetQ = \"\";\r\n    this.resetA = \"\";\r\n    this.setState({showLookUpAccountDialog: false,\r\n                   showSecurityQuestionDialog: false,\r\n                   showResetPaswordDialog: false});             \r\n}\r\n\r\n//handleOAuthLogin -- Callback function that initiates contact with OAuth\r\n//provider\r\nhandleOAuthLogin = (provider) => {\r\n    window.open(`/auth/${provider}`,\"_self\");\r\n}\r\n\r\n//handleOAuthLoginClick -- Called whent the user clicks on button to\r\n//authenticate via a third-party OAuth service. The name of the provider is\r\n//passed in as a parameter.\r\nhandleOAuthLoginClick = (provider) => {\r\n   this.setState({[provider + \"Icon\"] : \"fa fa-spin fa-spinner\",\r\n                  [provider + \"Label\"] : \"Connecting...\"});\r\n   setTimeout(() => this.handleOAuthLogin(provider),1000);\r\n}\r\n\r\n//getSecurityAnswer: Given the id, security question, and security answer obtained\r\n//from the LookUpAccountDialog component, update state such that the user will\r\n//next be prompted to enter security question and answer for verification\r\ngetSecurityAnswer = (userId, question, answer) => {\r\n    this.resetUserId = userId;\r\n    this.resetQ = question;\r\n    this.resetA = answer;\r\n    this.setState({showLookUpAccountDialog: false,\r\n                   showSecurityQuestionDialog: true\r\n                });\r\n}\r\n\r\n//getNewPassword-- Called after user successfully provides correct answer\r\n//to security question. Presents the \"Reset Password\" dialog box.\r\ngetNewPassword = () => {\r\n    this.setState({showSecurityQuestionDialog: false,\r\n                    showResetPaswordDialog: true});\r\n}\r\n\r\n//resetPassword--Called after the user successfully enters a new (acceptable)\r\n//password. pw contains the new password. Call on the Update (PUT) server\r\n//route to update the user's password in the database.\r\nresetPassword = async(pw) => {\r\n    const url = \"/users/\" + this.resetUserId;\r\n    const res = await fetch(url, {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n            },\r\n        method: 'PUT',\r\n        body: JSON.stringify({password: pw})}); \r\n    if (res.status == 200) { //successful update creation!\r\n        this.setState({showResetPaswordDialog: false,\r\n                       statusMsg: \"Password successfully reset!\"});\r\n    } else { //Unsuccessful account creation\r\n        //Grab textual error message\r\n        const resText = await res.text();\r\n        this.setState({showResetPasswordDialog: false,\r\n                      statusMsg: resText});\r\n    }\r\n    \r\n}\r\n\r\n//newAccountCreated -- Called after successful creation of a new account\r\naccountCreateDone = (msg,deleted) => {\r\n    this.setState({statusMsg: msg,\r\n                   showCreateAccountDialog: false});\r\n}\r\n\r\n//closeStatusMsg -- Called when user clicks on \"x\" to dismiss status message\r\ncloseStatusMsg = () => {\r\n    this.setState({statusMsg: \"\"});\r\n}\r\n\r\n//cancelCreateAccount -- called to hide Create Account dialog without creating acct\r\ncancelCreateAccount = () => {\r\n    this.setState({showCreateAccountDialog: false});\r\n}\r\n\r\n  render() {\r\n    return(\r\n        <div>\r\n        <center>\r\n        {this.state.statusMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.statusMsg}</span>\r\n                       <button className=\"modal-close\" onClick={this.closeStatusMsg}>\r\n                          <span className=\"fa fa-times\"></span>\r\n                        </button></div>: null}\r\n            {this.state.showLookUpAccountDialog ? \r\n              <LookUpAccountDialog cancelResetPassword={this.cancelResetPassword}\r\n                                   getSecurityAnswer={this.getSecurityAnswer}/> : null}\r\n            {this.state.showSecurityQuestionDialog ? \r\n               <SecurityQuestionDialog cancelResetPassword={this.cancelResetPassword}\r\n                                       question={this.resetQ}\r\n                                       answer={this.resetA}\r\n                                       getNewPassword={this.getNewPassword}/> : null}\r\n            {this.state.showResetPaswordDialog ? \r\n              <ResetPasswordDialog cancelResetPassword={this.cancelResetPassword}\r\n                                   resetPassword={this.resetPassword} /> : null}\r\n            <form id=\"loginInterface\" onSubmit={this.handleLoginSubmit}>\r\n            <label htmlFor=\"emailInput\" style={{ padding: 0, fontSize: 24 }}>\r\n                Email:\r\n                <input\r\n                ref={this.emailInputRef}\r\n                className=\"form-control login-text\"\r\n                type=\"email\"\r\n                placeholder=\"Enter Email Address\"\r\n                id=\"emailInput\"\r\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                required={true}\r\n                />\r\n            </label>\r\n            <p />\r\n            <label htmlFor=\"passwordInput\" style={{ padding: 0, fontSize: 24 }}>\r\n                Password:\r\n                <input\r\n                ref={this.passwordInputRef}\r\n                className=\"form-control login-text\"\r\n                type=\"password\"\r\n                placeholder=\"Enter Password\"\r\n                pattern=\"[A-Za-z0-9!@#$%^&*()_+\\-]+\"\r\n                required={true}\r\n                />\r\n            </label>\r\n            <p className=\"bg-danger\" id=\"feedback\" style={{ fontSize: 16 }} />\r\n            <button\r\n                type=\"submit\"\r\n                className=\"btn-color-theme btn btn-primary btn-block login-btn\">\r\n                <span id=\"login-btn-icon\" className={this.state.loginBtnIcon}/>\r\n                &nbsp;{this.state.loginBtnLabel}\r\n            </button>\r\n            <p>\r\n            <button type=\"button\" className=\"btn btn-link login-link\" \r\n                    onClick={() => {this.setState({showCreateAccountDialog: true});}}>\r\n                Create an account</button> | \r\n                <button type=\"button\" className=\"btn btn-link login-link\"\r\n                        onClick={() => {this.setState({showLookUpAccountDialog: true});}}>\r\n                Reset your password</button>\r\n            </p>  \r\n            <button type=\"button\" className=\"btn btn-github\"\r\n               onClick={() => this.handleOAuthLoginClick(\"github\")}>\r\n              <span className={this.state.githubIcon}></span>&nbsp;\r\n                {this.state.githubLabel}\r\n            </button>\r\n            <p>\r\n                <i>Version CptS 489</i>\r\n            </p>\r\n            </form>\r\n            {this.state.showCreateAccountDialog ? \r\n              <CreateEditAccountDialog\r\n                create={true} \r\n                done={this.accountCreateDone}\r\n                cancel={this.cancelCreateAccount} /> : null}\r\n            {this.state.showResetPasswordDialog ? <ResetPasswordDialog /> : null}\r\n        </center>\r\n        </div>\r\n        )\r\n    }\r\n} \r\n\r\nexport default LoginPage;\r\n","import React from 'react';\r\n\r\nclass FeedPage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"padded-page\">\r\n            <center>\r\n            <h1 >Activity Feed</h1>\r\n            <h2>This page is under construction.</h2>\r\n            <img src=\"https://dl.dropboxusercontent.com/s/qpjhy9x9gwdxpob/SpeedScoreLogo64Trans.png\" \r\n             height=\"200\" width=\"200\"/>\r\n            <p style={{fontStyle: \"italic\"}}>Version CptS 489 React Demo</p>\r\n            </center>\r\n        </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default FeedPage;","import React from 'react';\r\n\r\nclass ConfirmDeleteRound extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <center>\r\n                <h3 className=\"modal-title\"><b>Confirm Round Deletion</b></h3>\r\n              </center>\r\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\r\n                 &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <p>Do you really want to delete this round?</p>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteRound}>\r\n                  Yes, Delete</button>\r\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\r\n                  No, Cancel</button>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmDeleteRound;","import React from 'react';\r\nimport ConfirmDeleteRound from './ConfirmDeleteRound.js';\r\nimport AppMode from './../AppMode.js';\r\n\r\nclass RoundsTable extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {showConfirmDelete: false};\r\n  }\r\n\r\n  //editRound -- Triggered when the user clicks the edit button for a given\r\n  //round. The id param is the unique property that identifies the round.\r\n  //Set the state variable representing the id of the round to be edited and\r\n  //then switch to the ROUNDS_EDITROUND mode to allow the user to edit the\r\n  //chosen round.\r\n  editRound = (id) => {\r\n    this.props.setEditId(id);\r\n    this.props.changeMode(AppMode.ROUNDS_EDITROUND);\r\n  }\r\n\r\n  //deleteRound -- Triggered when the user clicks on the \"Yes, Delete\"\r\n  //button in the Confirm Delete dialog box. It executes the deletion and\r\n  //closes the dialog box.\r\n  deleteRound = () => {\r\n    this.props.deleteRound();\r\n    this.setState({showConfirmDelete: false});\r\n  }\r\n\r\n\r\n  //confirmDelete -- Triggered when the user clicks the delete button\r\n  //for a given round. The id paam is the unique property that \r\n  //identifies the round. Set the state variable representing the id\r\n  //of the round to be deleted and then present a dialog box asking\r\n  //the user to confirm the deletion.\r\n  confirmDelete = (id) => {\r\n    this.props.setDeleteId(id);\r\n    this.setState({showConfirmDelete: true});\r\n  }\r\n\r\n\r\n  //renderTable -- render an HTML table displaying the rounds logged\r\n  //by the current user and providing buttons to view/edit and delete each round.\r\n  renderTable = () => {\r\n  let table = [];\r\n  for (let r = 0; r < this.props.rounds.length; ++r) {\r\n    table.push(\r\n      <tr key={r}>\r\n        <td>{this.props.rounds[r].date.substring(0,10)}</td>\r\n        <td>{this.props.rounds[r].course}</td>\r\n        <td>{(Number(this.props.rounds[r].strokes) + \r\n              Number(this.props.rounds[r].minutes)) +\r\n              \":\" + (this.props.rounds[r].seconds < 10 ?  \r\n                \"0\" + this.props.rounds[r].seconds :\r\n                this.props.rounds[r].seconds) + \" (\" + \r\n              this.props.rounds[r].strokes + \r\n              \" in \" + this.props.rounds[r].minutes + \":\" + \r\n              (this.props.rounds[r].seconds < 10 ?  \r\n                \"0\" + this.props.rounds[r].seconds :\r\n                this.props.rounds[r].seconds) + \")\"}\r\n        </td>\r\n        <td><button onClick={this.props.menuOpen ? null : () => \r\n          this.editRound(r)}>\r\n              <span className=\"fa fa-eye\"></span></button></td>\r\n        <td><button onClick={this.props.menuOpen ? null : \r\n          () => this.confirmDelete(r)}>\r\n              <span className=\"fa fa-trash\"></span></button></td>\r\n      </tr> \r\n    );\r\n  }\r\n  return table;\r\n  }\r\n\r\n  //render--render the entire rounds table with header, displaying a \"No\r\n  //Rounds Logged\" message in case the table is empty.\r\n  render() {\r\n    return(\r\n    <div className=\"padded-page\">\r\n      <h1></h1>\r\n      <table className=\"table table-hover\">\r\n        <thead className=\"thead-light\">\r\n        <tr>\r\n          <th>Date</th>\r\n          <th>Course</th>\r\n          <th>Score</th>\r\n          <th>View/Edit...</th>\r\n          <th>Delete</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n          {Object.keys(this.props.rounds).length === 0 ? \r\n          <tr>\r\n          <td colSpan=\"5\" style={{fontStyle: \"italic\"}}>No rounds logged</td>\r\n          </tr> : this.renderTable()\r\n          }\r\n        </tbody>\r\n      </table>\r\n      {this.state.showConfirmDelete ?\r\n        <ConfirmDeleteRound \r\n          close={() => this.setState({showConfirmDelete: false})} \r\n          deleteRound={this.deleteRound} /> : null}\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RoundsTable;\r\n","import React from 'react';\r\nimport AppMode from './../AppMode.js';\r\n\r\nclass RoundForm extends React.Component {\r\n  constructor(props) {\r\n  super(props);\r\n  //Create date object for today, taking time zone into consideration\r\n  let today = new Date(Date.now()-(new Date()).getTimezoneOffset()*60000);\r\n  //store date as ISO string\r\n  if (this.props.mode === AppMode.ROUNDS_LOGROUND) {\r\n    //If logging a new round, the starting state is a default round with\r\n    //today's date.\r\n    this.state = {date:  today.toISOString().substr(0,10), \r\n                  course: \"\",\r\n                  type: \"practice\",\r\n                  holes: \"18\",\r\n                  strokes: 80,\r\n                  minutes: 50,\r\n                  seconds: \"00\",\r\n                  notes: \"\",\r\n                  faIcon: \"fa fa-save\",\r\n                  btnLabel: \"Save Round Data\"}\r\n  } else {\r\n    //if editing an existing round, the starting state is the round's\r\n    //current data\r\n    let thisRound = {...this.props.startData};\r\n    delete thisRound.id;\r\n    thisRound.faIcon = \"fa fa-edit\";\r\n    thisRound.btnLabel = \"Update Round Data\";\r\n    this.state = thisRound;\r\n  }\r\n}\r\n  \r\n  \r\n    handleChange = (event) => {\r\n        const name = event.target.name;\r\n        if (name === \"seconds\") {\r\n          let newSec = (event.target.value.length < 2 ? \"0\" + \r\n            event.target.value : event.target.value);\r\n          let newSGS = this.computeSGS(this.state.strokes, this.state.minutes, \r\n                                       newSec);\r\n          this.setState({seconds: newSec, SGS: newSGS});\r\n        } else if (name === \"strokes\") {\r\n          let newStrokes = event.target.value;\r\n          let newSGS = this.computeSGS(newStrokes, this.state.minutes, \r\n            this.state.seconds);\r\n          this.setState({strokes: newStrokes, SGS: newSGS});\r\n        } else if (name === \"minutes\") {\r\n            let newMin = event.target.value;\r\n            let newSGS = this.computeSGS(this.state.strokes, newMin, \r\n              this.state.seconds);\r\n            this.setState({minutes: newMin, SGS: newSGS});\r\n        } else {\r\n          this.setState({[name]: event.target.value});\r\n        }\r\n    }\r\n  \r\n  \r\n    //handleSubmit -- When the user clicks on the button to save/update the\r\n    //round, start the spinner and invoke the parent component's saveRound\r\n    //method to do the actual work. Note that saveRound is set to the correct\r\n    //parent method based on whether the user is logging a new round or editing\r\n    //an existing round.\r\n    handleSubmit = (event) => {\r\n        //start spinner\r\n        this.setState({faIcon: \"fa fa-spin fa-spinner\",\r\n                        btnLabel: (this.props.mode === AppMode.ROUNDS_LOGROUND ? \r\n                                    \"Saving...\" : \"Updating...\")});\r\n        //Prepare current round data to be saved\r\n        let roundData = this.state;\r\n        delete roundData.faIcon;\r\n        delete roundData.btnLabel;\r\n        //call saveRound on 1 second delay to show spinning icon\r\n        setTimeout(this.props.saveRound,1000,roundData); \r\n        event.preventDefault(); \r\n        }\r\n  \r\n\r\n    computeSGS = (strokes, min, sec) => {\r\n      return (Number(strokes) + Number(min)) \r\n                  + \":\" + sec;\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <form className=\"padded-page\" onSubmit={this.handleSubmit}>\r\n          <center>\r\n            <label>\r\n              Date:\r\n              <input name=\"date\" className=\"form-control form-center\" \r\n                type=\"date\" value={this.state.date} onChange={this.handleChange} />\r\n            </label>\r\n            <p></p>\r\n            <label>\r\n              Course:\r\n              <input name=\"course\" className=\"form-control form-center\" type=\"text\"\r\n                value={this.state.course} onChange={this.handleChange}\r\n                placeholder=\"Course played\" size=\"50\" maxLength=\"50\" />\r\n            </label>\r\n          <p></p>\r\n          <label>Type:\r\n          <select name=\"type\" value={this.state.type} \r\n            className=\"form-control form-center\" onChange={this.handleChange}>\r\n            <option value=\"practice\">Practice</option>\r\n            <option value=\"tournament\">Tournament</option>\r\n          </select> \r\n          </label>\r\n          <p></p>\r\n          <label># Holes:\r\n          <select name=\"holes\" value={this.state.holes} \r\n            className=\"form-control form-center\" onChange={this.handleChange}>\r\n            <option value=\"9\">9</option>\r\n            <option value=\"18\">18</option>\r\n          </select> \r\n          </label>\r\n          <p></p>\r\n          <label># Strokes:\r\n          <input name=\"strokes\" className=\"form-control form-center\" type=\"number\" \r\n            min=\"9\" max=\"200\" value={this.state.strokes} \r\n            onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <label>Time: <br></br>\r\n          <input name=\"minutes\" type=\"number\" size=\"3\"\r\n            min=\"10\" max=\"400\" value={this.state.minutes}\r\n            onChange={this.handleChange} />:  \r\n          <input name=\"seconds\" type=\"number\" size=\"2\"\r\n            min=\"0\" max=\"60\" value={this.state.seconds} \r\n            onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <label>Speedgolf Score: <br></br>\r\n              <input name=\"SGS\" className=\"form-center\" type=\"text\" size=\"6\" \r\n                disabled={true} value={this.computeSGS(this.state.strokes,this.state.minutes,this.state.seconds)} />\r\n          </label>\r\n          <p></p>\r\n          <label>Notes:\r\n              <textarea name=\"notes\" className=\"form-control\" rows=\"6\" cols=\"75\" \r\n                placeholder=\"Enter round notes\" value={this.state.notes} \r\n                onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <p></p>\r\n          <button type=\"submit\" style={{width: \"70%\",fontSize: \"36px\"}} \r\n            className=\"btn btn-primary btn-color-theme\">\r\n              <span className={this.state.faIcon}/>&nbsp;{this.state.btnLabel}\r\n          </button>\r\n          </center>\r\n        </form>\r\n      );\r\n    }\r\n}\r\n\r\nexport default RoundForm;","import React from 'react';\r\n\r\nclass FloatingButton extends React.Component {\r\n    render() {\r\n      return(\r\n        <div className=\"floatbtn\" onClick={this.props.handleClick}>\r\n          <span className=\"floatbtn-icon fa fa-plus\"></span>\r\n        </div>  \r\n      );\r\n    }\r\n}\r\n\r\nexport default FloatingButton;\r\n","//Rounds -- A parent component for the app's \"rounds\" mode.\r\n//Manages the rounds data for the current user and conditionally renders the\r\n//appropriate rounds mode page based on App's mode, which is passed in as a prop.\r\n\r\nimport React from 'react';\r\nimport AppMode from './../AppMode.js';\r\nimport RoundsTable from './RoundsTable.js';\r\nimport RoundForm from './RoundForm.js';\r\nimport FloatingButton from './FloatingButton.js';\r\n\r\nclass Rounds extends React.Component {\r\n\r\n    //Initialize a Rounds object based on local storage\r\n    constructor() {\r\n        super();\r\n        this.deleteId = \"\";\r\n        this.editId = \"\";\r\n        this.state = {errorMsg: \"\"};           \r\n    }\r\n\r\n    //addRound -- Given an object newData containing a new round, use the \r\n    //server POST route to add the new round to the database. If the add is\r\n    //successful, call on the refreshOnUpdate() method to force the parent\r\n    //App component to refresh its state from the database and re-render itself,\r\n    //allowing the change to be propagated to the Rounds table. Then switch\r\n    //the mode back to AppMode.ROUNDS since the user is done adding a round.\r\n    addRound = async (newData) => {\r\n        const url = '/rounds/' + this.props.userObj.id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'POST',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.setState({errorMsg: \"\"});\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n\r\n    //editRound -- Given an object newData containing updated data on an\r\n    //existing round, update the current user's round in the database. \r\n    //toggle the mode back to AppMode.ROUNDS since the user is done editing the\r\n    //round. \r\n    editRound = async (newData) => {\r\n        const url = '/rounds/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.rounds[this.editId]._id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'PUT',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n\r\n\r\n    //deleteRound -- Delete the current user's round uniquely identified by\r\n    //this.state.deleteId, delete from the database, and reset deleteId to empty.\r\n    deleteRound = async () => {\r\n        const url = '/rounds/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.rounds[this.deleteId]._id;\r\n        const res = await fetch(url, {method: 'DELETE'}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: \"An error occurred when attempting to delete round from database: \" \r\n            + msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }  \r\n    }\r\n \r\n    //setDeleteId -- Capture in this.state.deleteId the unique id of the item\r\n    //the user is considering deleting.\r\n    setDeleteId = (val) => {\r\n        this.deleteId = val;\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n\r\n    //setEditId -- Capture in this.state.editId the unique id of the item\r\n    //the user is considering editing.\r\n    setEditId = (val) => {\r\n        this.editId = val;\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n\r\n    closeErrorMsg = () => {\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n    \r\n    //render -- Conditionally render the Rounds mode page as either the rounds\r\n    //table, the rounds form set to obtain a new round, or the rounds form set\r\n    //to edit an existing round.\r\n    render() {\r\n        switch(this.props.mode) {\r\n            case AppMode.ROUNDS:\r\n                return (\r\n                    <>\r\n                    {this.state.errorMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.errorMsg}</span>\r\n                       <button className=\"modal-close\" onClick={this.closeErrorMsg}>\r\n                          <span className=\"fa fa-times\"></span>\r\n                        </button></div>: null}\r\n                    <RoundsTable \r\n                        rounds={this.props.userObj.rounds}\r\n                        setEditId={this.setEditId}\r\n                        setDeleteId={this.setDeleteId}\r\n                        deleteRound={this.deleteRound}\r\n                        changeMode={this.props.changeMode}\r\n                        menuOpen={this.props.menuOpen} /> \r\n                    <FloatingButton\r\n                        handleClick={() => \r\n                        this.props.changeMode(AppMode.ROUNDS_LOGROUND)}\r\n                        menuOpen={this.props.menuOpen}\r\n                        icon={\"fa fa-plus\"} />\r\n                    </>\r\n                );\r\n            case AppMode.ROUNDS_LOGROUND:\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={\"\"} \r\n                        saveRound={this.addRound} />\r\n                );\r\n            case AppMode.ROUNDS_EDITROUND:\r\n                let thisRound = {...this.props.userObj.rounds[this.editId]};\r\n                thisRound.date = thisRound.date.substr(0,10);\r\n                if (thisRound.seconds < 10) {\r\n                    thisRound.seconds = \"0\" + thisRound.seconds;\r\n                } \r\n                delete thisRound.SGS;\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={thisRound} \r\n                        saveRound={this.editRound} />\r\n                );\r\n        }\r\n    }\r\n\r\n}   \r\n\r\nexport default Rounds;\r\n","import React from 'react'; \r\nimport AppMode from './../AppMode.js'\r\n\r\n\r\nclass CourseHome extends React.Component {\r\n    \r\n        \r\n    render(){\r\n          return(\r\n            <div>\r\n            <button type=\"button\"\r\n             className=\"btn-color-theme btn btn-primary btn-block login-btn\"\r\n              onClick={() => this.handleClick} >\r\n              <span className=\"fa fa-th-list\"></span>\r\n              &nbsp;Course Rates</button>\r\n            </div>\r\n          );\r\n      \r\n}}\r\n\r\nexport default CourseHome;","import React from 'react';\r\nimport AppMode from \"./../AppMode.js\"\r\nimport CourseHome from './CourseHome.js';\r\nimport CourseRates from './CourseRates.js';\r\n\r\nclass CoursesPage extends React.Component {\r\n\r\n    render() {\r\n        switch(this.props.mode) {\r\n            case AppMode.COURSES:\r\n                return (<CourseHome userObj={this.props.userObj} />);\r\n            case AppMode.COURSES_HOME:\r\n                return (<CourseRates \r\n                    handleClick={() => \r\n                    this.props.changeMode(AppMode.COURSE_RATES)} />);\r\n            case AppMode.COURSE_RATES:\r\n                return (<CourseRates />);\r\n        }\r\n    }   \r\n}\r\n\r\nexport default CoursesPage;","import React from 'react';\r\n\r\nclass AboutBox extends React.Component {\r\n\r\nrender() {\r\n    return (\r\n        <div className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-dialog modal-lg\">\r\n            <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n                <h3>About SpeedScore</h3>\r\n                <button className=\"modal-close\" onClick={this.props.close}>\r\n                    &times;\r\n                </button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n                <img\r\n                src=\"https://dl.dropboxusercontent.com/s/awuwr1vpuw1lkyl/SpeedScore4SplashLogo.png\"\r\n                height=\"200\" width=\"200\"/>\r\n                <h3>The World's First and Only Suite of Apps for\r\n                Speedgolf</h3>\r\n                <p>Version CptS 489 Fa20 Complete (MERN)<br/>\r\n                &copy; 2017-20 The Professor of Speedgolf. All rights\r\n                reserved.\r\n                </p>\r\n                <div style={{textAlign: \"left\"}}>\r\n                <p>SpeedScore apps support</p>\r\n                <ul>\r\n                <li>live touranment scoring (<i>SpeedScore Live&reg;</i>)</li>\r\n                <li>tracking personal speedgolf rounds and sharing results\r\n                (<i>SpeedScore Track&reg;</i>)</li>\r\n                <li>finding speedgolf-friendly courses, booking tee times, and\r\n                paying to play speedgolf by the minute (<i>SpeedScore\r\n                Play&reg;</i>)</li>\r\n                </ul>\r\n                <p>SpeedScore was first developed by Dr. Chris Hundhausen,\r\n                associate professor of computer science at Washington State\r\n                University and the <i>Professor of Speedgolf</i>, with support\r\n                from Scott Dawley, CEO of Speedgolf USA, LLC.</p>\r\n                <p>For more information on SpeedScore, visit <a\r\n                href=\"http://speedscore.live\" target=\"_blank\">SpeedScore's web\r\n                site</a>. For more information on speedgolf, visit <a\r\n                href=\"http://playspeedgolf.com\"\r\n                target=\"_blank\">playspeedgolf.com</a> and <a\r\n                href=\"http://usaspeedgolf.com\" target=\"_blank\">Speedgolf\r\n                USA</a>.</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                <button className=\"btn btn-primary btn-color-theme\"\r\n                onClick={this.props.close}>OK</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default AboutBox;","import React from 'react';\r\nimport NavBar from './NavBar.js';\r\nimport SideMenu from './SideMenu.js';\r\nimport ModeBar from './ModeBar.js';\r\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js'\r\nimport LoginPage from './LoginPage.js';\r\nimport AppMode from \"./../AppMode.js\"\r\nimport FeedPage from './FeedPage.js';\r\nimport Rounds from './Rounds.js';\r\nimport CoursesPage from './CoursesPage.js';\r\nimport AboutBox from './AboutBox.js';\r\n\r\nconst modeTitle = {};\r\nmodeTitle[AppMode.LOGIN] = \"Welcome to SpeedScore\";\r\nmodeTitle[AppMode.FEED] = \"Activity Feed\";\r\nmodeTitle[AppMode.ROUNDS] = \"My Rounds\";\r\nmodeTitle[AppMode.ROUNDS_LOGROUND] = \"Log New Round\";\r\nmodeTitle[AppMode.ROUNDS_EDITROUND] = \"Edit Round\";\r\nmodeTitle[AppMode.COURSES] = \"Courses\";\r\nmodeTitle[AppMode.COURSES_HOME] = \"Courses Home\";\r\nmodeTitle[AppMode.COURSE_RATES] = \"Course Rate\";\r\n\r\nconst modeToPage = {};\r\nmodeToPage[AppMode.LOGIN] = LoginPage;\r\nmodeToPage[AppMode.FEED] = FeedPage;\r\nmodeToPage[AppMode.ROUNDS] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_LOGROUND] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_EDITROUND] = Rounds;\r\nmodeToPage[AppMode.COURSES] = CoursesPage;\r\nmodeToPage[AppMode.COURSES_HOME] = CoursesPage;\r\nmodeToPage[AppMode.COURSE_RATES] = CoursesPage;\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {mode: AppMode.LOGIN,\r\n                  menuOpen: false,\r\n                  authenticated: false,\r\n                  userObj: {displayName: \"\", profilePicURL: \"\"},\r\n                  editAccount: false,\r\n                  showEditAccountDialog: false,\r\n                  statusMsg: \"\",\r\n                  showAboutDialog: false\r\n                 };\r\n  }\r\n\r\n  //componentDidMount\r\n  componentDidMount() {\r\n    if (!this.state.authenticated) { \r\n      //Use /auth/test route to (re)-test authentication and obtain user data\r\n      fetch(\"/auth/test\")\r\n        .then((response) => response.json())\r\n        .then((obj) => {\r\n          if (obj.isAuthenticated) {\r\n            this.setState({\r\n              userObj: obj.user,\r\n              authenticated: true,\r\n              mode: AppMode.FEED //We're authenticated so can get into the app.\r\n            });\r\n          }\r\n        }\r\n      )\r\n    } \r\n  }\r\n\r\n  //refreshOnUpdate(newMode) -- Called by child components when user data changes in \r\n  //the database. The function calls the users/:userid (GET) route to update \r\n  //the userObj state var based on the latest database changes, and sets the \r\n  //mode state var is set to newMode. After this method is called, the\r\n  //App will re-render itself, forcing the new data to \r\n  //propagate to the child components when they are re-rendered.\r\n  refreshOnUpdate = async(newMode) => {\r\n    let response = await fetch(\"/users/\" + this.state.userObj.id);\r\n    response = await response.json();\r\n    const obj = JSON.parse(response);\r\n    this.setState({\r\n      userObj: obj,\r\n      mode: newMode\r\n    });\r\n  }\r\n\r\n\r\n  handleChangeMode = (newMode) => {\r\n    this.setState({mode: newMode});\r\n  }\r\n\r\n  openMenu = () => {\r\n    this.setState({menuOpen : true});\r\n  }\r\n  \r\n  closeMenu = () => {\r\n    this.setState({menuOpen : false});\r\n  }\r\n\r\n  toggleMenuOpen = () => {\r\n    this.setState(prevState => ({menuOpen: !prevState.menuOpen}));\r\n  }\r\n\r\n  setUserId = (Id) => {\r\n    this.setState({userId: Id,\r\n                   authenticated: true});\r\n  }\r\n\r\n  showEditAccount = () => {\r\n    this.setState({showEditAccountDialog: true});\r\n\r\n  }\r\n\r\n  cancelEditAccount = () => {\r\n    this.setState({showEditAccountDialog: false});\r\n  }\r\n\r\n  //editAccountDone -- called after successful edit or\r\n  //deletion of user account. msg contains the status\r\n  //message and deleted indicates whether an account was\r\n  //edited (deleted == false) or deleted (deleted == true)\r\n  editAccountDone = (msg, deleted) => {\r\n    if (deleted) {\r\n      this.setState({showEditAccountDialog: false,\r\n                     statusMsg: msg,\r\n                     mode: AppMode.LOGIN});\r\n      } else {\r\n        this.setState({showEditAccountDialog: false,\r\n          statusMsg: msg});\r\n      }\r\n  }\r\n\r\n  closeStatusMsg = () => {\r\n    this.setState({statusMsg: \"\"});\r\n  }\r\n\r\n  render() {\r\n    const ModePage = modeToPage[this.state.mode];\r\n    return (\r\n      <div className=\"padded-page\">\r\n        {this.state.showAboutDialog ? \r\n          <AboutBox close={() => this.setState({showAboutDialog: false})}/> : null}\r\n        {this.state.statusMsg != \"\" ? <div className=\"status-msg\">\r\n              <span>{this.state.statusMsg}</span>\r\n              <button className=\"modal-close\" onClick={this.closeStatusMsg}>\r\n                  <span className=\"fa fa-times\"></span></button></div> : null}\r\n        {this.state.showEditAccountDialog ? \r\n            <CreateEditAccountDialog \r\n              create={false} \r\n              userId={this.state.userObj.id} \r\n              done={this.editAccountDone} \r\n              cancel={this.cancelEditAccount}/> : null}\r\n        <NavBar \r\n          title={modeTitle[this.state.mode]} \r\n          mode={this.state.mode}\r\n          changeMode={this.handleChangeMode}\r\n          menuOpen={this.state.menuOpen}\r\n          toggleMenuOpen={this.toggleMenuOpen}/>\r\n          <SideMenu \r\n            changeMode={this.handleChangeMode}\r\n            menuOpen = {this.state.menuOpen}\r\n            mode={this.state.mode}\r\n            toggleMenuOpen={this.toggleMenuOpen}\r\n            displayName={this.state.userObj.displayName}\r\n            profilePicURL={this.state.userObj.profilePicURL}\r\n            localAccount={this.state.userObj.authStrategy === \"local\"}\r\n            editAccount={this.showEditAccount}\r\n            logOut={() => this.handleChangeMode(AppMode.LOGIN)}\r\n            showAbout={() => {this.setState({showAboutDialog: true})}}/>\r\n          <ModeBar \r\n            mode={this.state.mode} \r\n            changeMode={this.handleChangeMode}\r\n            menuOpen={this.state.menuOpen}/>\r\n          <ModePage \r\n            menuOpen={this.state.menuOpen}\r\n            mode={this.state.mode}\r\n            changeMode={this.handleChangeMode}\r\n            userObj={this.state.userObj}\r\n            refreshOnUpdate={this.refreshOnUpdate}/>\r\n      </div>\r\n    );  \r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap-social/bootstrap-social.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport './styles/index.css';\r\nimport App from './components/App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}