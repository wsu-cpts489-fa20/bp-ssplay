{"version":3,"sources":["AppMode.js","components/NavBar.js","components/SideMenu.js","components/ModeBar.js","components/ConfirmDeleteAccount.js","components/CreateEditAccountDialog.js","components/ResetPasswordDialog.js","components/LookUpAccountDialog.js","components/SecurityQuestionDialog.js","components/LoginPage.js","components/FeedPage.js","components/ConfirmDeleteRound.js","components/RoundsTable.js","components/RoundForm.js","components/FloatingButton.js","components/Rounds.js","components/RatesModal.js","components/MoreModal.js","components/BookingPage.js","components/Map.js","components/AllCourses.js","components/NearbyCourses.js","components/AdvancedSearch.js","components/SpecificCourses.js","components/AddCourses.js","components/AllAppointments.js","components/PaymentDialog.js","components/MyAppointments.js","components/CoursesPage.js","components/AboutBox.js","components/AddCardDialog.js","components/App.js","serviceWorker.js","index.js"],"names":["AppMode","LOGIN","FEED","ROUNDS","ROUNDS_LOGROUND","ROUNDS_EDITROUND","COURSES","COURSES_NEARBY","COURSES_ALL","COURSES_ADD","COURSES_APPT","COURSES_MYAPPT","Object","freeze","NavBar","getMenuBtnIcon","props","mode","menuOpen","handleMenuBtnClick","changeMode","toggleMenuOpen","className","this","aboutOpen","onClick","id","src","alt","height","width","title","React","Component","SideMenu","renderModeMenuItems","type","profilePicURL","displayName","localAccount","editAccount","toggleAddCardClicked","showAbout","logOut","ModeBar","ConfirmDeleteAccount","handleChange","match","emailRef","current","value","email","state","emailMatches","setState","createRef","focus","role","close","ref","onChange","deleteAccount","disabled","CreateEditAccountDialog","checkDataValidity","password","passwordRepeat","repeatPassRef","setCustomValidity","event","formUpdated","origAccountInfo","formIsUpdated","target","name","length","self","reader","FileReader","readAsDataURL","profilePicRef","files","addEventListener","result","updateField","updateVal","securityQuestion","securityAnswer","setDefaultDisplayName","handleSubmit","a","preventDefault","userData","url","accountName","create","fetch","headers","method","body","JSON","stringify","res","status","done","text","resText","confirmDelete","confirmDeleteAccount","e","newUserRef","userId","json","parse","cancel","onSubmit","autocomplete","size","placeholder","pattern","required","onBlur","accept","profilePic","profilePicDataURL","rows","cols","maxLength","card","ResetPasswordDialog","resetPasswordRef","resetPasswordRepeatRef","resetPassword","errorMsg","checkForSubmit","code","cancelResetPassword","onKeyUp","LookUpAccountDialog","handleLookUpAccount","response","obj","authStrategy","getSecurityAnswer","ErrMsg","errMsg","SecurityQuestionDialog","securityAnswerRef","answer","getNewPassword","readOnly","question","LoginPage","handleLoginSubmit","loginBtnIcon","loginBtnLabel","emailInputRef","passwordInputRef","window","open","statusMsg","accountCreateDone","msg","showCreateAccountDialog","cancelCreateAccount","resetUserId","resetQ","resetA","showLookUpAccountDialog","showSecurityQuestionDialog","showResetPaswordDialog","handleOAuthLogin","provider","handleOAuthLoginClick","setTimeout","pw","showResetPasswordDialog","deleted","closeStatusMsg","githubIcon","githubLabel","loginMsg","newAccountCreated","googleIcon","googleLabel","htmlFor","style","padding","fontSize","FeedPage","fontStyle","ConfirmDeleteRound","deleteRound","RoundsTable","editRound","setEditId","showConfirmDelete","setDeleteId","renderTable","table","r","push","key","rounds","date","substring","course","Number","strokes","minutes","seconds","keys","colSpan","RoundForm","newSec","newSGS","computeSGS","SGS","newStrokes","newMin","faIcon","btnLabel","roundData","saveRound","min","sec","today","Date","now","getTimezoneOffset","toISOString","substr","holes","notes","thisRound","startData","max","FloatingButton","handleClick","Rounds","addRound","newData","userObj","refreshOnUpdate","editId","_id","deleteId","val","closeErrorMsg","icon","RatesModal","getSearchedCourse","then","Error","statusText","console","log","thisCourse","courseName","Col","marginTop","marginBottom","Card","display","Img","variant","picture","Body","Title","location","Text","rateStandard","rateSenior","Footer","catch","error","handleClose","Container","fluid","Row","noGutters","MoreModal","toggleReviewClicked","reviewClicked","setErrorMsg","rating","review","yardage","runningDistance","timePar","bestScore","recordHolder","Button","editCourse","reload","alert","seventhDay","setDate","getDate","bounds","infoWindow","currentInfoWindow","service","infoPane","day1","day7","BookingPage","getAllAppointments","appointments","map","c","username","time","handleBookTeeTime","newappt","bookingDate","bookingTime","paid","addAppointment","addAppointment_op","document","getElementById","removeAttribute","i","setAttribute","for","AllCourses","toggleGetCourseClicked","getCourseClicked","toggleMoreClicked","item","more","toggleGetRatesClicked","getRatesButtonClicked","toggleBookTeeTimeClicked","cn","index","cname","bookTeeTimeClicked","handleDelete","filteredData","splice","getCourse","float","info","mapStyles","position","CurrentLocation","getNearbyPlaces","maps","google","request","rankBy","places","RankBy","DISTANCE","keyword","PlacesService","nearbySearch","nearbyCallback","results","PlacesServiceStatus","OK","createMarkers","forEach","place","marker","Marker","geometry","addListener","placeId","place_id","fields","getDetails","placeResult","showDetails","extend","fitBounds","placeInfowindow","InfoWindow","setContent","showPanel","classList","contains","remove","lastChild","removeChild","photos","firstPhoto","photo","createElement","add","getUrl","appendChild","textContent","address","formatted_address","website","websitePara","websiteLink","websiteUrl","createTextNode","href","initialCenter","lat","lng","currentLocation","prevProps","prevState","loadMap","recenterMap","center","LatLng","panTo","LatLngBounds","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","setPosition","setCenter","mapRef","refs","node","ReactDOM","findDOMNode","zoom","mapConfig","assign","Map","children","Children","cloneElement","mapCenter","renderChildren","defaultProps","visible","NearbyCourses","showingInfoWindow","activeMarker","selectedPlace","onMarkerClick","onClose","GoogleApiWrapper","apiKey","AdvancedSearch","allCourses","searchStart","searchType","len","setCourseAmount","setFilteredData","handleSwitch","filteredCourses","SpecificCourses","toggleAddCourseClicked","addCourseClicked","toggleAdvancedSearchClicked","advancedSearchClicked","setSelectButtonValue","newVal","selectButtonValue","setSearchTrue","setSearchFalse","x","courseAmount","setSearchCourseClickedTrue","searchCourseClicked","setSearchCourseClickedFalse","toggleOneDelete","oneDelete","handleInputChange","query","data","filter","element","toLowerCase","includes","data-tip","effect","AddCourses","addCourse","courseData","AllAppointments","toggleDeleteClicked","deleteClicked","handleDeleteAll","user","d","t","handleDeleteFromDB","u","PaymentDialog","getCard","thisCard","number","expDate","parseInt","handlePayment","handleUserPayment","mmId","MyAppointments","toggleSetMatched","s","matched","togglePayClicked","payClicked","handleAllPayment","mid","aid","p","getMyAppointments","CoursesPage","AboutBox","textAlign","AddCardDialog","addCard","cardExist","cardId","setCardExist","setCardDeleted","modeTitle","modeToPage","App","newMode","handleChangeMode","openMenu","closeMenu","setUserId","Id","authenticated","showEditAccount","showEditAccountDialog","cancelEditAccount","setUserObjType","newType","addCardClicked","editAccountDone","showAboutDialog","isAuthenticated","ModePage","Boolean","hostname","render","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1c899640.chunk.js","sourcesContent":["/* AppMode: The enumerated type for AppMode. */\n\nconst AppMode = {\n    LOGIN: \"LoginMode\",\n    FEED: \"FeedMode\",\n    ROUNDS: \"RoundsMode\",\n    ROUNDS_LOGROUND: \"RoundsMode-LogRound\",\n    ROUNDS_EDITROUND: \"RoundsMode-EditRound\",\n    COURSES: \"CoursesMode\",\n    COURSES_NEARBY: \"CoursesMode-Nearby\",\n    COURSES_ALL: \"CoursesMode-All\",\n    COURSES_ADD: \"CoursesMode-ADD\",\n    COURSES_APPT: \"CourseMode-APPT\",\n    COURSES_MYAPPT: \"CourseMode-MYAPPT\"\n\n};\n\nObject.freeze(AppMode); //This ensures that the object is immutable.\n\nexport default AppMode;","import React from 'react';\nimport AppMode from '../AppMode';\n\nclass NavBar extends React.Component {\n\n  getMenuBtnIcon = () => {\n      if (this.props.mode === AppMode.COURSES_ADD || \n          this.props.mode === AppMode.ROUNDS_LOGROUND || \n          this.props.mode === AppMode.ROUNDS_EDITROUND)\n          return \"fa fa-arrow-left\";\n      if (this.props.menuOpen)\n        return \"fa fa-times\";\n      return \"fa fa-bars\";\n  }\n\n  handleMenuBtnClick = () => {\n    if (this.props.mode === AppMode.ROUNDS_LOGROUND ||\n        this.props.mode === AppMode.ROUNDS_EDITROUND) {\n      this.props.changeMode(AppMode.ROUNDS);\n    } else if (this.props.mode === AppMode.COURSES_ADD) {\n      this.props.changeMode(AppMode.COURSES);\n    } \n    else if (this.props.mode !== AppMode.LOGIN) {\n      this.props.toggleMenuOpen();\n    }\n  }\n\n    \n  render() {\n    return (\n    <div className={\"navbar\" + (this.props.aboutOpen ? \" ignore-click\":\"\")}>  \n    <span className=\"navbar-items\">\n      <button className=\"sidemenu-btn\" onClick={this.handleMenuBtnClick}>\n        <span id=\"menuBtnIcon\" className={\"sidemenu-btn-icon \" + this.getMenuBtnIcon()}>\n        </span>\n      </button>\n      <img src=\"http://tiny.cc/sslogo\" alt=\"Speed Score Logo\" height=\"38px\"\n      width=\"38px\" />\n      <span className=\"navbar-title\">\n        &nbsp;{this.props.title}\n      </span>\n    </span>\n  </div>\n); \n}\n}\n\nexport default NavBar;\n","import React from 'react';\nimport AppMode from './../AppMode.js'\nimport App from './App.js';\n\nclass SideMenu extends React.Component {\n\n//renderModeItems -- Renders correct subset of mode menu items based on\n//current mode, which is stored in this.prop.mode. Uses switch statement to\n//determine mode.\nrenderModeMenuItems = () => {\n  switch (this.props.mode) {\n    case AppMode.FEED:\n      return(\n        <div>\n        <a className=\"sidemenu-item\">\n            <span className=\"fa fa-users\"></span>&nbsp;Followed Users</a>\n        <a className=\"sidemenu-item \">\n            <span className=\"fa fa-search\"></span>&nbsp;Search Feed</a>\n        </div>\n      );\n    break;\n    case AppMode.ROUNDS:\n      return(\n        <div>\n          <a className=\"sidemenu-item\">\n            <span className=\"fa fa-plus\"></span>&nbsp;Log New Round</a>\n          <a className=\"sidemenu-item\">\n            <span className=\"fa fa-search\"></span>&nbsp;Search Rounds</a>\n        </div>\n      );\n    break;\n    case AppMode.COURSES:\n    case AppMode.COURSES_NEARBY:\n    case AppMode.COURSES_ALL:\n    case AppMode.COURSES_ADD:\n    case AppMode.COURSES_MYAPPT:\n    case AppMode.COURSES_APPT:\n      return(\n        <div>\n        <a id=\"specificCourse\" className=\"sidemenu-item\" onClick={() => this.props.changeMode(AppMode.COURSES)}>\n            <span className=\"fa fa-search\"></span>&nbsp;Specific Course</a>\n        <a className=\"sidemenu-item\" onClick={() => this.props.changeMode(AppMode.COURSES_NEARBY)}>\n            <span className=\"fa fa-map-marker\"></span>&nbsp;Nearby Courses</a>\n        <a className=\"sidemenu-item\" onClick={() => this.props.changeMode(AppMode.COURSES_ALL)}>\n            <span className=\"fa fa-th-list\"></span>&nbsp;All Speedgolf-Friendly Courses</a>\n        <a id=\"myAppointments\" className=\"sidemenu-item\" onClick={() => this.props.changeMode(AppMode.COURSES_MYAPPT)}>\n            <span className=\"fa fa-th-list\"></span>&nbsp;My Appointments</a>\n        {this.props.type === \"operator\" ? <a id=\"addCourse\" className=\"sidemenu-item\" onClick={() => this.props.changeMode(AppMode.COURSES_ADD)}>\n            <span className=\"fa fa-plus\"></span>&nbsp;Add a Course</a> : null}\n        {this.props.type === \"operator\" ? <a id=\"allAppointments\" className=\"sidemenu-item\" onClick={() => this.props.changeMode(AppMode.COURSES_APPT)}>\n            <span className=\"fa fa-eye\"></span>&nbsp;View all Appointments</a> : null}\n        </div>\n      );\n    default:\n        return null;\n    }\n}\n\n    render() {\n       return (\n        <div className={\"sidemenu \" + (this.props.menuOpen ? \"sidemenu-open\" : \"sidemenu-closed\")}\n             onClick={this.props.toggleMenuOpen}>\n          {/* SIDE MENU TITLE */}\n          <div className=\"sidemenu-title\">\n            <img src={this.props.profilePicURL} height='60' width='60' />\n            <span id=\"userID\" className=\"sidemenu-userID\">&nbsp;{this.props.displayName}</span>\n        </div>\n          {/* MENU CONTENT */}\n          {this.renderModeMenuItems()}\n          {/* The following menu items are present regardless of mode */}\n          {this.props.localAccount ? \n            <a id=\"accountBtn\" className=\"sidemenu-item\" onClick={this.props.editAccount}>\n              <span className=\"fa fa-user\"></span>&nbsp;Account</a> : null}\n          <a id=\"addCardbtn\" className=\"sidemenu-item\" onClick={this.props.toggleAddCardClicked}>\n            <span className=\"fa fa-plus\"></span>&nbsp;Add Card</a>\n          <a id=\"aboutBtn\" className=\"sidemenu-item\" onClick={this.props.showAbout}>\n            <span className=\"fa fa-info-circle\"></span>&nbsp;About</a>\n          <a id=\"logOutBtn\" className=\"sidemenu-item\" onClick={this.props.logOut}>\n            <span className=\"fa fa-sign-out-alt\"></span>&nbsp;Log Out</a>\n        </div>\n       );\n    }\n}\n\nexport default SideMenu;\n","import React from 'react';\nimport AppMode from '../AppMode.js';\n\n\nclass ModeBar extends React.Component {\n    render() {\n      return(\n        <div className={\"modebar\" + (this.props.mode === AppMode.LOGIN ? \n          \" invisible\" : (this.props.menuOpen || this.props.aboutOpen ? \" ignore-click visible\" : \" visible\"))}>\n        <a className={(this.props.mode === AppMode.FEED ? \" item-selected\" : null)}\n            onClick={()=>this.props.changeMode(AppMode.FEED)}>\n          <span className=\"modebaricon fa fa-th-list\"></span>\n          <span className=\"modebar-text\">Feed</span>\n        </a>\n        <a className={(this.props.mode === AppMode.ROUNDS || \n               this.props.mode === AppMode.ROUNDS_EDITROUND || \n               this.props.mode === AppMode.ROUNDS_LOGROUND ? \n                  \" item-selected\" : null)}\n           onClick={()=>this.props.changeMode(AppMode.ROUNDS)}>\n          <span className=\"modebar-icon  fa fa-history\"></span>\n          <span className=\"modebar-text\">Rounds</span>\n        </a>\n        <a id=\"courseMode\" className={((this.props.mode === AppMode.COURSES) || \n        (this.props.mode === AppMode.COURSES_NEARBY) || \n        (this.props.mode === AppMode.COURSES_ALL) ? \" item-selected\" : null)}\n          onClick={()=>this.props.changeMode(AppMode.COURSES)}>\n          <span className=\"modebar-icon  fa fa-flag\"></span>\n          <span className=\"modebar-text\">Courses</span>\n        </a> \n        </div>\n      );\n    }\n}\n\nexport default ModeBar;\n","import React from 'react';\n\nclass ConfirmDeleteAccount extends React.Component {\n    constructor() {\n        super();\n        this.emailRef = React.createRef();\n        this.state = {emailMatches: false};\n    }\n    \n    componentDidMount() {\n        this.emailRef.current.focus();\n    }\n\n    handleChange = () => {\n        const match = (this.emailRef.current.value === this.props.email);\n        if (match != this.state.emailMatches) {\n            this.setState({emailMatches: match});\n        }\n    }\n\n    render() {\n        return (\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\n        <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <center>\n                <h3 className=\"modal-title\"><b>Confirm Account Deletion</b></h3>\n              </center>\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\n                 &times;</button>\n            </div>\n            <div className=\"modal-body\">\n              <p>Do you really want to delete your account? <br />\n                 <i>This action cannot be undone.</i></p>\n              <label>\n                Confirm Email ({this.props.email}):\n                <br/>\n                <input \n                    className=\"form-center\"\n                    type=\"text\"\n                    ref={this.emailRef}\n                    onChange={this.handleChange} />\n                </label>\n                <br />\n            </div>\n            <div className=\"modal-footer\">\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteAccount} disabled={!this.state.emailMatches}>\n                  Yes, Delete My Account</button>\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\n                  No, Cancel</button>\n            </div>\n        </div>\n        </div>\n        );\n    }\n}\n\nexport default ConfirmDeleteAccount;","import React from 'react';\nimport ConfirmDeleteAccount from './ConfirmDeleteAccount.js';\nimport { async } from 'regenerator-runtime';\n\nclass CreateEditAccountDialog extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.origAccountInfo = null;\n        //Create a ref for the email input DOM element\n        this.newUserRef = React.createRef();\n        this.repeatPassRef = React.createRef();\n        this.profilePicRef = React.createRef();\n        this.state = {\n                    type: \"user\",\n                    accountName: \"\",\n                    displayName: \"\",\n                    profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\n                    password: \"\",\n                    passwordRepeat: \"\",\n                    securityQuestion: \"\",\n                    securityAnswer: \"\",\n                    formUpdated: false,\n                    confirmDelete: false};\n    } \n\n    //componentDidMount -- If we are editing an existing user acccount, we need to grab the data from\n    //the database and push them into the state.\n    async componentDidMount() {\n        if (!this.props.create) {\n            //obtain current user data from database and push into state\n            const url = \"/users/\" + this.props.userId;\n            const res = await fetch(url);\n            const json = await res.json();\n            const userData = JSON.parse(json);\n            this.origAccountInfo = userData; //This determines whether update can occur\n            this.origAccountInfo.passwordRepeat = userData.password;\n            this.setState({\n                        type: this.props.type,\n                        accountName: this.props.userId,\n                        displayName: userData.displayName,\n                        profilePicURL: userData.profilePicURL,\n                        password: userData.password,\n                        passwordRepeat: userData.password,\n                        securityQuestion: userData.securityQuestion,\n                        securityAnswer: userData.securityAnswer});\n        }\n    }\n\n    //checkDataValidity -- Callback function invoked after a form element in\n    //the 'Create Account' dialog box changes and component state has been\n    //updated. We first check whether the passwords match. If they do not, \n    //we set a custom validity message to be displayed when the user clicks the\n    //'Create Account' button. Otherwise, we reset the custom validity message\n    //to empty so that it will NOT fire when the user clicks 'Create Account'.\n    //Second, we check whether anything in the form changed from the original.\n    //If so, we update the 'formUpdated' state var, so that the form's submit\n    //button is enabled.\n    checkDataValidity = () => {\n        if (this.state.password != this.state.passwordRepeat) {\n            //Passwords don't match\n            this.repeatPassRef.current.setCustomValidity(\n            \"This password must match password entered in previous field.\");\n        } else {\n            this.repeatPassRef.current.setCustomValidity(\"\");\n        }\n    }\n\n    //handleChange--Called when a field in a dialog box form changes.\n    handleChange = (event) => {\n        const formUpdated = (this.origAccountInfo == null ? true : this.formIsUpdated(event.target.name,event.target.value));\n        if (event.target.name === \"profilePic\") {\n            if (event.target.value.length == 0) { //The user canceled the file selection -- set back to default\n                this.setState({profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\n                               formUpdated: formUpdated},\n                               this.checkDataValidity);\n            } else { //The user selected a file\n                const self = this;\n                const reader = new FileReader();\n                reader.readAsDataURL(this.profilePicRef.current.files[0]);\n                reader.addEventListener(\"load\",function() {\n                    self.setState({profilePicURL:  this.result,\n                                   formUpdated: formUpdated},this.checkDataValidity);\n                });\n                \n            }\n        } else {\n            this.setState({[event.target.name]: event.target.value,\n                           formUpdated: formUpdated},this.checkDataValidity);\n        }\n    } \n\n    //formisUpdated-- Checks whether any form data element has changed from the original. If so, \n    //returns true. Returns false otherwise. Note that in case of editing new account, always returns\n    //true since this.origAccountInfo is set to null.\n    //Should be called whenever the user makes a change to form data.\n    formIsUpdated = (updateField,updateVal) => {\n        if (this.origAccountInfo[updateField] != updateVal) {return true;}\n        if (updateField != \"type\" && \n             this.state.type != this.origAccountInfo.type) \n             {return true;}\n        if (updateField != \"displayName\" && \n             this.state.displayName != this.origAccountInfo.displayName) \n             {return true;}\n        if (updateField != \"profilePicURL\" && \n             this.state.profilePicURL != this.origAccountInfo.profilePicURL) \n             {return true;}\n        if (updateField != \"password\" &&\n            this.state.password !== this.origAccountInfo.password)\n            {return true;}\n        if (updateField != \"passwordRepeat\" &&\n            this.state.passwordRepeat !== this.origAccountInfo.passwordRepeat)\n            {return true;}\n        if (updateField != \"securityQuestion\" &&\n            this.state.securityQuestion !== this.origAccountInfo.securityQuestion)\n            {return true;}\n        if (updateField != \"securityAnswer\" &&\n            this.state.securityAnswer !== this.origAccountInfo.securityAnswer)\n            {return true;}\n        return false;\n    }\n\n    //setDefaultDisplayName -- Triggered by onBlur() event of Email field.\n    //Sets default value of display name to value entered into Email field \n    //as a courtesy.\n    setDefaultDisplayName = (event) => {\n      if (event.target.value.length > 0 && this.state.displayName === \"\") {\n        this.setState({displayName: event.target.value});\n      }\n    }\n\n    //handleSubmit -- Triggered when user clicks on submit button to\n    //either create or edit account.\n    //Custom data checking ensures user account under this email does not \n    //already exist and that the rest of the info is valid. We create a new  \n    // object for user, save it to localStorage and take user to app's \n    //landing page. \n    handleSubmit = async(event) => {\n        event.preventDefault();\n        //Initialize user account\n        let userData = {\n            type: this.state.type,\n            displayName: this.state.displayName,\n            password: this.state.password,\n            profilePicURL: this.state.profilePicURL,\n            securityQuestion: this.state.securityQuestion,\n            securityAnswer: this.state.securityAnswer\n        };\n        const url = '/users/' + this.state.accountName;\n        let res;\n        if (this.props.create) { //use POST route to create new user account\n            res = await fetch(url, {\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                    },\n                method: 'POST',\n                body: JSON.stringify(userData)}); \n            if (res.status == 200) { //successful account creation!\n                this.props.done(\"New account created! Enter credentials to log in.\",false);\n            } else { //Unsuccessful account creation\n                //Grab textual error message\n                const resText = await res.text();\n                this.props.done(resText,false);\n            }\n        } else { //use PUT route to update existing user account\n            res = await fetch(url, {\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                    },\n                method: 'PUT',\n                body: JSON.stringify(userData)}); \n            if (res.status == 200) { //successful account creation!\n                this.props.done(\"User Account Updated!\",false);\n            } else { //Unsuccessful account update\n                //Grab textual error message\n                const resText = await res.text();\n                this.props.done(resText,false);\n            }\n        }\n    }\n\n    //deleteAccount -- Called after confirms account deletion. \n    //Uses DELETE server route to perform server deletion. \n    //Calls on done with status message and\n    //true if delete was succesful, false otherwise.\n    deleteAccount = async() => {\n       const url = '/users/' + this.state.accountName;\n       const res = await fetch(url, \n                    {method: 'DELETE'}); \n        if (res.status == 200) { //successful account deletion!\n            this.props.done(\"Account '\" + this.state.accountName + \"' has been deleted.\",true);\n        } else { //Unsuccessful account deletion\n            //Grab textual error message\n            const resText = await res.text();\n            this.props.done(resText,false);\n        }\n        this.setState({confirmDelete: false});\n    }\n\n    //confirmDeleteAccount -- Called when user clicks on \"Delete Account...\"\n    //button to indicate intention to delete account. Presents the Confirm\n    //Delete dialog box.\n    confirmDeleteAccount = (e) => {\n        e.preventDefault();\n        this.setState({confirmDelete: true});\n    }\n\n    render() {\n    return (  \n    <div className=\"modal\" role=\"dialog\">\n    <div className=\"modal-dialog modal-lg\"></div>\n        <div className=\"modal-content form-center\">\n            <div className=\"modal-header\">\n              <h3><b>{this.props.create ? \"Create New Account\" : \"Edit Account\"}</b></h3>\n              <button className=\"modal-close\" \n                       onClick={this.props.cancel}>\n                &times;</button>\n            </div>\n            <div className=\"modal-body\">\n            <form onSubmit={this.handleSubmit}>\n            <label>\n                Type:\n                <select name=\"type\" value={this.state.type} \n                    className=\"form-control form-center\" onChange={this.handleChange}>\n                    <option value=\"user\">User</option>\n                    <option value=\"operator\">Operator</option>\n                </select> \n            </label>\n            <br/>\n            <label>\n                Email: \n                <input  \n                autocomplete=\"off\"\n                disabled={!this.props.create}\n                className=\"form-control form-text form-center\"\n                name=\"accountName\"\n                type=\"email\"\n                size=\"35\"\n                placeholder=\"Enter Email Address\"\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\n                required={true}\n                ref={this.newUserRef}\n                value={this.state.accountName}\n                onChange={this.handleChange}\n                onBlur={this.setDefaultDisplayName}\n                />\n            </label>\n            <br/>\n            <label>\n                Password:\n                <input\n                autocomplete=\"off\"\n                className=\"form-control form-text form-center\"\n                name=\"password\"\n                type=\"password\"\n                size=\"35\"\n                placeholder=\"Enter Password\"\n                pattern=\n                \"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\n                required={true}\n                value={this.state.password}\n                onChange={this.handleChange}\n                />\n            </label>\n            <br/>\n            <label>\n                Repeat Password:\n                <input\n                className=\"form-control form-text form-center\"\n                name=\"passwordRepeat\"\n                type=\"password\"\n                size=\"35\"\n                placeholder=\"Repeat Password\"\n                required={true}\n                ref={this.repeatPassRef}\n                value={this.state.passwordRepeat}\n                onChange={this.handleChange}\n                />\n            </label>\n            <br/>\n            <label>\n                Display Name:\n                <input\n                className=\"form-control form-text form-center\"\n                name=\"displayName\"\n                type=\"text\"\n                size=\"30\"\n                placeholder=\"Display Name\"\n                required={true}\n                value={this.state.displayName}\n                onChange={this.handleChange}\n                />\n            </label>\n            <br/>\n            <label>\n                Profile Picture:<br/>\n                <input\n                className=\"form-control form-text form-center\"\n                name=\"profilePic\"\n                type=\"file\"\n                accept=\"image/x-png,image/gif,image/jpeg\" \n                ref={this.profilePicRef}\n                value={this.state.profilePic}\n                onChange={this.handleChange}\n                />\n                <img src={this.state.profilePicURL != \"\" ? \n                            this.state.profilePicURL :\n                            this.state.profilePicDataURL} \n                        height=\"60\" width=\"60\" \n                 />\n            </label> \n            <br/>\n            <label>\n                Security Question:\n                <textarea\n                className=\"form-control form-text form-center\"\n                name=\"securityQuestion\"\n                size=\"35\"\n                placeholder=\"Security Question\"\n                rows=\"2\"\n                cols=\"35\"\n                maxLength=\"100\"\n                required={true}\n                value={this.state.securityQuestion}\n                onChange={this.handleChange}\n                />\n            </label>\n            <br/>\n            <label>\n                Answer to Security Question:\n                <textarea\n                className=\"form-control form-text form-center\"\n                name=\"securityAnswer\"\n                type=\"text\"\n                placeholder=\"Answer\"\n                rows=\"2\"\n                cols=\"35\"\n                maxLength=\"100\"\n                required={true}\n                value={this.state.securityAnswer}\n                onChange={this.handleChange}\n                />\n            </label>\n            <br/>\n            {!this.props.create ?  \n            <button className=\"btn btn-small btn-danger\" onClick={this.confirmDeleteAccount}>\n                Delete Account...\n            </button> : null}\n            <br/><br/>\n            {!this.props.create ?  \n            <button type=\"button\" className=\"btn btn-small btn-primary\" onClick={this.toggleAddCardClicked} disabled={this.state.card === 1 ? true:false}>\n                Add Card\n            </button> : null}\n            <br/><br/>\n            <button role=\"submit\" \n                disabled={!this.state.formUpdated}\n                className=\"btn btn-primary btn-color-theme modal-submit-btn\">\n                <span className={this.props.create ? \"fa fa-user-plus\" : \"fa fa-user\"}></span>\n                &nbsp;{this.props.create ? \"Create Account\" : \"Update Account\"}\n            </button>\n            </form>\n            </div>\n        </div>\n        {this.state.confirmDelete ? \n          <ConfirmDeleteAccount email={this.state.accountName}\n                                deleteAccount={this.deleteAccount}\n                                close={() => (this.setState({confirmDelete: false}))}\n         /> : null}\n    </div>\n    );\n}\n}\n\nexport default CreateEditAccountDialog;","import React from 'react'\n\nclass ResetPasswordDialog extends React.Component {\n    constructor() {\n        super();\n        this.resetPasswordRef = React.createRef();\n        this.resetPasswordRepeatRef = React.createRef();\n        this.state = {errorMsg: \"\"};\n    }\n\n    //handleSubmit -- When the user submits the form, ensure that the passwords match.\n    //If so, call on resetPassword in parent component to actually reset the password.\n    //Otherwise, display an error message prompting the user to try again.\n    handleSubmit= (event) => {\n        event.preventDefault();\n        if (this.resetPasswordRef.current.value === this.resetPasswordRepeatRef.current.value) {\n            this.props.resetPassword(this.resetPasswordRef.current.value);\n        } else {\n            this.resetPasswordRepeatRef.current.focus();\n            this.setState({errorMsg: \"The passwords you entered do not match. Please try again.\"});\n        }\n    }\n\n    checkForSubmit = (e) => {\n        if (e.code === \"Enter\") {\n            e.preventDefault();\n            this.handleSubmit();\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"modal\" role=\"dialog\">\n              <div className=\"modal-dialog modal-lg\">\n                <div className=\"modal-content\">\n                  <div className=\"modal-header\">\n                    <h3 className=\"modal-title\"><b>Reset Password</b>\n                    </h3>\n                    <button className=\"modal-close\" \n                        onClick={this.props.cancelResetPassword}>\n                        &times;\n                    </button>\n                  </div>\n                  <div className=\"modal-body\">\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \n                    <form onSubmit={this.handleSubmit}>\n                    <label>\n                        New Password: \n                        <input\n                        type=\"password\"\n                        placeholder=\"Enter new password\"\n                pattern=\"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\n                        className=\"form-control form-text\"\n                        ref={this.resetPasswordRef}\n                        />\n                    </label>\n                    <label>\n                        Repeat New Password: \n                        <input\n                        type=\"password\"\n                        placeholder=\"Repeat new password\"\n                        className=\"form-control form-text\"\n                        onKeyUp={this.checkForSubmit}\n                        ref={this.resetPasswordRepeatRef}\n                        />\n                    </label>\n                    <button role=\"submit\" \n                     className=\"btn btn-primary btn-color-theme form-submit-btn\">\n                        <span className=\"fa fa-key\"></span>&nbsp;Reset Password\n                    </button>\n                    </form>\n                </div>\n              </div>\n            </div>\n          </div>\n          );\n        \n    }\n}\n\nexport default ResetPasswordDialog;","import React from 'react';\nimport AppMode from '../AppMode.js';\n\nclass LookUpAccountDialog extends React.Component {\n\n    constructor() {\n        super();\n        this.emailRef = React.createRef();\n        this.state = {errorMsg: \"\"};\n    }\n\n    //handleLookUpAccount: When the user clicks on the \"Look Up Account\" dialog box\n    //button, we check whether the account exists. If it does, we update the state,\n    //setting the resetEmail var to the email entered, hiding the current dialog box\n    //and showing the security question dialog box.\n    handleLookUpAccount = async(event) => {\n        event.preventDefault();\n        let response = await fetch(\"/users/\" + this.emailRef.current.value);\n        if (response.status == 200) {\n            const json = await response.json();\n            const obj = JSON.parse(json);\n            if (obj.authStrategy === \"local\") {\n                this.props.getSecurityAnswer(obj.id,obj.securityQuestion, obj.securityAnswer);\n            } else { //Account exists but was created through OAuth so password can't be reset \n                this.setState({ErrMsg: \"That account is authenticated through \" + obj.authStrategy + \". \" +\n                               \"Please log in to \" + obj.authStrategy + \" to reset the password.\"});\n            }\n        } else {\n            this.setState({errorMsg: \"Sorry, there is no account associated with '\" + this.emailRef.current.value + \"'.\"});\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"modal\" role=\"dialog\">\n              <div className=\"modal-dialog modal-lg\">\n                <div className=\"modal-content\">\n                  <div className=\"modal-header\">\n                    <h3 className=\"modal-title\"><b>Look Up Account</b></h3>\n                    <button className=\"modal-close\" \n                        onClick={() => {this.props.cancelResetPassword()}}>\n                        &times;\n                    </button>\n                  </div>\n                  <div className=\"modal-body\">\n                    {this.state.errMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null}\n                    <form onSubmit={this.handleLookUpAccount}>\n                    <label>\n                        Account Email Address: \n                        <input\n                        ref={this.emailRef}\n                        className=\"form-control form-text\"\n                        type=\"email\"\n                        size=\"35\"\n                        placeholder=\"Enter Email Address\"\n                        pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\n                        ref={this.emailRef}\n                        required={true}\n                        />\n                    </label>\n                    <button type=\"submit\" \n                        className=\"btn btn-primary btn-color-theme form-submit-btn\">\n                        <span className=\"fa fa-search\"></span>&nbsp;Look Up Account\n                    </button>\n                    </form>\n                </div>\n              </div>\n            </div>\n          </div>  \n        );   \n    }\n\n}\n\nexport default LookUpAccountDialog;\n","import React from 'react';\n\nclass SecurityQuestionDialog extends React.Component {\n    constructor() {\n        super();\n        this.securityAnswerRef = React.createRef();\n        this.state = {errorMsg: \"\"};\n    }\n\n    //Focus cursor in email secrity answer field when mounted\n    componentDidMount() {\n        this.securityAnswerRef.current.focus();\n    }  \n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        if (this.securityAnswerRef.current.value === this.props.answer) {\n            this.props.getNewPassword();\n        } else {\n            this.securityAnswerRef.current.focus();\n            this.setState({errorMsg: \"Sorry, that is not the correct answer to the security question. Try again.\"});\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"modal\" role=\"dialog\">\n              <div className=\"modal-dialog modal-lg\">\n                <div className=\"modal-content\">\n                  <div className=\"modal-header\">\n                    <h3 className=\"modal-title\"><b>Answer Security Question</b>\n                    </h3>\n                    <button className=\"modal-close\" \n                        onClick={this.props.cancelResetPassword}>\n                        &times;\n                    </button>\n                  </div>\n                  <div className=\"modal-body\">\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \n                    <form onSubmit={this.handleSubmit}>\n                    <label>\n                        Security Question: \n                        <textarea\n                        readOnly={true}\n                        value={this.props.question}\n                        className=\"form-control form-text\"\n                        rows=\"3\"\n                        cols=\"35\"\n                        />\n                    </label>\n                    <label>\n                        Security Answer: \n                        <textarea\n                        className=\"form-control form-text\"\n                        placeholder=\"Enter Security Question Answer\"\n                        ref={this.securityAnswerRef}\n                        rows=\"3\"\n                        cols=\"35\"\n                        />\n                    </label>\n                    <button role=\"submit\" \n                      className=\"btn btn-primary btn-color-theme form-submit-btn\">\n                        <span className=\"fa fa-check\"></span>&nbsp;Verify Answer\n                    </button>\n                    </form>\n                </div>\n              </div>\n            </div>\n          </div>\n          );        \n    }\n}\n export default SecurityQuestionDialog;","import React from 'react';\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js';\nimport ResetPasswordDialog from './ResetPasswordDialog.js';\nimport LookUpAccountDialog from './LookUpAccountDialog.js';\nimport SecurityQuestionDialog from './SecurityQuestionDialog.js';\n\nclass LoginPage extends React.Component {\n\nconstructor() {\n    super();\n    //Create a ref for the email input DOM element\n    this.emailInputRef = React.createRef();\n    this.resetUserId = \"\";\n    this.resetQ = \"\";\n    this.resetA = \"\";\n    this.passwordInputRef = React.createRef();\n    this.state = {statusMsg: \"\",\n                  loginBtnIcon: \"fa fa-sign-in\",\n                  loginBtnLabel: \"Log In\",\n                  showLookUpAccountDialog: false,\n                  showSecurityQuestionDialog: false,\n                  showResetPaswordDialog: false,\n                  githubIcon: \"fa fa-github\",\n                  githubLabel: \"Sign in with GitHub\",\n                  loginMsg: \"\",\n                  newAccountCreated: false,\n                  googleIcon: \"fa fa-google\",\n                  googleLabel: \"Sign in with Google\"\n                  };\n} \n    \n//Focus cursor in email input field when mounted\ncomponentDidMount() {\n    this.emailInputRef.current.focus();\n}  \n\n//handleLoginSubmit -- Called when user clicks on login button.\nhandleLoginSubmit = async (event) => {\n    event.preventDefault();\n    this.setState({loginBtnIcon: \"fa fa-spin fa-spinner\",\n                   loginBtnLabel: \"Logging In...\"});\n    const url = \"auth/login?username=\" + this.emailInputRef.current.value +\n                \"&password=\" + this.passwordInputRef.current.value;\n    const res = await fetch(url, {method: 'POST'}); \n    if (res.status == 200) { //successful login!\n        window.open(\"/\",\"_self\");\n    } else { //Unsuccessful login\n      const resText = await res.text();\n      this.setState({loginBtnIcon: \"fa fa-sign-in\",\n                     loginBtnLabel: \"Log In\",\n                     statusMsg: resText});\n    }\n}\n\n  //accountCreateDone -- Called by child CreateAccountDialog component when \n  //user attempted to create new account. Hide the dialog and display \n  //a message indicating result of the attempt.\n  accountCreateDone = (msg) => {\n      this.setState({statusMsg: msg,\n                     showCreateAccountDialog: false});\n  }\n\n  //cancelCreateAccount -- Called by child CreateAccountDialog componenet when user decides\n  //to cancel creation of new account by clicking the \"X\" in top-right of dialog.\n  cancelCreateAccount = () => {\n      this.setState({showCreateAccountDialog: false});\n  }\n\n//cancelResetPassword -- Called by one of the child three child dialog box components when\n//the user decides to cancel resetting their password. Toggles state so that all three\n//of the dialog boxes are hidden\ncancelResetPassword = () => {\n    this.resetUserId = \"\";\n    this.resetQ = \"\";\n    this.resetA = \"\";\n    this.setState({showLookUpAccountDialog: false,\n                   showSecurityQuestionDialog: false,\n                   showResetPaswordDialog: false});             \n}\n\n//handleOAuthLogin -- Callback function that initiates contact with OAuth\n//provider\nhandleOAuthLogin = (provider) => {\n    window.open(`/auth/${provider}`,\"_self\");\n}\n\n//handleOAuthLoginClick -- Called whent the user clicks on button to\n//authenticate via a third-party OAuth service. The name of the provider is\n//passed in as a parameter.\nhandleOAuthLoginClick = (provider) => {\n   this.setState({[provider + \"Icon\"] : \"fa fa-spin fa-spinner\",\n                  [provider + \"Label\"] : \"Connecting...\"});\n   setTimeout(() => this.handleOAuthLogin(provider),1000);\n}\n\n//getSecurityAnswer: Given the id, security question, and security answer obtained\n//from the LookUpAccountDialog component, update state such that the user will\n//next be prompted to enter security question and answer for verification\ngetSecurityAnswer = (userId, question, answer) => {\n    this.resetUserId = userId;\n    this.resetQ = question;\n    this.resetA = answer;\n    this.setState({showLookUpAccountDialog: false,\n                   showSecurityQuestionDialog: true\n                });\n}\n\n//getNewPassword-- Called after user successfully provides correct answer\n//to security question. Presents the \"Reset Password\" dialog box.\ngetNewPassword = () => {\n    this.setState({showSecurityQuestionDialog: false,\n                    showResetPaswordDialog: true});\n}\n\n//resetPassword--Called after the user successfully enters a new (acceptable)\n//password. pw contains the new password. Call on the Update (PUT) server\n//route to update the user's password in the database.\nresetPassword = async(pw) => {\n    const url = \"/users/\" + this.resetUserId;\n    const res = await fetch(url, {\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n            },\n        method: 'PUT',\n        body: JSON.stringify({password: pw})}); \n    if (res.status == 200) { //successful update creation!\n        this.setState({showResetPaswordDialog: false,\n                       statusMsg: \"Password successfully reset!\"});\n    } else { //Unsuccessful account creation\n        //Grab textual error message\n        const resText = await res.text();\n        this.setState({showResetPasswordDialog: false,\n                      statusMsg: resText});\n    }\n    \n}\n\n//newAccountCreated -- Called after successful creation of a new account\naccountCreateDone = (msg,deleted) => {\n    this.setState({statusMsg: msg,\n                   showCreateAccountDialog: false});\n}\n\n//closeStatusMsg -- Called when user clicks on \"x\" to dismiss status message\ncloseStatusMsg = () => {\n    this.setState({statusMsg: \"\"});\n}\n\n//cancelCreateAccount -- called to hide Create Account dialog without creating acct\ncancelCreateAccount = () => {\n    this.setState({showCreateAccountDialog: false});\n}\n\n  render() {\n    return(\n        <div>\n        <center>\n        {this.state.statusMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.statusMsg}</span>\n                       <button className=\"modal-close\" onClick={this.closeStatusMsg}>\n                          <span className=\"fa fa-times\"></span>\n                        </button></div>: null}\n            {this.state.showLookUpAccountDialog ? \n              <LookUpAccountDialog cancelResetPassword={this.cancelResetPassword}\n                                   getSecurityAnswer={this.getSecurityAnswer}/> : null}\n            {this.state.showSecurityQuestionDialog ? \n               <SecurityQuestionDialog cancelResetPassword={this.cancelResetPassword}\n                                       question={this.resetQ}\n                                       answer={this.resetA}\n                                       getNewPassword={this.getNewPassword}/> : null}\n            {this.state.showResetPaswordDialog ? \n              <ResetPasswordDialog cancelResetPassword={this.cancelResetPassword}\n                                   resetPassword={this.resetPassword} /> : null}\n            <form id=\"loginInterface\" onSubmit={this.handleLoginSubmit}>\n            <label htmlFor=\"emailInput\" style={{ padding: 0, fontSize: 24 }}>\n                Email:\n                <input\n                ref={this.emailInputRef}\n                className=\"form-control login-text\"\n                type=\"email\"\n                placeholder=\"Enter Email Address\"\n                id=\"emailInput\"\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\n                required={true}\n                />\n            </label>\n            <p />\n            <label htmlFor=\"passwordInput\" style={{ padding: 0, fontSize: 24 }}>\n                Password:\n                <input\n                ref={this.passwordInputRef}\n                className=\"form-control login-text\"\n                type=\"password\"\n                id=\"passwordInput\"\n                placeholder=\"Enter Password\"\n                pattern=\"[A-Za-z0-9!@#$%^&*()_+\\-]+\"\n                required={true}\n                />\n            </label>\n            <p className=\"bg-danger\" id=\"feedback\" style={{ fontSize: 16 }} />\n            <button\n                type=\"submit\"\n                className=\"btn-color-theme btn btn-primary btn-block login-btn\">\n                <span id=\"login-btn-icon\" className={this.state.loginBtnIcon}/>\n                &nbsp;{this.state.loginBtnLabel}\n            </button>\n            <p>\n            <button type=\"button\" className=\"btn btn-link login-link\" \n                    onClick={() => {this.setState({showCreateAccountDialog: true});}}>\n                Create an account</button> | \n                <button type=\"button\" className=\"btn btn-link login-link\"\n                        onClick={() => {this.setState({showLookUpAccountDialog: true});}}>\n                Reset your password</button>\n            </p>  \n            <button id=\"github-login-btn\" type=\"button\" className=\"btn btn-github\"\n               onClick={() => this.handleOAuthLoginClick(\"github\")}>\n              <span className={this.state.githubIcon}></span>&nbsp;\n                {this.state.githubLabel}\n            </button>\n            <button id=\"google-login-btn\" type=\"button\" className=\"btn btn-google\"\n               onClick={() => this.handleOAuthLoginClick(\"google\")}>\n              <span className={this.state.googleIcon}></span>&nbsp;\n                {this.state.googleLabel}\n            </button>\n            <p>\n                <i>Version CptS 489</i>\n            </p>\n            </form>\n            {this.state.showCreateAccountDialog ? \n              <CreateEditAccountDialog\n                create={true} \n                done={this.accountCreateDone}\n                cancel={this.cancelCreateAccount} /> : null}\n            {this.state.showResetPasswordDialog ? <ResetPasswordDialog /> : null}\n        </center>\n        </div>\n        )\n    }\n} \n\nexport default LoginPage;\n","import React from 'react';\nimport { Navbar, Container, Row, Col, Card, Button, Modal } from \"react-bootstrap\";\n\nclass FeedPage extends React.Component {\n\n    // handleClick = (type) => {\n    //     this.props.userObj.type = type;\n    //     this.props.setUserObjType(this.props.userObj);\n    // }\n\n\n    render() {\n        return (\n        <div id=\"feedMode\" className=\"padded-page\">\n            <center>\n            {/* {(this.props.userObj.authStrategy === \"google\") || (this.props.userObj.authStrategy === \"github\") ?\n                <div className=\"modal\" role=\"dialog\">\n                    <div className=\"modal-dialog modal-lg\">\n                        <div className=\"modal-content\">\n                            <div className=\"modal-header\">\n                                <h3>What do you want to be?</h3>\n                            </div>\n                            <div className=\"modal-body\">\n                            <Button onClick={() => this.handleClick(\"user\")}>User</Button>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                            <Button onClick={() => this.handleClick(\"operator\")}>Operator</Button>\n                            </div>\n                        </div>\n                    </div>\n                </div> : null} */}\n            <h1 >Activity Feed</h1>\n            <h2>This page is under construction.</h2>\n            <img src=\"https://dl.dropboxusercontent.com/s/qpjhy9x9gwdxpob/SpeedScoreLogo64Trans.png\" \n             height=\"200\" width=\"200\"/>\n            <p style={{fontStyle: \"italic\"}}>Version CptS 489 React Demo</p>\n            </center>\n        </div>\n        );\n    }   \n}\n\nexport default FeedPage;","import React from 'react';\n\nclass ConfirmDeleteRound extends React.Component {\n\n    render() {\n        return (\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\n        <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <center>\n                <h3 className=\"modal-title\"><b>Confirm Round Deletion</b></h3>\n              </center>\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\n                 &times;</button>\n            </div>\n            <div className=\"modal-body\">\n              <p>Do you really want to delete this round?</p>\n            </div>\n            <div className=\"modal-footer\">\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteRound}>\n                  Yes, Delete</button>\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\n                  No, Cancel</button>\n            </div>\n        </div>\n        </div>\n        );\n    }\n}\n\nexport default ConfirmDeleteRound;","import React from 'react';\nimport ConfirmDeleteRound from './ConfirmDeleteRound.js';\nimport AppMode from './../AppMode.js';\n\nclass RoundsTable extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {showConfirmDelete: false};\n  }\n\n  //editRound -- Triggered when the user clicks the edit button for a given\n  //round. The id param is the unique property that identifies the round.\n  //Set the state variable representing the id of the round to be edited and\n  //then switch to the ROUNDS_EDITROUND mode to allow the user to edit the\n  //chosen round.\n  editRound = (id) => {\n    this.props.setEditId(id);\n    this.props.changeMode(AppMode.ROUNDS_EDITROUND);\n  }\n\n  //deleteRound -- Triggered when the user clicks on the \"Yes, Delete\"\n  //button in the Confirm Delete dialog box. It executes the deletion and\n  //closes the dialog box.\n  deleteRound = () => {\n    this.props.deleteRound();\n    this.setState({showConfirmDelete: false});\n  }\n\n\n  //confirmDelete -- Triggered when the user clicks the delete button\n  //for a given round. The id paam is the unique property that \n  //identifies the round. Set the state variable representing the id\n  //of the round to be deleted and then present a dialog box asking\n  //the user to confirm the deletion.\n  confirmDelete = (id) => {\n    this.props.setDeleteId(id);\n    this.setState({showConfirmDelete: true});\n  }\n\n\n  //renderTable -- render an HTML table displaying the rounds logged\n  //by the current user and providing buttons to view/edit and delete each round.\n  renderTable = () => {\n  let table = [];\n  for (let r = 0; r < this.props.rounds.length; ++r) {\n    table.push(\n      <tr key={r}>\n        <td>{this.props.rounds[r].date.substring(0,10)}</td>\n        <td>{this.props.rounds[r].course}</td>\n        <td>{(Number(this.props.rounds[r].strokes) + \n              Number(this.props.rounds[r].minutes)) +\n              \":\" + (this.props.rounds[r].seconds < 10 ?  \n                \"0\" + this.props.rounds[r].seconds :\n                this.props.rounds[r].seconds) + \" (\" + \n              this.props.rounds[r].strokes + \n              \" in \" + this.props.rounds[r].minutes + \":\" + \n              (this.props.rounds[r].seconds < 10 ?  \n                \"0\" + this.props.rounds[r].seconds :\n                this.props.rounds[r].seconds) + \")\"}\n        </td>\n        <td><button onClick={this.props.menuOpen ? null : () => \n          this.editRound(r)}>\n              <span className=\"fa fa-eye\"></span></button></td>\n        <td><button onClick={this.props.menuOpen ? null : \n          () => this.confirmDelete(r)}>\n              <span className=\"fa fa-trash\"></span></button></td>\n      </tr> \n    );\n  }\n  return table;\n  }\n\n  //render--render the entire rounds table with header, displaying a \"No\n  //Rounds Logged\" message in case the table is empty.\n  render() {\n    return(\n    <div className=\"padded-page\">\n      <h1></h1>\n      <table className=\"table table-hover\">\n        <thead className=\"thead-light\">\n        <tr>\n          <th>Date</th>\n          <th>Course</th>\n          <th>Score</th>\n          <th>View/Edit...</th>\n          <th>Delete</th>\n        </tr>\n        </thead>\n        <tbody>\n          {Object.keys(this.props.rounds).length === 0 ? \n          <tr>\n          <td colSpan=\"5\" style={{fontStyle: \"italic\"}}>No rounds logged</td>\n          </tr> : this.renderTable()\n          }\n        </tbody>\n      </table>\n      {this.state.showConfirmDelete ?\n        <ConfirmDeleteRound \n          close={() => this.setState({showConfirmDelete: false})} \n          deleteRound={this.deleteRound} /> : null}\n    </div>\n    );\n  }\n}\n\nexport default RoundsTable;\n","import React from 'react';\nimport AppMode from './../AppMode.js';\n\nclass RoundForm extends React.Component {\n  constructor(props) {\n  super(props);\n  //Create date object for today, taking time zone into consideration\n  let today = new Date(Date.now()-(new Date()).getTimezoneOffset()*60000);\n  //store date as ISO string\n  if (this.props.mode === AppMode.ROUNDS_LOGROUND) {\n    //If logging a new round, the starting state is a default round with\n    //today's date.\n    this.state = {date:  today.toISOString().substr(0,10), \n                  course: \"\",\n                  type: \"practice\",\n                  holes: \"18\",\n                  strokes: 80,\n                  minutes: 50,\n                  seconds: \"00\",\n                  notes: \"\",\n                  faIcon: \"fa fa-save\",\n                  btnLabel: \"Save Round Data\"}\n  } else {\n    //if editing an existing round, the starting state is the round's\n    //current data\n    let thisRound = {...this.props.startData};\n    delete thisRound.id;\n    thisRound.faIcon = \"fa fa-edit\";\n    thisRound.btnLabel = \"Update Round Data\";\n    this.state = thisRound;\n  }\n}\n  \n  \n    handleChange = (event) => {\n        const name = event.target.name;\n        if (name === \"seconds\") {\n          let newSec = (event.target.value.length < 2 ? \"0\" + \n            event.target.value : event.target.value);\n          let newSGS = this.computeSGS(this.state.strokes, this.state.minutes, \n                                       newSec);\n          this.setState({seconds: newSec, SGS: newSGS});\n        } else if (name === \"strokes\") {\n          let newStrokes = event.target.value;\n          let newSGS = this.computeSGS(newStrokes, this.state.minutes, \n            this.state.seconds);\n          this.setState({strokes: newStrokes, SGS: newSGS});\n        } else if (name === \"minutes\") {\n            let newMin = event.target.value;\n            let newSGS = this.computeSGS(this.state.strokes, newMin, \n              this.state.seconds);\n            this.setState({minutes: newMin, SGS: newSGS});\n        } else {\n          this.setState({[name]: event.target.value});\n        }\n    }\n  \n  \n    //handleSubmit -- When the user clicks on the button to save/update the\n    //round, start the spinner and invoke the parent component's saveRound\n    //method to do the actual work. Note that saveRound is set to the correct\n    //parent method based on whether the user is logging a new round or editing\n    //an existing round.\n    handleSubmit = (event) => {\n        //start spinner\n        this.setState({faIcon: \"fa fa-spin fa-spinner\",\n                        btnLabel: (this.props.mode === AppMode.ROUNDS_LOGROUND ? \n                                    \"Saving...\" : \"Updating...\")});\n        //Prepare current round data to be saved\n        let roundData = this.state;\n        delete roundData.faIcon;\n        delete roundData.btnLabel;\n        //call saveRound on 1 second delay to show spinning icon\n        setTimeout(this.props.saveRound,1000,roundData); \n        event.preventDefault(); \n        }\n  \n\n    computeSGS = (strokes, min, sec) => {\n      return (Number(strokes) + Number(min)) \n                  + \":\" + sec;\n    }\n  \n    render() {\n      return (\n        <form className=\"padded-page\" onSubmit={this.handleSubmit}>\n          <center>\n            <label>\n              Date:\n              <input name=\"date\" className=\"form-control form-center\" \n                type=\"date\" value={this.state.date} onChange={this.handleChange} />\n            </label>\n            <p></p>\n            <label>\n              Course:\n              <input name=\"course\" className=\"form-control form-center\" type=\"text\"\n                value={this.state.course} onChange={this.handleChange}\n                placeholder=\"Course played\" size=\"50\" maxLength=\"50\" />\n            </label>\n          <p></p>\n          <label>Type:\n          <select name=\"type\" value={this.state.type} \n            className=\"form-control form-center\" onChange={this.handleChange}>\n            <option value=\"practice\">Practice</option>\n            <option value=\"tournament\">Tournament</option>\n          </select> \n          </label>\n          <p></p>\n          <label># Holes:\n          <select name=\"holes\" value={this.state.holes} \n            className=\"form-control form-center\" onChange={this.handleChange}>\n            <option value=\"9\">9</option>\n            <option value=\"18\">18</option>\n          </select> \n          </label>\n          <p></p>\n          <label># Strokes:\n          <input name=\"strokes\" className=\"form-control form-center\" type=\"number\" \n            min=\"9\" max=\"200\" value={this.state.strokes} \n            onChange={this.handleChange} />\n          </label>\n          <p></p>\n          <label>Time: <br></br>\n          <input name=\"minutes\" type=\"number\" size=\"3\"\n            min=\"10\" max=\"400\" value={this.state.minutes}\n            onChange={this.handleChange} />:  \n          <input name=\"seconds\" type=\"number\" size=\"2\"\n            min=\"0\" max=\"60\" value={this.state.seconds} \n            onChange={this.handleChange} />\n          </label>\n          <p></p>\n          <label>Speedgolf Score: <br></br>\n              <input name=\"SGS\" className=\"form-center\" type=\"text\" size=\"6\" \n                disabled={true} value={this.computeSGS(this.state.strokes,this.state.minutes,this.state.seconds)} />\n          </label>\n          <p></p>\n          <label>Notes:\n              <textarea name=\"notes\" className=\"form-control\" rows=\"6\" cols=\"75\" \n                placeholder=\"Enter round notes\" value={this.state.notes} \n                onChange={this.handleChange} />\n          </label>\n          <p></p>\n          <p></p>\n          <button type=\"submit\" style={{width: \"70%\",fontSize: \"36px\"}} \n            className=\"btn btn-primary btn-color-theme\">\n              <span className={this.state.faIcon}/>&nbsp;{this.state.btnLabel}\n          </button>\n          </center>\n        </form>\n      );\n    }\n}\n\nexport default RoundForm;","import React from 'react';\n\nclass FloatingButton extends React.Component {\n    render() {\n      return(\n        <div className=\"floatbtn\" onClick={this.props.handleClick}>\n          <span className=\"floatbtn-icon fa fa-plus\"></span>\n        </div>  \n      );\n    }\n}\n\nexport default FloatingButton;\n","//Rounds -- A parent component for the app's \"rounds\" mode.\n//Manages the rounds data for the current user and conditionally renders the\n//appropriate rounds mode page based on App's mode, which is passed in as a prop.\n\nimport React from 'react';\nimport AppMode from './../AppMode.js';\nimport RoundsTable from './RoundsTable.js';\nimport RoundForm from './RoundForm.js';\nimport FloatingButton from './FloatingButton.js';\n\nclass Rounds extends React.Component {\n\n    //Initialize a Rounds object based on local storage\n    constructor() {\n        super();\n        this.deleteId = \"\";\n        this.editId = \"\";\n        this.state = {errorMsg: \"\"};           \n    }\n\n    //addRound -- Given an object newData containing a new round, use the \n    //server POST route to add the new round to the database. If the add is\n    //successful, call on the refreshOnUpdate() method to force the parent\n    //App component to refresh its state from the database and re-render itself,\n    //allowing the change to be propagated to the Rounds table. Then switch\n    //the mode back to AppMode.ROUNDS since the user is done adding a round.\n    addRound = async (newData) => {\n        const url = '/rounds/' + this.props.userObj.id;\n        const res = await fetch(url, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n                },\n            method: 'POST',\n            body: JSON.stringify(newData)}); \n        const msg = await res.text();\n        if (res.status != 200) {\n            this.setState({errorMsg: msg});\n            this.props.changeMode(AppMode.ROUNDS);\n        } else {\n            this.setState({errorMsg: \"\"});\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\n        }\n    }\n\n    //editRound -- Given an object newData containing updated data on an\n    //existing round, update the current user's round in the database. \n    //toggle the mode back to AppMode.ROUNDS since the user is done editing the\n    //round. \n    editRound = async (newData) => {\n        const url = '/rounds/' + this.props.userObj.id + '/' + \n            this.props.userObj.rounds[this.editId]._id;\n        const res = await fetch(url, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n                },\n            method: 'PUT',\n            body: JSON.stringify(newData)}); \n        const msg = await res.text();\n        if (res.status != 200) {\n            this.setState({errorMsg: msg});\n            this.props.changeMode(AppMode.ROUNDS);\n        } else {\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\n        }\n    }\n\n\n    //deleteRound -- Delete the current user's round uniquely identified by\n    //this.state.deleteId, delete from the database, and reset deleteId to empty.\n    deleteRound = async () => {\n        const url = '/rounds/' + this.props.userObj.id + '/' + \n            this.props.userObj.rounds[this.deleteId]._id;\n        const res = await fetch(url, {method: 'DELETE'}); \n        const msg = await res.text();\n        if (res.status != 200) {\n            this.setState({errorMsg: \"An error occurred when attempting to delete round from database: \" \n            + msg});\n            this.props.changeMode(AppMode.ROUNDS);\n        } else {\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\n        }  \n    }\n \n    //setDeleteId -- Capture in this.state.deleteId the unique id of the item\n    //the user is considering deleting.\n    setDeleteId = (val) => {\n        this.deleteId = val;\n        this.setState({errorMsg: \"\"});\n    }\n\n    //setEditId -- Capture in this.state.editId the unique id of the item\n    //the user is considering editing.\n    setEditId = (val) => {\n        this.editId = val;\n        this.setState({errorMsg: \"\"});\n    }\n\n    closeErrorMsg = () => {\n        this.setState({errorMsg: \"\"});\n    }\n    \n    //render -- Conditionally render the Rounds mode page as either the rounds\n    //table, the rounds form set to obtain a new round, or the rounds form set\n    //to edit an existing round.\n    render() {\n        switch(this.props.mode) {\n            case AppMode.ROUNDS:\n                return (\n                    <>\n                    {this.state.errorMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.errorMsg}</span>\n                       <button className=\"modal-close\" onClick={this.closeErrorMsg}>\n                          <span className=\"fa fa-times\"></span>\n                        </button></div>: null}\n                    <RoundsTable \n                        rounds={this.props.userObj.rounds}\n                        setEditId={this.setEditId}\n                        setDeleteId={this.setDeleteId}\n                        deleteRound={this.deleteRound}\n                        changeMode={this.props.changeMode}\n                        menuOpen={this.props.menuOpen} /> \n                    <FloatingButton\n                        handleClick={() => \n                        this.props.changeMode(AppMode.ROUNDS_LOGROUND)}\n                        menuOpen={this.props.menuOpen}\n                        icon={\"fa fa-plus\"} />\n                    </>\n                );\n            case AppMode.ROUNDS_LOGROUND:\n                return (\n                    <RoundForm\n                        mode={this.props.mode}\n                        startData={\"\"} \n                        saveRound={this.addRound} />\n                );\n            case AppMode.ROUNDS_EDITROUND:\n                let thisRound = {...this.props.userObj.rounds[this.editId]};\n                thisRound.date = thisRound.date.substr(0,10);\n                if (thisRound.seconds < 10) {\n                    thisRound.seconds = \"0\" + thisRound.seconds;\n                } \n                delete thisRound.SGS;\n                return (\n                    <RoundForm\n                        mode={this.props.mode}\n                        startData={thisRound} \n                        saveRound={this.editRound} />\n                );\n        }\n    }\n\n}   \n\nexport default Rounds;\n","import React from 'react';\nimport { Navbar, Container, Row, Col, Card, Button, Modal } from \"react-bootstrap\";\n\nclass RatesModal extends React.Component {\n    constructor(){\n        super();\n\n        this.state={\n                      id: \"\"\n                   };\n        }\n\n        // Get information of the course that was selected on render\n        componentDidMount(){\n            this.getSearchedCourse(this.props.course);\n        }\n\n        // Get information of the course that was selected to show rates information\n        getSearchedCourse = async (id) => {\n            const url = '/courses/'+id;\n            fetch(url)\n            .then((response) => {\n                if (response.status == 200)\n                    return response.json();\n                else\n                {\n                    throw Error(response.statusText);\n                }\n            })\n            .then((obj) => \n            {\n                console.log(\"GET RATES SUCCESS!\");\n                let thisCourse = JSON.parse(obj);\n                this.setState({\n                    courseName: thisCourse.courseName,\n                    id: thisCourse.id,\n                    course: (\n                        <Col  style={{marginTop: \"20px\", marginBottom: \"50px\"}}>\n                            <Card key={thisCourse.id} style={{ width: \"30rem\", display: \"flex\" }}>\n                            <Card.Img className=\"course-image\" variant=\"top\" src={thisCourse.picture}></Card.Img>\n                            <Card.Body>\n                                <Card.Title>Location: {thisCourse.location}</Card.Title>\n                                <Card.Text>RATES: ALL WEEK</Card.Text>\n                                <Card.Text>STANDARD: ${thisCourse.rateStandard}</Card.Text>\n                                <Card.Text>SENIOR: ${thisCourse.rateSenior}</Card.Text>\n                            </Card.Body>\n                            <Card.Footer>Rates and policies are subject to change without notice.</Card.Footer>\n                            </Card>\n                        </Col>\n                    )\n                });\n            }).catch((error) =>{\n                console.log(error);\n            });\n        }\n\nrender() {\n    return (\n        <div id=\"ratesModal\" className=\"modal\" role=\"dialog\">\n        <div className=\"modal-dialog modal-lg\">\n            <div className=\"modal-content\">\n            <div className=\"modal-header\">\n            <h3>{this.state.courseName}</h3>\n                <button className=\"modal-close\" onClick={this.props.handleClose}>\n                    &times;\n                </button>\n            </div>\n            <center>\n            <div className=\"modal-body\">\n                <Container fluid={true}>\n                    <Row noGutters>\n                        {this.state.course}\n                    </Row>\n                </Container>\n            </div>\n                </center>\n            <div className=\"modal-footer\">\n                <button className=\"btn btn-primary btn-color-theme\"\n                onClick={this.props.handleClose}>OK</button>\n                </div>\n            </div>\n        </div>\n        </div>\n    );\n    }\n}\n\nexport default RatesModal;","import React from 'react';\nimport AppMode from \"./../AppMode.js\";\nimport { Navbar, Container, Row, Col, Card, Button, Modal } from \"react-bootstrap\";\nimport { async } from 'regenerator-runtime';\n\nclass MoreModal extends React.Component {\n\nconstructor(){\n    super();\n    this.state={\n        id: \"\",\n        reviewClicked: false,\n        review: \"\",\n        rating: \"\"\n    };\n}\n\n// Get information on the course that was selected on render\ncomponentDidMount(){\n    this.getSearchedCourse(this.props.course);\n}\n\ntoggleReviewClicked = () =>{\n    this.setState(state =>({reviewClicked: !state.reviewClicked}));\n}\n\n// Get information of course selected to show more information\n// Also save the course information, for PUT request, in case user wants to edit\ngetSearchedCourse = async (id) => {\n    const url = '/courses/'+id;\n    fetch(url)\n    .then((response) => {\n        if (response.status == 200)\n            return response.json();\n        else\n        {\n            this.setErrorMsg(\"ERROR: \" + response.statusText);\n            throw Error(response.statusText);\n        }\n    })\n    .then((obj) => \n    {\n        console.log(\"GET SEARCH COURSES SUCCESS!\");\n        let thisCourse = JSON.parse(obj);\n        this.setState({\n            courseName: thisCourse.courseName,\n            id: thisCourse.id,\n            rating: thisCourse.rating,\n            review: thisCourse.review,\n            picture: thisCourse.picture,\n            location: thisCourse.location,\n            yardage: thisCourse.yardage,\n            runningDistance: thisCourse.runningDistance,\n            timePar: thisCourse.timePar,\n            bestScore: thisCourse.bestScore,\n            recordHolder: thisCourse.recordHolder,\n            rateSenior: thisCourse.rateSenior,\n            rateStandard: thisCourse.rateStandard,\n            course: (\n                <Col  style={{marginTop: \"20px\", marginBottom: \"50px\"}}>\n                    <Card key={thisCourse.id} style={{ width: \"30rem\", display: \"flex\" }}>\n                    <Card.Img className=\"course-image\" variant=\"top\" src={thisCourse.picture}></Card.Img>\n                    <Card.Body>\n                        <Card.Title>Location: {thisCourse.location}</Card.Title>\n                        <Card.Text>Yardage: {thisCourse.yardage}</Card.Text>\n                        <Card.Text>Running Distance: {thisCourse.runningDistance}</Card.Text>\n                        <Card.Text>Time Par: {thisCourse.timePar}</Card.Text>\n                        <Card.Text>Best Score: {thisCourse.bestScore}</Card.Text>\n                        <Card.Text>Record Holder: {thisCourse.recordHolder}</Card.Text>\n                    </Card.Body>\n                    <Card.Footer>Rating: {thisCourse.rating}<br></br>Review: {thisCourse.review}</Card.Footer>\n                    <Button onClick={this.toggleReviewClicked}>Leave A Review:</Button>\n                    </Card>\n                </Col>\n            )\n        });\n    }).catch((error) =>{\n        console.log(error);\n    });\n}\n\n// Sends a PUT request to the backend to edit a course in the courses schema\neditCourse = async (newData) =>{\n    const url = '/courses/' + this.state.id;\n    const res = await fetch(url, {\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n            },\n        method: 'PUT',\n        body: JSON.stringify(newData)}); \n    const msg = await res.text();\n    console.log(msg);\n    if (res.status === 200) {\n        this.toggleReviewClicked();\n        this.props.handleClose();\n        window.location.reload(false);\n    } else {\n        alert(msg);\n    }\n}\n\n// Save the new information that were changed then call editCourse(newInformation) to update the backend\nhandleSubmit = (event) =>{\n    event.preventDefault();\n    let newData = {\n        courseName: this.state.courseName,\n        id: this.state.id,\n        rating: this.state.rating,\n        review: this.state.review,\n        picture: this.state.picture,\n        location: this.state.location,\n        yardage: this.state.yardage,\n        runningDistance: this.state.runningDistance,\n        timePar: this.state.timePar,\n        bestScore: this.state.bestScore,\n        recordHolder: this.state.recordHolder,\n        rateSenior: this.state.rateSenior,\n        rateStandard: this.state.rateStandard\n    }\n    this.editCourse(newData);\n\n}\n\nhandleChange = (event) => {\n    this.setState({[event.target.name]: event.target.value});\n}\n\nrender() {\n    return (\n        <div id=\"moreModal\" className=\"modal\" role=\"dialog\">\n        <div className=\"modal-dialog modal-lg\">\n            <div className=\"modal-content\">\n            <div className=\"modal-header\">\n                <h3>{this.state.courseName}</h3>\n                <button className=\"modal-close\" onClick={this.props.handleClose}>\n                    &times;\n                </button>\n            </div>\n            {this.state.reviewClicked ? \n                <div className=\"modal\" role=\"dialog\">\n                <div className=\"modal-dialog modal-lg\">\n                    <div className=\"modal-content\">\n                    <div className=\"modal-header\">\n                        <h3>Leaving A Review</h3>\n                        <button className=\"modal-close\" onClick={this.toggleReviewClicked}>\n                            &times;\n                        </button>\n                    </div>\n                <div className=\"modal-body\">\n                    <form onSubmit={this.handleSubmit}>\n                    <Container fluid={true}>\n                        <Row noGutters>\n                        <label>Rating:\n                        <select name=\"rating\" value={this.state.rating} \n                        className=\"form-control form-center\" onChange={this.handleChange}>\n                        <option value=\"1\">1</option>\n                        <option value=\"2\">2</option>\n                        <option value=\"3\">3</option>\n                        <option value=\"4\">4</option>\n                        <option value=\"5\">5</option>\n                        </select> \n                        </label>\n                        <p></p>\n                        <label>Review:\n                        <textarea name=\"review\" className=\"form-control\" rows=\"6\" cols=\"75\" \n                            placeholder=\"Enter round notes\" value={this.state.review} \n                            onChange={this.handleChange} />\n                        </label>\n                        <p></p>\n                        <Button type=\"submit\">Submit Review</Button>\n                        </Row>\n                    </Container>\n                    </form>\n                </div>\n                <div className=\"modal-footer\">\n                    <button className=\"btn btn-primary btn-color-theme\"\n                    onClick={this.toggleReviewClicked}>OK</button>\n                    </div>\n                </div>\n                </div>\n                </div>\n            :null}\n            <div className=\"modal-body\">\n                <Container fluid={true}>\n                    <Row noGutters>\n                        {this.state.course}\n                    </Row>\n                </Container>\n            </div>\n            {/* <div className=\"modal-footer\">\n                <button className=\"btn btn-primary btn-color-theme\"\n                onClick={this.props.handleClose}>OK</button>\n            </div> */}\n            </div>\n        </div>\n        </div>\n    );\n    }\n}\n\nexport default MoreModal;","import React from 'react';\nimport AppMode from '../AppMode';\n\n// For setting min and max value of <input type=\"date\">\nlet today = new Date(Date.now()-(new Date()).getTimezoneOffset()*60000);\nlet seventhDay = new Date(today);\nseventhDay.setDate(seventhDay.getDate() + 6);\n\nlet day1 = today.toISOString().substring(0,10);\nlet day7 = seventhDay.toISOString().substring(0,10);\n\n\nclass BookingPage extends React.Component {\n\n    constructor (props) {\n        super(props);\n        this.state = {\n            courseName: this.props.course,\n            bookingTime: '',\n            bookingDate: day1,\n            course: ''\n        }\n    }\n\n    // Get information on selected course on render\n    componentDidMount(){\n        this.getSearchedCourse(this.props.course);\n        this.getAllAppointments();\n    }\n\n    // Get information of all courses to show on page\n    getAllAppointments = async () => {\n        const url = '/allappointments_op/';\n        fetch(url)\n        .then((response) => {\n            if (response.status == 200)\n                return response.json();\n            else\n            {\n                throw Error(response.statusText);\n            }\n        })\n        .then((obj) => \n        {\n            console.log(\"GET SUCCESS!\");\n            let thisCourse = JSON.parse(obj);\n            this.setState({\n                appointments: thisCourse.map((c) =>(\n                    {\n                        username: c.username,\n                        courseName: c.courseName,\n                        date: c.date,\n                        time: c.time\n                    }\n                ))\n            });\n        }).catch((error) =>{\n            console.log(\"GET ERROR!\");\n        });\n    }\n\n    // Get information on selected course then set it to a state for usage in this component\n    getSearchedCourse = async (id) => {\n        const url = '/courses/'+id;\n        fetch(url)\n        .then((response) => {\n            if (response.status == 200)\n                return response.json();\n            else\n            {\n                throw Error(response.statusText);\n            }\n        })\n        .then((obj) => \n        {\n            console.log(\"GET SEARCH COURSES SUCCESS!\");\n            let thisCourse = JSON.parse(obj);\n            this.setState({\n                course: thisCourse\n            });\n        }).catch((error) =>{\n            console.log(error);\n        });\n    }\n\n    // Checks for the date and time that were requested for booking\n    // Then prepare data to send to the database\n    // by calling editCourse(newData)\n    handleBookTeeTime = (event) => {\n        event.preventDefault();\n        console.log(\"Booking tee time\");\n\n        let newappt = {\n            userId: this.props.userObj.id,\n            username: this.props.userObj.displayName,\n            courseName: this.props.courseName,\n            date: this.state.bookingDate,\n            time: this.state.bookingTime,\n            paid: \"false\"\n        }\n\n        this.addAppointment(newappt);\n        this.addAppointment_op(newappt);\n        alert(\"Tee Time Booked!\");\n        this.props.handleClose();\n    }\n\n    // Sends a PUT request to the backend with the new information\n    // new information here is the appointments that were scheduled\n    addAppointment_op = async (newData) =>{\n        const url = '/appointments_op/';\n        const res = await fetch(url, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n                },\n            method: 'POST',\n            body: JSON.stringify(newData)}); \n        const msg = await res.text();\n        console.log(msg);\n        if (res.status === 200) {\n            if (this.props.mode === AppMode.COURSES)\n                this.props.refreshOnUpdate(AppMode.COURSES);\n            else \n                this.props.refreshOnUpdate(AppMode.COURSES_ALL);\n        } else {\n            this.props.refreshOnUpdate(AppMode.COURSES_ALL);\n        }\n    }\n\n    // Sends a PUT request to the backend with the new information\n    // new information here is the appointments that were scheduled\n    addAppointment = async (newData) =>{\n        const url = '/appointments/' + this.props.userObj.id;\n        const res = await fetch(url, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n                },\n            method: 'POST',\n            body: JSON.stringify(newData)}); \n        const msg = await res.text();\n        console.log(msg);\n        if (res.status === 200) {\n            if (this.props.mode === AppMode.COURSES)\n                this.props.refreshOnUpdate(AppMode.COURSES);\n            else \n                this.props.refreshOnUpdate(AppMode.COURSES_ALL);\n        } else {\n            this.props.refreshOnUpdate(AppMode.COURSES_ALL);\n        }\n    }\n\n    // Sends a PUT request to the backend with the new information\n    // new information here is the appointments that were scheduled\n    editCourse = async (newData) =>{\n        const url = '/courses/' + this.props.course;\n        const res = await fetch(url, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n                },\n            method: 'PUT',\n            body: JSON.stringify(newData)}); \n        const msg = await res.text();\n        console.log(msg);\n        if (res.status === 200) {\n            alert(\"Tee Time Booked!\");\n            if (this.props.mode === AppMode.COURSES)\n                this.props.refreshOnUpdate(AppMode.COURSES);\n            else \n                this.props.refreshOnUpdate(AppMode.COURSES_ALL);\n        } else {\n            this.props.refreshOnUpdate(AppMode.COURSES_ALL);\n        }\n    }\n\n\n    handleChange = (event) => {\n        this.setState({[event.target.name]: event.target.value});\n    }\n\n    // Handles enabling/disabling the time slots option on each date\n    // depending on the state of the appointments.day.time\n    handleClick = () =>{\n        document.getElementById(\"9:00 AM\").removeAttribute(\"disabled\");\n        document.getElementById(\"10:00 AM\").removeAttribute(\"disabled\");\n        document.getElementById(\"11:00 AM\").removeAttribute(\"disabled\");\n        document.getElementById(\"12:00 PM\").removeAttribute(\"disabled\");\n        document.getElementById(\"1:00 PM\").removeAttribute(\"disabled\");\n        document.getElementById(\"2:00 PM\").removeAttribute(\"disabled\");\n        document.getElementById(\"3:00 PM\").removeAttribute(\"disabled\");\n        document.getElementById(\"4:00 PM\").removeAttribute(\"disabled\");\n        document.getElementById(\"5:00 PM\").removeAttribute(\"disabled\");\n\n        console.log(this.state.appointments);\n        for (var i = 0; i < this.state.appointments.length; i++)\n        {\n            if ((this.state.bookingDate === this.state.appointments[i].date) && (this.state.course.courseName === this.state.appointments[i].courseName))\n            {\n                switch(this.state.appointments[i].time){\n                    case \"9:00 AM\":\n                        document.getElementById(\"9:00 AM\").setAttribute(\"disabled\",true);\n                        break;\n                    case \"10:00 AM\":\n                        document.getElementById(\"10:00 AM\").setAttribute(\"disabled\",true);\n                        break;\n                    case \"11:00 AM\":\n                        document.getElementById(\"11:00 AM\").setAttribute(\"disabled\",true);\n                        break;\n                    case \"12:00 PM\":\n                        document.getElementById(\"12:00 PM\").setAttribute(\"disabled\",true);\n                        break;\n                    case \"1:00 PM\":\n                        document.getElementById(\"1:00 PM\").setAttribute(\"disabled\",true);\n                        break;\n                    case \"2:00 PM\":\n                        document.getElementById(\"2:00 PM\").setAttribute(\"disabled\",true);\n                        break;\n                    case \"3:00 PM\":\n                        document.getElementById(\"3:00 PM\").setAttribute(\"disabled\",true);\n                        break;\n                    case \"4:00 PM\":\n                        document.getElementById(\"4:00 PM\").setAttribute(\"disabled\",true);\n                        break;\n                    case \"5:00 PM\":\n                        document.getElementById(\"5:00 PM\").setAttribute(\"disabled\",true);\n                        break;\n                }\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div id=\"bookingPage\" className=\"modal\" role=\"dialog\">\n            <div className=\"modal-dialog modal-lg\">\n                <div className=\"modal-content\">\n                <div className=\"modal-header\">\n                    <h3>Booking Tee Time</h3>\n                </div>\n                <div className=\"modal-body\">\n                <div className=\"padded-page\">\n                    <form onSubmit={this.handleBookTeeTime}>\n                    <center>\n                        <h1>Request Tee Time at {this.state.courseName}</h1><br></br>\n                        <label for=\"bookingDate\">Date: <br></br>\n                            <input type=\"date\" id=\"bookingDate\" name=\"bookingDate\" min={day1} max={day7} value={this.state.bookingDate} onChange={this.handleChange} required></input>\n                        </label>\n                        <p></p>\n                        <label for=\"bookingTime\">Time: <br></br>\n                        <select type=\"date\" id=\"bookingTime\" name=\"bookingTime\" value={this.state.bookingTime} onChange={this.handleChange} onClick={this.handleClick} required>\n                            <option></option>\n                            <option id=\"9:00 AM\" value=\"9:00 AM\">9:00 AM</option>\n                            <option id=\"10:00 AM\" value=\"10:00 AM\">10:00 AM</option>\n                            <option id=\"11:00 AM\" value=\"11:00 AM\">11:00 AM</option>\n                            <option id=\"12:00 PM\" value=\"12:00 PM\">12:00 PM</option> \n                            <option id=\"1:00 PM\" value=\"1:00 PM\">1:00 PM</option>\n                            <option id=\"2:00 PM\" value=\"2:00 PM\">2:00 PM</option> \n                            <option id=\"3:00 PM\" value=\"3:00 PM\">3:00 PM</option>\n                            <option id=\"4:00 PM\" value=\"4:00 PM\">4:00 PM</option>\n                            <option id=\"5:00 PM\" value=\"5:00 PM\">5:00 PM</option>    \n                        </select>\n                        </label>\n                        <p></p>\n                        <button className=\"btn btn-primary btn-color-theme modal-submit-btn\">Request Tee Time</button>\n                        <button onClick={this.props.handleClose} className=\"btn btn-primary btn-color-theme modal-submit-btn\">Cancel</button>\n                    </center>\n                    </form>\n                </div>\n                </div>\n                </div>\n            </div>\n            </div>\n       \n        );\n    }   \n}\n\nexport default BookingPage;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst mapStyles = {\n  map: {\n    position: 'absolute',\n    width: '100%',\n    height: '100%'\n  }\n};\n\nlet pos;\nlet map;\nlet bounds;\nlet infoWindow;\nlet currentInfoWindow;\nlet service;\nlet infoPane;\n\nexport class CurrentLocation extends React.Component {\n    constructor(props) {\n        super(props);\n    \n        const { lat, lng } = this.props.initialCenter;\n    \n        this.state = {\n          currentLocation: {\n            lat: lat,\n            lng: lng\n          }\n        };\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.google !== this.props.google) {\n          this.loadMap();\n        }\n        if (prevState.currentLocation !== this.state.currentLocation) {\n          this.recenterMap();\n        }\n    }\n\n    recenterMap() {\n        const map = this.map;\n        const current = this.state.currentLocation;\n        const google = this.props.google;\n        const maps = google.maps;\n    \n        if (map) {\n          let center = new maps.LatLng(current.lat, current.lng);\n          map.panTo(center);\n        }\n    }\n\n    componentDidMount() {\n      const { google } = this.props;\n      const maps = google.maps;\n      bounds = new maps.LatLngBounds();\n      infoWindow = new maps.InfoWindow;\n      currentInfoWindow = infoWindow;\n      infoPane = document.getElementById('panel');\n\n        if (this.props.centerAroundCurrentLocation) {\n          if (navigator && navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(pos => {\n              const coords = pos.coords;\n              this.setState({\n                currentLocation: {\n                  lat: coords.latitude,\n                  lng: coords.longitude\n                }\n              });\n              bounds.extend(this.state.currentLocation);\n              infoWindow.setPosition(this.state.currentLocation);\n              infoWindow.setContent('Location found.');\n              infoWindow.open(this.map);\n              this.map.setCenter(this.state.currentLocation);\n            });\n          }\n        }\n        this.loadMap();\n        this.getNearbyPlaces(this.state.currentLocation);\n    }\n\n    loadMap() {\n        if (this.props && this.props.google) {\n          // checks if google is available\n          const { google } = this.props;\n          const maps = google.maps;\n    \n          const mapRef = this.refs.map;\n    \n          // reference to the actual DOM element\n          const node = ReactDOM.findDOMNode(mapRef);\n    \n          let { zoom } = this.props;\n          const { lat, lng } = this.state.currentLocation;\n          const center = new maps.LatLng(lat, lng);\n    \n          const mapConfig = Object.assign(\n            {},\n            {\n              center: center,\n              zoom: zoom\n            }\n          );\n    \n          // maps.Map() is constructor that instantiates the map\n          this.map = new maps.Map(node, mapConfig);\n        }\n    }\n\n  getNearbyPlaces = (position) => {\n    const { google } = this.props;\n    const maps = google.maps;\n    let request = {\n      location: position,\n      rankBy: maps.places.RankBy.DISTANCE,\n      keyword: 'golf'\n    };\n\n    service = new maps.places.PlacesService(this.map);\n    service.nearbySearch(request, this.nearbyCallback);\n  }\n\n    // Handle the results (up to 20) of the Nearby Search\n    nearbyCallback = (results, status) => {\n      const { google } = this.props;\n      const maps = google.maps;\n      if (status == maps.places.PlacesServiceStatus.OK) {\n        this.createMarkers(results);\n      }\n    }\n\n    createMarkers = (places) => {\n      const { google } = this.props;\n      const maps = google.maps;\n      places.forEach(place => {\n        let marker = new maps.Marker({\n          position: place.geometry.location,\n          map: this.map,\n          title: place.name\n        });\n  \n        /* TODO: Step 4B: Add click listeners to the markers */\n        // Add click listener to each marker\n        maps.event.addListener(marker, 'click', () => {\n          let request = {\n            placeId: place.place_id,\n            fields: ['name', 'formatted_address', 'geometry', 'rating',\n              'website', 'photos']\n          };\n  \n          /* Only fetch the details of a place when the user clicks on a marker.\n           * If we fetch the details for all place results as soon as we get\n           * the search response, we will hit API rate limits. */\n          service.getDetails(request, (placeResult, status) => {\n            this.showDetails(placeResult, marker, status)\n          });\n        });\n  \n        // Adjust the map bounds to include the location of this marker\n        bounds.extend(place.geometry.location);\n      });\n      /* Once all the markers have been placed, adjust the bounds of the map to\n       * show all the markers within the visible area. */\n      this.map.fitBounds(bounds);\n    }\n\n    showDetails = (placeResult, marker, status) => {\n      const { google } = this.props;\n      const maps = google.maps;\n      if (status == maps.places.PlacesServiceStatus.OK) {\n        let placeInfowindow = new maps.InfoWindow();\n        let rating = \"None\";\n        if (placeResult.rating) rating = placeResult.rating;\n        placeInfowindow.setContent('<div><strong>' + placeResult.name +\n          '</strong><br>' + 'Rating: ' + rating + '</div>');\n        placeInfowindow.open(marker.map, marker);\n        currentInfoWindow.close();\n        currentInfoWindow = placeInfowindow;\n        this.showPanel(placeResult);\n      } else {\n        console.log('showDetails failed: ' + status);\n      }\n    }\n\n    showPanel = (placeResult) => {\n      // If infoPane is already open, close it\n      if (infoPane.classList.contains(\"open\")) {\n        infoPane.classList.remove(\"open\");\n      }\n  \n      // Clear the previous details\n      while (infoPane.lastChild) {\n        infoPane.removeChild(infoPane.lastChild);\n      }\n  \n      /* TODO: Step 4E: Display a Place Photo with the Place Details */\n      // Add the primary photo, if there is one\n      if (placeResult.photos) {\n        let firstPhoto = placeResult.photos[0];\n        let photo = document.createElement('img');\n        photo.classList.add('hero');\n        photo.src = firstPhoto.getUrl();\n        infoPane.appendChild(photo);\n      }\n  \n      // Add place details with text formatting\n      let name = document.createElement('h1');\n      name.classList.add('place');\n      name.textContent = placeResult.name;\n      infoPane.appendChild(name);\n      if (placeResult.rating) {\n        let rating = document.createElement('p');\n        rating.classList.add('details');\n        rating.textContent = `Rating: ${placeResult.rating} \\u272e`;\n        infoPane.appendChild(rating);\n      }\n      let address = document.createElement('p');\n      address.classList.add('details');\n      address.textContent = placeResult.formatted_address;\n      infoPane.appendChild(address);\n      if (placeResult.website) {\n        let websitePara = document.createElement('p');\n        let websiteLink = document.createElement('a');\n        let websiteUrl = document.createTextNode(placeResult.website);\n        websiteLink.appendChild(websiteUrl);\n        websiteLink.title = placeResult.website;\n        websiteLink.href = placeResult.website;\n        websitePara.appendChild(websiteLink);\n        infoPane.appendChild(websitePara);\n      }\n  \n      // Open the infoPane\n      infoPane.classList.add(\"open\");\n    }\n\n    renderChildren() {\n        const { children } = this.props;\n    \n        if (!children) return;\n    \n        return React.Children.map(children, c => {\n          if (!c) return;\n    \n          return React.cloneElement(c, {\n            map: this.map,\n            google: this.props.google,\n            mapCenter: this.state.currentLocation\n          });\n        });\n    }\n\n    render() {\n        const style = Object.assign({}, mapStyles.map);\n    \n        return (\n          <div id=\"Map\">\n            <div style={style} ref=\"map\">\n              Loading map...\n            </div>\n            {/* <!-- The slide-out panel for showing place details --> */}\n            <div id=\"panel\"></div>\n            {/* <!-- Map appears here --> */}\n            <div id=\"map\"></div>\n\n            {this.renderChildren()}\n          </div>\n        );\n    }\n}\n\n\nCurrentLocation.defaultProps = {\n    zoom: 14,\n    initialCenter: {\n      lat: 46.7482916,\n      lng: -117.153158\n    },\n    centerAroundCurrentLocation: false,\n    visible: true\n  };\n\nexport default CurrentLocation;","import React from 'react';\nimport AppMode from \"./../AppMode.js\";\nimport { Navbar, Container, Row, Col, Card, Button } from \"react-bootstrap\";\nimport RatesModal from \"./RatesModal.js\";\nimport MoreModal from \"./MoreModal.js\";\nimport BookingPage from \"./BookingPage.js\";\n\nclass AllCourses extends React.Component {\n\n    constructor(){\n        super();\n    \n        this.state={\n            item: \"\",\n            getCourseClicked: false,\n            getRatesButtonClicked: false,\n            bookTeeTimeClicked: false,\n            more: false,\n            index: 0,\n            cname: ''\n        };\n    }\n\n    // Get information of all courses on render\n    componentDidMount(){\n        this.getCourse();\n    }\n    \n    toggleGetCourseClicked = () => {\n        this.setState(state => ({getCourseClicked: !state.getCourseClicked}));\n    }\n\n    toggleMoreClicked = (key) => {\n        this.setState({item: key});\n        this.setState(state => ({more: !state.more}));\n    }\n\n    toggleGetRatesClicked = (key) => {\n        this.setState({item: key});\n        this.setState(state => ({getRatesButtonClicked: !state.getRatesButtonClicked}));\n    }\n\n    toggleBookTeeTimeClicked = (key, i, cn) => {\n        this.setState({item: key});\n        this.setState({index: i});\n        this.setState({cname: cn});\n        this.setState(state => ({bookTeeTimeClicked: !state.bookTeeTimeClicked}));\n    }\n\n    // Delete course with this id from database\n    handleDelete = async (key) => {\n        const url = '/courses/' + key;\n        const res = await fetch(url, {method: 'DELETE'}); \n        const msg = await res.text();\n        console.log(msg);\n        if (res.status == 200) {\n            for (var i = 0; i < this.state.filteredData.length; i++)\n            {\n                if (this.state.filteredData[i].id === key)\n                {\n                    this.state.course.splice(i, 1);\n                    this.setState({\n                        course: this.state.course\n                    });\n                }\n            }\n        } else {\n            alert(msg);\n        }  \n    }\n\n    // Get information of all courses to show on page\n    getCourse = async () => {\n        const url = '/allcourses/';\n        fetch(url)\n        .then((response) => {\n            if (response.status == 200)\n                return response.json();\n            else\n            {\n                throw Error(response.statusText);\n            }\n        })\n        .then((obj) => \n        {\n            console.log(\"GET SUCCESS!\");\n            let thisCourse = JSON.parse(obj);\n            this.setState({\n                filteredData: thisCourse,\n                course: thisCourse.map((c, index) =>(\n                    <Col  style={{marginTop: \"20px\", marginBottom: \"50px\"}}>\n                        <Card key={c.id} style={{ width: \"30rem\", display: \"flex\" }}>                      \n                        <Card.Img className=\"course-image\" variant=\"top\" src={c.picture}></Card.Img>\n                        <Card.Body>\n                            <Card.Title>{c.courseName}</Card.Title>\n                            <Card.Text>Record Holder: {c.recordHolder}</Card.Text>\n                            {this.setState({item: c.id})}\n                            <Button id=\"moreBtn\" type=\"button\" onClick={() => this.toggleMoreClicked(c.id)}>More</Button>&nbsp;\n                            <Button id=\"ratesBtn\" type=\"button\" onClick={() => this.toggleGetRatesClicked(c.id)}>Get Rates</Button>&nbsp;\n                            <Button id=\"bookingBtn\" type=\"button\" onClick={() => this.toggleBookTeeTimeClicked(c.id, index, c.courseName)}>Book Tee Time</Button>&nbsp;\n                            {this.props.userObj.type === \"operator\" ? \n                            <Button style={{display: 'flex', float: 'right'}} onClick={() => this.handleDelete(c.id)}>&times;</Button>\n                            : null}\n                        </Card.Body>\n                        <Card.Footer>Rating: {c.rating}</Card.Footer>\n                        </Card>\n                    </Col>\n                ))\n            });\n        }).catch((error) =>{\n            console.log(\"GET ERROR!\");\n        });\n    }\n\n    render() {\n        return(\n            <div id=\"allCoursesPage\">\n                <h1></h1>\n                <table >\n                    <tbody>\n                    <Container fluid={true}>\n                        <Row noGutters>                    \n                            {this.state.course}\n                        </Row>\n                    </Container> \n                    </tbody>\n                </table>\n                {this.state.getRatesButtonClicked ? \n                    <RatesModal handleClose={this.toggleGetRatesClicked} \n                    course={this.state.item} changeMode={this.props.changeMode} \n                    refreshOnUpdate={this.props.refreshOnUpdate} mode={this.props.mode} \n                    />\n                    : null}\n                {this.state.more ? \n                    <MoreModal handleClose={this.toggleMoreClicked}\n                        course={this.state.item} changeMode={this.props.changeMode} \n                        refreshOnUpdate={this.props.refreshOnUpdate} mode={this.props.mode} \n                    />\n                    : null}\n                {this.state.bookTeeTimeClicked ? \n                    <BookingPage handleClose={this.toggleBookTeeTimeClicked} userObj={this.props.userObj} courseName={this.state.cname}\n                        course={this.state.item} changeMode={this.props.changeMode} editId={this.state.index}\n                        refreshOnUpdate={this.props.refreshOnUpdate} mode={this.props.mode} info={this.props.info}\n                    />\n                    : null}\n            </div>\n            );\n    }   \n}\n\nexport default AllCourses;","import React from 'react';\nimport { GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\nimport CurrentLocation from './Map';\n\nclass NearbyCourses extends React.Component {\n    \n    state = {\n        showingInfoWindow: false,  // Hides or shows the InfoWindow\n        activeMarker: {},          // Shows the active marker upon click\n        selectedPlace: {}          // Shows the InfoWindow to the selected place upon a marker\n      };\n\n    onMarkerClick = (props, marker, e) =>\n    this.setState({\n        selectedPlace: props,\n        activeMarker: marker,\n        showingInfoWindow: true\n    });\n\n    onClose = (props) => {\n    if (this.state.showingInfoWindow) {\n        this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n        });\n    }\n    };\n\n    render () {\n        return (\n            <CurrentLocation\n              centerAroundCurrentLocation\n              google={this.props.google}\n            >\n              <Marker onClick={this.onMarkerClick} name={'Current Location'} />\n              <InfoWindow\n                marker={this.state.activeMarker}\n                visible={this.state.showingInfoWindow}\n                onClose={this.onClose}\n              >\n                <div>\n                  <h4>{this.state.selectedPlace.name}</h4>\n                </div>\n              </InfoWindow>\n            </CurrentLocation>\n          );\n    }\n}\n\nexport default GoogleApiWrapper({\n    apiKey: 'AIzaSyAb8KZudhikDhC08rfJ_BgBvM0Fxfpvog8'\n  })(NearbyCourses);","import React from 'react';\nimport { Navbar, Container, Row, Col, Card, Button, Modal } from \"react-bootstrap\";\n\nclass AdvancedSearch extends React.Component {\n    constructor(){\n        super();\n\n        this.state={\n            rating: \"\",\n            yardage: \"\",\n            runningDistance: \"\",\n            timePar: \"\",\n            rateStandard: \"\",\n            rateSenior: \"\",\n            searchType: \"\",\n            allCourses: [],\n            filteredCourses: []\n        };\n    }\n\n    // Get information on all courses at render\n    componentDidMount(){\n        this.getCourse();\n    }\n\n    // Get information on all courses for searching purposes\n    getCourse = async () => {\n        const url = '/allcourses/';\n        fetch(url)\n        .then((response) => {\n            if (response.status == 200)\n                return response.json();\n            else\n            {\n                this.setErrorMsg(\"ERROR: \" + response.statusText);\n                throw Error(response.statusText);\n            }\n        })\n        .then((obj) => \n        {\n            console.log(\"GET SUCCESS!\");\n            let thisCourse = JSON.parse(obj);\n            let table = [];\n            for (var i = 0; i < thisCourse.length; i++)\n            {\n                table.push(thisCourse[i]);\n            }\n            \n            this.setState({allCourses: table});\n            // console.log(this.state.allCourses);\n        }).catch((error) =>{\n            console.log(\"GET ERROR!\");\n        });\n    }\n\n    handleChange = (event) =>{\n        this.setState({[event.target.name]: event.target.value});\n    }\n\n    // Query what to show depending on form that was submitted\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.props.searchStart();\n        let type = this.state.searchType;\n        let len = this.state.allCourses.length;\n        let c = this.state.allCourses;\n        let table = [];\n        switch (type){\n            case \"rates\":\n                for (var i = 0; i < len; i++)\n                {\n                    if (c[i].rateSenior === this.state.rateSenior || c[i].rateStandard === this.state.rateStandard)\n                    {\n                        table.push(c[i]);\n                    }\n                }\n                break;\n            case \"rating\":\n                for (var i = 0; i < len; i++)\n                {\n                    if (c[i].rating === this.state.rating)\n                    {\n                        table.push(c[i]);\n                    }\n                }\n                break;\n            case \"yardage\":\n                for (var i = 0; i < len; i++)\n                {\n                    if (c[i].yardage === this.state.yardage)\n                    {\n                        table.push(c[i]);\n                    }\n                }\n                break;\n            case \"runningDistance\":\n                for (var i = 0; i < len; i++)\n                {\n                    if (c[i].runningDistance === this.state.runningDistance)\n                    {\n                        table.push(c[i]);\n                    }\n                }\n                break;\n            case \"timePar\":\n                for (var i = 0; i < len; i++)\n                {\n                    if (c[i].timePar === this.state.timePar)\n                    {\n                        table.push(c[i]);\n                    }\n                }\n                break;\n        }\n        console.log(table.length);\n        this.props.setCourseAmount(table.length);\n        this.props.setFilteredData(table);\n        this.props.handleClose();\n    }\n\n    // toggling between different forms of advanced search\n    handleSwitch = (type) => {\n        if (type === \"rates\")\n        {\n            return (\n                <form onSubmit={this.handleSubmit}>\n                    <center>\n                    <label>\n                        Standard Rate: $<br></br>\n                        <input id=\"rateStandard\" name=\"rateStandard\" placeholder=\"rateStandard\" value={this.state.rateStandard} onChange={this.handleChange}></input>\n                    </label>\n                    <p></p>\n                    <label>\n                        Senior Rate: $<br></br>\n                        <input id=\"rateSenior\" name=\"rateSenior\" placeholder=\"rateSenior\" value={this.state.rateSenior} onChange={this.handleChange}></input>\n                    </label>\n                    <p></p>\n                    </center>\n                </form>\n            );\n        }\n        else if (type === \"rating\"){\n            return (\n                <form onSubmit={this.handleSubmit}>\n                    <center>\n                    <label>\n                        Rating:<br></br>\n                        <input id=\"rating\" name=\"rating\" placeholder=\"rating\" value={this.state.rating} onChange={this.handleChange}></input>\n                    </label>\n                    <p></p> \n                    </center>\n                </form>\n            );\n        }\n        else if (type === \"yardage\"){\n            return (\n                <form onSubmit={this.handleSubmit}>\n                    <center>\n                    <label>\n                        Yardage:<br></br>\n                        <input id=\"yardage\" name=\"yardage\"  placeholder=\"yardage\" value={this.state.yardage} onChange={this.handleChange}></input>\n                    </label>\n                    <p></p>  \n                    </center>\n                </form>\n            );\n        }\n        else if (type === \"runningDistance\"){\n            return (\n                <form onSubmit={this.handleSubmit}>\n                    <center>\n                    <label>\n                        Running Distance:<br></br>\n                        <input id=\"runningDistance\" name=\"runningDistance\"  placeholder=\"runningDistance\" value={this.state.runningDistance} onChange={this.handleChange}></input>\n                    </label>\n                    <p></p> \n                    </center>\n                </form>\n            );\n        }\n        else if (type === \"timePar\"){\n            return (\n                <form onSubmit={this.handleSubmit}>\n                    <center>\n                    <label>\n                        Time Par:<br></br>\n                        <input id=\"timePar\" name=\"timePar\"  placeholder=\"timePar\" value={this.state.timePar} onChange={this.handleChange}></input>\n                    </label>\n                    <p></p>\n                    </center>\n                </form>\n            );\n        }\n    }\n\n    render (){\n        return(\n        <div id=\"advancedSearchPage\" className=\"modal\" role=\"dialog\">\n            <div className=\"modal-dialog modal-lg\">\n                <div className=\"modal-content\">\n                    <div className=\"modal-header\">\n                        <h3>Advanced Search</h3>\n                        <button className=\"modal-close\" onClick={this.props.handleClose}>\n                            &times;\n                        </button>\n                    </div>\n                    <div className=\"modal-body\">\n                        <form>\n                            <label>Search By:&nbsp;\n                            <select id=\"searchOptions\" name=\"searchType\" value={this.state.searchType} \n                                className=\"form-control form-center\" onChange={this.handleChange}>\n                                <option></option>\n                                <option value=\"rates\">Rates</option>\n                                <option id=\"RATING\" value=\"rating\">Ratings</option>\n                                <option value=\"yardage\">Holes Yardage</option>\n                                <option value=\"runningDistance\">Running Distance</option>\n                                <option value=\"timePar\">Time Pars</option>\n                            </select> \n                            </label>\n                            <p></p>\n                        </form>\n                        {this.handleSwitch(this.state.searchType)}\n                    </div>\n                    <div className=\"modal-footer\">\n                        {this.state.searchType !== \"\" ? \n                        <button onClick={this.handleSubmit} id=\"submitBtn\" type=\"submit\" style={{width: \"70%\",fontSize: \"36px\"}} \n                            className=\"btn btn-primary btn-color-theme\">\n                            &nbsp;Submit\n                        </button> : null}\n                    </div>\n                </div>\n            </div>\n        </div>\n        );\n    }\n}\n\nexport default AdvancedSearch;","import React from 'react';\nimport AppMode from \"./../AppMode.js\";\nimport ReactTooltip from \"react-tooltip\";\nimport { Navbar, Container, Row, Col, Card, Button, Modal } from \"react-bootstrap\";\nimport FloatingButton from \"./FloatingButton.js\";\nimport RatesModal from \"./RatesModal.js\";\nimport MoreModal from \"./MoreModal.js\";\nimport BookingPage from \"./BookingPage.js\";\nimport AdvancedSearch from \"./AdvancedSearch.js\";\n\nclass SpecificCourses extends React.Component {\n\n    constructor(){\n        super();\n\n        this.state={\n            addCourseClicked: false,\n            getCourseClicked: false,\n            searchCourseClicked: false,\n            searchStart: false,\n            getRatesButtonClicked: false,\n            bookTeeTimeClicked: false,\n            advancedSearchClicked: false,\n            more: false,\n            selectButtonValue: \"Select Course\",\n            courseAmount: 1,\n            oneDelete: false,\n            query: \"\",\n            data: [],\n            filteredData: [],\n            item: \"\",\n            cname: '',\n\n            id: \"\",\n            rating: \"\",\n            review: \"\",\n            picture: \"\",\n            location: \"\",\n            yardage: \"\",\n            runningDistance: \"\",\n            timePar: \"\",\n            bestScore: \"\",\n            recordHolder: \"\"\n        };\n    }\n\n    componentWillMount() {\n        this.getCourse();\n    }\n\n    toggleAddCourseClicked = () => {\n        this.setState(state => ({addCourseClicked: !state.addCourseClicked}));\n    }\n\n    toggleAdvancedSearchClicked = () => {\n        this.setState(state => ({advancedSearchClicked: !state.advancedSearchClicked}));\n    }\n\n    toggleMoreClicked = (key) => {\n        this.setState({item: key});\n        this.setState(state => ({more: !state.more}));\n    }\n\n    toggleGetCourseClicked = () => {\n        this.setState(state => ({getCourseClicked: !state.getCourseClicked}));\n    }\n\n    toggleGetRatesClicked = (key) => {\n        this.setState({item: key});\n        this.setState(state => ({getRatesButtonClicked: !state.getRatesButtonClicked}));\n    }\n\n    toggleBookTeeTimeClicked = (key, cn) => {\n        this.setState({item: key});\n        this.setState({cname: cn});\n        this.setState(state => ({bookTeeTimeClicked: !state.bookTeeTimeClicked}));\n    }\n\n    setSelectButtonValue = (newVal) => {\n        this.setState({selectButtonValue : newVal});\n    }\n\n    setSearchTrue = () => {\n        this.setState({searchStart : true});\n    }\n\n    setSearchFalse = () => {\n        this.setState({searchStart : false});\n    }\n\n    setCourseAmount = (x) => {\n        this.setState({courseAmount: x});\n    }\n\n    setSearchCourseClickedTrue = () => {\n        this.setState({searchCourseClicked : true});\n        this.setSelectButtonValue(\"Clear Selected\");\n    }\n\n    setSearchCourseClickedFalse = () => {\n        this.setState({searchCourseClicked : false});\n        this.setSelectButtonValue(\"Select Course\");\n    }\n\n    toggleOneDelete = () => {\n        this.setState(state => ({oneDelete: !state.oneDelete}));\n    }\n\n    // Show courses that were selected when user searches\n    // This functions is to be used by AdvancedSearch\n    // Advanced Search will do the query of the courses database \n    // with the Advanced information provided\n    // then return the courses that matches the information provided\n    // this page will then render the return courses\n    setFilteredData = (newData) => {\n        this.setState({\n            course: newData.map((c) =>(\n                <Col  style={{marginTop: \"20px\", marginBottom: \"50px\"}}>\n                    <Card key={c.id} style={{ width: \"30rem\", display: \"flex\" }}>\n                    <Card.Img className=\"course-image\" variant=\"top\" src={c.picture}></Card.Img>\n                    <Card.Body>\n                        <Card.Title>{c.courseName}</Card.Title>\n                        <Card.Text>Record Holder: {c.recordHolder}</Card.Text>\n                        <Button type=\"button\" onClick={() => this.toggleMoreClicked(c.id)}>More</Button>&nbsp;\n                        <Button onClick={() => this.toggleGetRatesClicked(c.id)}>Get Rates</Button>&nbsp;\n                        <Button onClick={() => this.toggleBookTeeTimeClicked(c.id, c.courseName)}>Book Tee Time</Button>&nbsp;\n                    </Card.Body>\n                    <Card.Footer>Rating: {c.rating}</Card.Footer>\n                    </Card>\n                </Col>\n            ))\n        });\n    }\n\n    // Handles changing the name of the Select Button to the appropriate values\n    handleInputChange = event => {\n        const query = event.target.value;\n        this.setState(prevState => {\n          const filteredData = prevState.data.filter(element => {\n            return element.id.toLowerCase().includes(query.toLowerCase());\n          });\n\n          if (query == \"\")\n          {\n              this.setSearchFalse();\n              this.setSelectButtonValue(\"Select Course\");\n          }\n          else\n          {\n              this.setSearchTrue();\n              this.setSelectButtonValue(\"Select All \"+ filteredData.length +\" Matching Courses\");\n              this.setCourseAmount(filteredData.length);\n          }\n\n          return {\n            query,\n            filteredData\n          };\n        });\n\n    };\n\n    // Delete course with this id from database\n    handleDelete = async (key) => {\n        const url = '/courses/' + key;\n        const res = await fetch(url, {method: 'DELETE'}); \n        const msg = await res.text();\n        console.log(msg);\n        if (res.status == 200) {\n            if (this.state.oneDelete)\n            {\n                this.setState({\n                    course: '',\n                    courseAmount: 0\n                });\n            }\n            else{\n                for (var i = 0; i < this.state.filteredData.length; i++)\n                {\n                    if (this.state.filteredData[i].id === key)\n                    {\n                        this.state.course.splice(i, 1);\n                        this.setState({\n                            course: this.state.course\n                        });\n                    }\n                }\n            }\n        } else {\n            alert(msg);\n        }  \n    }\n\n    // Retrieve information for all courses for searching usage\n    getCourse = async () => {\n        const url = '/allcourses/';\n        fetch(url)\n        .then((response) => {\n            if (response.status == 200)\n                return response.json();\n            else\n            {\n                throw Error(response.statusText);\n            }\n        })\n        .then((obj) => \n        {\n            console.log(\"GET ALL COURSES SUCCESS!\");\n            let data = JSON.parse(obj);\n            const { query } = this.state;\n            const filteredData = data.filter(element => {\n              return element.id.toLowerCase().includes(query.toLowerCase());\n            });\n    \n            this.setState({\n              data,\n              filteredData\n            });\n        }).catch((error) =>{\n            console.log(\"GET ERROR!\");\n        });\n    }\n\n    // Retrieve information of 1 course provided an id\n    // This function focuses on when user clicks 1 course from the search dropdown\n    // It takes in an 'id' of the clicked course and display its information\n    getSearchedCourse = async (id) => {\n        this.setSearchCourseClickedTrue();\n        this.setSearchFalse();\n        this.setCourseAmount(1);\n        this.toggleOneDelete();\n        const url = '/courses/'+id;\n        fetch(url)\n        .then((response) => {\n            if (response.status == 200)\n                return response.json();\n            else\n            {\n                this.setErrorMsg(\"ERROR: \" + response.statusText);\n                throw Error(response.statusText);\n            }\n        })\n        .then((obj) => \n        {\n            console.log(\"GET SEARCH COURSES SUCCESS!\");\n            let thisCourse = JSON.parse(obj);\n            this.setState({\n                course: (\n                    <Col  style={{marginTop: \"20px\", marginBottom: \"50px\"}}>\n                        <Card key={thisCourse.id} style={{ width: \"30rem\", display: \"flex\" }}>\n                        <Card.Img className=\"course-image\" variant=\"top\" src={thisCourse.picture}></Card.Img>\n                        <Card.Body>\n                            <Card.Title>{thisCourse.courseName}</Card.Title>\n                            <Card.Text>Record Holder: {thisCourse.recordHolder}</Card.Text>\n                            <Button type=\"button\" onClick={() => this.toggleMoreClicked(thisCourse.id)}>More</Button>&nbsp;\n                            <Button onClick={() => this.toggleGetRatesClicked(thisCourse.id)}>Get Rates</Button>&nbsp;\n                            <Button onClick={() => this.toggleBookTeeTimeClicked(thisCourse.id, thisCourse.courseName)}>Book Tee Time</Button>&nbsp;\n                            {this.props.userObj.type === \"operator\" ? \n                            <Button style={{display: 'flex', float: 'right'}} onClick={() => this.handleDelete(thisCourse.id)}>&times;</Button>\n                            : null}\n                        </Card.Body>\n                        <Card.Footer>Rating: {thisCourse.rating}</Card.Footer>\n                        </Card>\n                    </Col>\n                )\n            });\n        }).catch((error) =>{\n            console.log(error);\n        });\n    }\n\n    // Handle event when user clicks into 1 of the choices provided when searching for a course\n    // This function shows courses when the Search Button is clicked\n    // The courses showed are the courses that has been filtered with the search input change\n    handleClick = (event) =>{\n        event.preventDefault();\n        if (this.state.selectButtonValue == \"Select Course\")\n        {\n\n        }\n        else if (this.state.selectButtonValue == \"Clear Selected\")\n        {\n            this.setSearchCourseClickedFalse();\n            this.setSearchFalse();\n            this.setState({query: \"\"});\n        }\n        else{\n            this.setSearchCourseClickedTrue();\n            this.setSearchFalse();\n            this.setState({\n                course: this.state.filteredData.map((c) =>(\n                    <Col  style={{marginTop: \"20px\", marginBottom: \"50px\"}}>\n                        <Card key={c.id} style={{ width: \"30rem\", display: \"flex\" }}>\n                        <Card.Img className=\"course-image\" variant=\"top\" src={c.picture}></Card.Img>\n                        <Card.Body>\n                            <Card.Title>{c.courseName}</Card.Title>\n                            <Card.Text>Record Holder: {c.recordHolder}</Card.Text>\n                            <Button type=\"button\" onClick={() => this.toggleMoreClicked(c.id)}>More</Button>&nbsp;\n                            <Button onClick={() => this.toggleGetRatesClicked(c.id)}>Get Rates</Button>&nbsp;\n                            <Button onClick={() => this.toggleBookTeeTimeClicked(c.id, c.courseName)}>Book Tee Time</Button>&nbsp;\n                            {this.props.userObj.type === \"operator\" ? \n                            <Button style={{display: 'flex', float: 'right'}} onClick={() => this.handleDelete(c.id)}>&times;</Button>\n                            : null}\n                        </Card.Body>\n                        <Card.Footer>Rating: {c.rating}</Card.Footer>\n                        </Card>\n                    </Col>\n                ))\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div id=\"specificCoursePage\">\n                <div style={{display: 'flex'}}>\n                    <h3>Find Speedgolf-Friendly Courses:&nbsp;</h3>\n                    <h3>\n                        <a data-tip=\"React-tooltip\">&#9432;</a>\n                        <ReactTooltip variant=\"bottom\" effect=\"solid\">\n                            <span>\n                                Enter search term or course name to see matching courses, or enter a space to see ALL courses in the database.\n                                Click on course in the list to select it, or click on 'Select' button to select all matching courses.\n                            </span>\n                        </ReactTooltip>\n                    </h3>\n                </div>\n\n                <input style={{width: '60%'}} placeholder=\"Enter course name or search term\"\n                 value={this.state.query} onChange={this.handleInputChange}\n                 disabled={this.state.searchCourseClicked ? true:false}></input>&nbsp;\n                <Button onClick={this.handleClick}>{this.state.selectButtonValue}</Button>&nbsp;\n                <Button id=\"advancedSearchBtn\" onClick={this.toggleAdvancedSearchClicked} disabled={this.state.searchCourseClicked ? true:false}>Advanced Search</Button>\n                {this.state.searchStart ? <div>{this.state.filteredData.map(i => <a className=\"course-search-list\" onClick={() => this.getSearchedCourse(i.id)}>{i.id}</a>)}</div> : null}\n                \n                {this.state.searchCourseClicked ? <div style={{marginTop: \"50px\"}}><h3>{this.state.courseAmount} Course Selected: </h3>\n                <Container fluid={true}>\n                    <Row noGutters>  \n                        {this.state.course}\n                    </Row>\n                </Container>  </div>               \n                 : null}\n\n\n                {this.state.advancedSearchClicked ? \n                    <AdvancedSearch handleClose={this.toggleAdvancedSearchClicked}\n                    searchStart={this.setSearchCourseClickedTrue}\n                    toggleMoreClicked={this.toggleMoreClicked}\n                    toggleGetRatesClicked={this.toggleGetRatesClicked}\n                    toggleBookTeeTimeClicked={this.toggleBookTeeTimeClicked}\n                    course={this.state.item}  changeMode={this.props.changeMode} \n                    refreshOnUpdate={this.props.refreshOnUpdate} mode={this.props.mode} \n                    setFilteredData={this.setFilteredData}\n                    setCourseAmount={this.setCourseAmount}\n                    />\n                    : null}\n                {this.state.getRatesButtonClicked ? \n                    <RatesModal handleClose={this.toggleGetRatesClicked}\n                    course={this.state.item}  changeMode={this.props.changeMode} \n                    refreshOnUpdate={this.props.refreshOnUpdate} mode={this.props.mode} \n                    />\n                    : null}\n                {this.state.more ? \n                    <MoreModal handleClose={this.toggleMoreClicked} \n                        course={this.state.item}  changeMode={this.props.changeMode} \n                        refreshOnUpdate={this.props.refreshOnUpdate} mode={this.props.mode} \n                    />\n                    : null}\n                {this.state.bookTeeTimeClicked ? \n                    <BookingPage handleClose={this.toggleBookTeeTimeClicked} userObj={this.props.userObj} courseName={this.state.cname}\n                    course={this.state.item} changeMode={this.props.changeMode}\n                    refreshOnUpdate={this.props.refreshOnUpdate} mode={this.props.mode} \n                    />\n                    : null}\n            </div>\n        );\n    }   \n}\n\nexport default SpecificCourses;","import React from 'react';\nimport AppMode from '../AppMode';\n\nclass AddCourses extends React.Component {\n\n    constructor(){\n        super();\n\n        this.state={\n            courseName: \"\",\n            id: \"\",\n            rating: \"\",\n            review: \"\",\n            picture: \"\",\n            location: \"\",\n            yardage: \"\",\n            runningDistance: \"\",\n            timePar: \"\",\n            bestScore: \"\",\n            recordHolder: \"\",\n            rateStandard: \"\",\n            rateSenior: \"\"\n        };\n    }\n\n    handleChange = (event) =>{\n        this.setState({[event.target.name]: event.target.value});\n    }\n\n    // sends a POST request to the backend to add a course to do the courses schema\n    addCourse = async (newData) => {\n        console.log(newData);\n        const url = '/courses/' + this.state.id;\n        const res = await fetch(url, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n                },\n            method: 'POST',\n            body: JSON.stringify(newData)}); \n        const msg = await res.text();\n        if (res.status == 200) {\n            console.log(\"SUCCESS\");\n            console.log(msg);\n            this.props.changeMode(AppMode.COURSES_ALL);\n        } else {\n            console.log(\"FAILURE\");\n            console.log(msg);\n        }\n    }\n\n    // Handles form submit\n    // Save the state's information for submission\n    handleSubmit = (event) => {\n        event.preventDefault();\n        let courseData = this.state;\n        this.addCourse(courseData);\n    }\n\n    render() {\n        return(\n            <div id=\"addCoursePage\">\n                <form onSubmit={this.handleSubmit} style={{marginBottom: \"50px\"}}>\n                    <center>\n                    <h3>Add Course</h3>\n                    <label>\n                        Course ID:<br></br>\n                        <input id=\"id\" name=\"id\" placeholder=\"id\" value={this.state.id} onChange={this.handleChange} required></input>\n                    </label>\n                    <p></p>\n                    <label>\n                        Course Name:<br></br>\n                        <input id=\"courseName\" name=\"courseName\" placeholder=\"courseName\" value={this.state.courseName} onChange={this.handleChange} required></input>\n                    </label>\n                    <p></p>\n                    <label>\n                        Standard Rate: $<br></br>\n                        <input id=\"rateStandard\" name=\"rateStandard\" placeholder=\"rateStandard\" value={this.state.rateStandard} onChange={this.handleChange} required></input>\n                    </label>\n                    <p></p>\n                    <label>\n                        Senior Rate: $<br></br>\n                        <input id=\"rateSenior\" name=\"rateSenior\" placeholder=\"rateSenior\" value={this.state.rateSenior} onChange={this.handleChange} required></input>\n                    </label>\n                    <p></p>\n                    <label>\n                        Rating:<br></br>\n                        <input id=\"rating\" name=\"rating\" placeholder=\"rating\" value={this.state.rating} onChange={this.handleChange} required></input>\n                    </label>\n                    <p></p>\n                    <label>\n                        Review:<br></br>\n                        <input id=\"review\" name=\"review\"  placeholder=\"review\" value={this.state.review} onChange={this.handleChange} required></input>\n                    </label>\n                    <p></p>\n                    <label>\n                        Picture:<br></br>\n                        <input id=\"picture\" name=\"picture\"  placeholder=\"picture\" value={this.state.picture} onChange={this.handleChange} required></input>\n                    </label>\n                    <p></p>\n                    <label>\n                        Location:<br></br>\n                        <input id=\"location\" name=\"location\"  placeholder=\"location\" value={this.state.location} onChange={this.handleChange} required></input>\n                    </label>\n                    <p></p>\n                    <label>\n                        Yardage:<br></br>\n                        <input id=\"yardage\" name=\"yardage\"  placeholder=\"yardage\" value={this.state.yardage} onChange={this.handleChange} required></input>\n                    </label>\n                    <p></p>\n                    <label>\n                        Running Distance:<br></br>\n                        <input id=\"runningDistance\" name=\"runningDistance\"  placeholder=\"runningDistance\" value={this.state.runningDistance} onChange={this.handleChange} required></input>\n                    </label>\n                    <p></p>\n                    <label>\n                        Time Par:<br></br>\n                        <input id=\"timePar\" name=\"timePar\"  placeholder=\"timePar\" value={this.state.timePar} onChange={this.handleChange} required></input>\n                    </label>\n                    <p></p>\n                    <label>\n                        Best Score:<br></br>\n                        <input id=\"bestScore\" name=\"bestScore\"  placeholder=\"bestScore\" value={this.state.bestScore} onChange={this.handleChange} required></input>\n                    </label>\n                    <p></p>\n                    <label>\n                        Record Holder:<br></br>\n                        <input id=\"recordHolder\" name=\"recordHolder\"  placeholder=\"recordHolder\" value={this.state.recordHolder} onChange={this.handleChange} required></input>\n                    </label>\n                    <p></p>\n                    <button id=\"submitBtn\" type=\"submit\" style={{width: \"70%\",fontSize: \"36px\"}} \n                        className=\"btn btn-primary btn-color-theme\">\n                        &nbsp;Submit\n                    </button>\n                    </center>\n                </form>\n            </div>\n        );\n    }   \n}\n\nexport default AddCourses;","import React from 'react';\nimport { Navbar, Container, Row, Col, Card, Button } from \"react-bootstrap\";\n\nclass AllAppointments extends React.Component {\n\n    constructor(){\n        super();\n    \n        this.state={\n            deleteClicked: false\n        };\n    }\n\n    // Get information of all courses on render\n    componentDidMount(){\n        this.getAllAppointments();\n    }\n\n    toggleDeleteClicked = () => {\n        this.setState(state => ({deleteClicked: !state.deleteClicked}));\n    }\n\n    handleDeleteAll = (user, course, d, t, i) =>{\n        this.handleDelete(user, course, d, t, i);\n        this.handleDeleteFromDB(user, course, d, t);\n    }\n\n    // Delete course with this id from database\n    handleDelete = async (u, c, d, t, i) => {\n        const url = '/appointments/'+u+'/'+c+'/'+d+'/'+t+'/'+i;\n        const res = await fetch(url, {method: 'DELETE'}); \n        const msg = await res.text();\n        console.log(msg);\n        if (res.status == 200) {\n            console.log(\"APPOINTMENT CANCELLED\");\n            this.getAllAppointments();\n        } else {\n            alert(msg);\n        }  \n    }\n\n    handleDeleteFromDB = async(u, c, d, t) => {\n        const url = '/appointments_op/'+u+'/'+c+'/'+d+'/'+t;\n        const res = await fetch(url, {method: 'DELETE'}); \n        const msg = await res.text();\n        console.log(msg);\n        if (res.status == 200) {\n            console.log(\"APPOINTMENT CANCELLED\");\n            this.getAllAppointments();\n        } else {\n            alert(msg);\n        }  \n    }\n\n    // Get information of all courses to show on page\n    getAllAppointments = async () => {\n        const url = '/allappointments_op/';\n        fetch(url)\n        .then((response) => {\n            if (response.status == 200)\n                return response.json();\n            else\n            {\n                throw Error(response.statusText);\n            }\n        })\n        .then((obj) => \n        {\n            console.log(\"GET SUCCESS!\");\n            let thisCourse = JSON.parse(obj);\n            this.setState({\n                course: thisCourse.map((c) =>(\n                    <Col  style={{marginTop: \"20px\", marginBottom: \"50px\"}}>\n                        <Card key={c.userId} style={{ width: \"30rem\", display: \"flex\" }}>                      \n                        <Card.Body>\n                            <Button style={{float: 'right'}} onClick={() => this.handleDeleteAll(c.username, c.courseName, c.date, c.time, c.userId)}>&times;</Button>\n                            <Card.Title>Appointment for {c.username}</Card.Title>\n                            <Card.Text>Location: {c.courseName}</Card.Text>\n                            <Card.Text>On: {c.date}</Card.Text>\n                            <Card.Text>At: {c.time}</Card.Text>\n                        </Card.Body>\n                        </Card>\n                    </Col>\n                ))\n            });\n        }).catch((error) =>{\n            console.log(\"GET ERROR!\");\n        });\n    }\n\n    render() {\n        return(\n            <div id=\"allAppointmentsPage\">\n                <h1></h1>\n                <table >\n                    <tbody>\n                    <Container fluid={true}>\n                        <Row noGutters>                    \n                            {this.state.course}\n                        </Row>\n                    </Container> \n                    </tbody>\n                </table>\n        </div>\n        );\n    }\n}\n\nexport default AllAppointments;","import React from 'react';\n\nclass PaymentDialog extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n                    name: '',\n                    number: 0,\n                    expDate: ''\n                };\n    }\n\n    componentDidMount(){\n        this.getCard();\n    }\n\n    getCard = async() => {\n        const url = '/cards/'+this.props.userObj.id;\n        fetch(url)\n        .then((response) => {\n            if (response.status == 200)\n                return response.json();\n            else\n            {\n                throw Error(response.statusText);\n            }\n        })\n        .then((obj) => \n        {\n            console.log(\"GET SUCCESS!\");\n            let thisCard = JSON.parse(obj);\n            this.setState({\n                card: thisCard.map((c) =>(\n                    {\n                        name: c.name,\n                        number: c.number,\n                        expDate: c.expDate\n                    }\n                ))\n            });\n            \n        }).catch((error) =>{\n            console.log(\"GET ERROR!\");\n        });\n    }\n    \n    handleChange = (event) => {\n        this.setState({[event.target.name]: event.target.value});\n    }\n\n    handleSubmit = (event) =>{\n        event.preventDefault();\n        let data = this.state;\n        console.log(data);\n        console.log(this.state.card);\n        if (this.state.card[0].name === data.name && this.state.card[0].number === parseInt(data.number) && this.state.card[0].expDate === data.expDate)\n        {\n            let i = this.props.info;\n            this.props.handlePayment(i.userId,i.username,i.courseName,i.date,i.time,i.paid);\n            this.props.handleUserPayment(i.mmId,i.userId,i.username,i.courseName,i.date,i.time,i.paid);\n            this.props.close();\n        }\n        else {\n            alert(\"INVALID CARD\");\n        }\n    }\n\n    render() {\n        return (\n        <div id=\"aboutModal\" className=\"modal payment-dialogue\" role=\"dialog\">\n        <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <center>\n                <h3 className=\"modal-title\"><b>Enter Card Information</b></h3>\n              </center>\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\n                 &times;</button>\n            </div>\n            <div className=\"modal-body\">\n              <form>\n                  <center>\n                    <label>\n                        Name on Card: <br></br>\n                        <input id=\"name\" name=\"name\" placeholder=\"name\" value={this.state.name} onChange={this.handleChange} required></input>\n                    </label>\n                    <p></p>\n                    <label>\n                        Card Number: <br></br>\n                        <input id=\"number\" name=\"number\" placeholder=\"number\" value={this.state.number} onChange={this.handleChange} required></input>\n                    </label>\n                    <p></p>\n                    <label>\n                        Expiration Date: (format: MM/YY)<br></br>\n                        <input id=\"expDate\" name=\"expDate\" placeholder=\"expDate\" value={this.state.expDate} onChange={this.handleChange} required></input>\n                    </label>\n                    <p></p>\n                  </center>\n              </form>\n            </div>\n            <div className=\"modal-footer\">\n                  <button className=\"btn btn-danger\" onClick={this.handleSubmit}>\n                  Verify Card</button>\n            </div>\n        </div>\n        </div>\n        );\n    }\n}\n\nexport default PaymentDialog;","import React from 'react';\nimport AppMode from '../AppMode';\nimport { Navbar, Container, Row, Col, Card, Button } from \"react-bootstrap\";\nimport { async } from 'regenerator-runtime';\nimport PaymentDialog from './PaymentDialog';\n\nclass MyAppointments extends React.Component {\n\n    constructor(){\n        super();\n    \n        this.state={\n            matched: false,\n            payClicked: false\n        };\n    }\n\n    // Get information of all courses on render\n    componentDidMount(){\n        this.getMyAppointments();\n    }\n\n    toggleSetMatched = (s) => {\n        this.setState(state => ({matched: !state.matched}));\n    }\n\n    togglePayClicked = () => {\n        this.setState(state => ({payClicked: !state.payClicked}));\n    }\n\n    handleDeleteAll = (user, course, d, t, i) =>{\n        this.handleDelete(user, course, d, t, i);\n        this.handleDeleteFromDB(user, course, d, t);\n    }\n\n    handleAllPayment = (mid, aid, u, c, d, t, p) => {\n        if (p === \"true\")\n            alert(\"You've already paid!\");\n        else{\n            this.setState({info: {\n                mmId: mid,\n                userId: aid,\n                username: u,\n                courseName: c,\n                date: d,\n                time: t,\n                paid: p\n            }});\n            this.togglePayClicked();\n            // this.handlePayment(aid, u, c, d, t, p);\n            // this.handleUserPayment(mid, aid, u, c, d, t, p);\n        }\n    }   \n\n    handleUserPayment = async (mid, aid, u, c, d, t, p) => {\n        let newData = {\n            userId: aid,\n            username: u,\n            courseName: c,\n            date: d,\n            time: t,\n            paid: \"true\"\n        }\n        const url = '/appointments/'+this.props.userObj.id+'/'+mid;\n        const res = await fetch(url, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n                },\n            method: 'PUT',\n            body: JSON.stringify(newData)}); \n        const msg = await res.text();\n        console.log(msg);\n        if (res.status === 200) {\n            alert(\"Paid\");\n            this.getMyAppointments();\n        } else {\n            this.props.refreshOnUpdate(AppMode.COURSES_MYAPPT);\n        }\n    }\n\n    handlePayment = async(aid, u, c, d, t, p) => {\n        let newData = {\n            userId: aid,\n            username: u,\n            courseName: c,\n            date: d,\n            time: t,\n            paid: \"true\"\n        }\n        const url = '/appointments_op/'+u+'/'\n                                        +c+'/'\n                                        +d+'/'\n                                        +t;\n        const res = await fetch(url, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n                },\n            method: 'PUT',\n            body: JSON.stringify(newData)}); \n        const msg = await res.text();\n        console.log(msg);\n        if (res.status === 200) {\n            alert(\"Paid\");\n            this.getMyAppointments();\n        } else {\n            this.props.refreshOnUpdate(AppMode.COURSES_MYAPPT);\n        }\n    }\n\n    // Delete course with this id from database\n    handleDelete = async (u, c, d, t, i) => {\n        const url = '/appointments/'+u+'/'+c+'/'+d+'/'+t+'/'+i;\n        const res = await fetch(url, {method: 'DELETE'}); \n        const msg = await res.text();\n        console.log(msg);\n        if (res.status == 200) {\n            console.log(\"APPOINTMENT CANCELLED\");\n            this.getMyAppointments();\n        } else {\n            alert(msg);\n        }  \n    }\n\n    handleDeleteFromDB = async(u, c, d, t) => {\n        const url = '/appointments_op/'+u+'/'+c+'/'+d+'/'+t;\n        const res = await fetch(url, {method: 'DELETE'}); \n        const msg = await res.text();\n        console.log(msg);\n        if (res.status == 200) {\n            console.log(\"APPOINTMENT CANCELLED\");\n            this.getMyAppointments();\n        } else {\n            alert(msg);\n        }  \n    }\n\n    // Get information of all courses to show on page\n    getMyAppointments = async () => {\n        const url = '/appointments/'+this.props.userObj.id;\n        fetch(url)\n        .then((response) => {\n            if (response.status == 200)\n                return response.json();\n            else\n            {\n                throw Error(response.statusText);\n            }\n        })\n        .then((obj) => \n        {\n            console.log(\"GET SUCCESS!\");\n            let thisCourse = JSON.parse(obj);\n            this.setState({\n                course: thisCourse.map((c) =>(\n                    <Col  style={{marginTop: \"20px\", marginBottom: \"50px\"}}>\n                        <Card key={c.userId} style={{ width: \"30rem\", display: \"flex\" }}>                      \n                        <Card.Body>\n                            <Button style={{float: 'right'}} onClick={() => this.handleDeleteAll(c.username, c.courseName, c.date, c.time, c.userId)}>&times;</Button>\n                            <Card.Title>Appointment for {c.username}</Card.Title>\n                            <Card.Text>Location: {c.courseName}</Card.Text>\n                            <Card.Text>On: {c.date}</Card.Text>\n                            <Card.Text>At: {c.time}</Card.Text>\n                            <Button style={{float: 'right'}} onClick={() => this.handleAllPayment(c._id, c.userId, c.username, c.courseName, c.date, c.time, c.paid)}>{c.paid === \"true\" ? \"Paid\": \"Pay\"}</Button>\n                        </Card.Body>\n                        </Card>\n                    </Col>\n                ))\n            });\n        }).catch((error) =>{\n            console.log(\"GET ERROR!\");\n        });\n    }\n\n    render() {\n        return(\n            <div id=\"myAppointmentsPage\">\n                <h1></h1>\n                <table >\n                    <tbody>\n                    <Container fluid={true}>\n                        <Row noGutters>                    \n                            {this.state.course}\n                        </Row>\n                    </Container> \n                    </tbody>\n                </table>\n                {this.state.payClicked ? <PaymentDialog userObj={this.props.userObj} info={this.state.info}\n                toggleSetMatched={this.toggleSetMatched} close={this.togglePayClicked}\n                handleUserPayment={this.handleUserPayment} handlePayment={this.handlePayment}></PaymentDialog> :null}\n        </div>\n        );\n    }\n}\n\nexport default MyAppointments;","import React from 'react';\nimport AppMode from '../AppMode';\nimport AllCourses from './AllCourses.js';\nimport NearbyCourses from './NearbyCourses.js';\nimport SpecificCourses from './SpecificCourses.js';\nimport AddCourses from './AddCourses.js';\nimport AllAppointments from './AllAppointments.js';\nimport MyAppointments from './MyAppointments';\n\nclass CoursesPage extends React.Component {\n    render() {\n        switch(this.props.mode){\n            case AppMode.COURSES:\n                return (<SpecificCourses userObj={this.props.userObj} mode={this.props.mode} changeMode={this.props.changeMode} refreshOnUpdate={this.props.refreshOnUpdate}/>);\n            case AppMode.COURSES_NEARBY:\n                return (<NearbyCourses changeMode={this.props.changeMode} mode={this.props.mode} refreshOnUpdate={this.props.refreshOnUpdate}/>);\n            case AppMode.COURSES_ALL:\n                return (<AllCourses changeMode={this.props.changeMode} mode={this.props.mode} refreshOnUpdate={this.props.refreshOnUpdate} userObj={this.props.userObj}/>);\n            case AppMode.COURSES_ADD:\n                return (<AddCourses changeMode={this.props.changeMode}/>);\n            case AppMode.COURSES_APPT:\n                return (<AllAppointments userObj={this.props.userObj} changeMode={this.props.changeMode}/>);\n            case AppMode.COURSES_MYAPPT:\n                return (<MyAppointments userObj={this.props.userObj} changeMode={this.props.changeMode} refreshOnUpdate={this.props.refreshOnUpdate}/>);\n        }\n    }   \n}\n\nexport default CoursesPage;","import React from 'react';\n\nclass AboutBox extends React.Component {\n\nrender() {\n    return (\n        <div className=\"modal\" role=\"dialog\">\n        <div className=\"modal-dialog modal-lg\">\n            <div className=\"modal-content\">\n            <div className=\"modal-header\">\n                <h3>About SpeedScore</h3>\n                <button className=\"modal-close\" onClick={this.props.close}>\n                    &times;\n                </button>\n            </div>\n            <div className=\"modal-body\">\n                <img\n                src=\"https://dl.dropboxusercontent.com/s/awuwr1vpuw1lkyl/SpeedScore4SplashLogo.png\"\n                height=\"200\" width=\"200\"/>\n                <h3>The World's First and Only Suite of Apps for\n                Speedgolf</h3>\n                <p>Version CptS 489 Fa20 Complete (MERN)<br/>\n                &copy; 2017-20 The Professor of Speedgolf. All rights\n                reserved.\n                </p>\n                <div style={{textAlign: \"left\"}}>\n                <p>SpeedScore apps support</p>\n                <ul>\n                <li>live touranment scoring (<i>SpeedScore Live&reg;</i>)</li>\n                <li>tracking personal speedgolf rounds and sharing results\n                (<i>SpeedScore Track&reg;</i>)</li>\n                <li>finding speedgolf-friendly courses, booking tee times, and\n                paying to play speedgolf by the minute (<i>SpeedScore\n                Play&reg;</i>)</li>\n                </ul>\n                <p>SpeedScore was first developed by Dr. Chris Hundhausen,\n                associate professor of computer science at Washington State\n                University and the <i>Professor of Speedgolf</i>, with support\n                from Scott Dawley, CEO of Speedgolf USA, LLC.</p>\n                <p>For more information on SpeedScore, visit <a\n                href=\"http://speedscore.live\" target=\"_blank\">SpeedScore's web\n                site</a>. For more information on speedgolf, visit <a\n                href=\"http://playspeedgolf.com\"\n                target=\"_blank\">playspeedgolf.com</a> and <a\n                href=\"http://usaspeedgolf.com\" target=\"_blank\">Speedgolf\n                USA</a>.</p>\n                </div>\n            </div>\n            <div className=\"modal-footer\">\n                <button className=\"btn btn-primary btn-color-theme\"\n                onClick={this.props.close}>OK</button>\n                </div>\n            </div>\n        </div>\n        </div>\n    );\n    }\n}\n\nexport default AboutBox;","import React from 'react';\n\nclass AddCardDialog extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n                    name: '',\n                    number: 0,\n                    expDate: '',\n                    cardId: '',\n                    deleteClicked: false\n                };\n    }\n    \n    //componentDidMount -- If we are editing an existing card, we need to grab the data from\n    //the database and push them into the state.\n    async componentDidMount() {\n        //obtain current card data from database and push into state\n        const url = '/cards/' + this.props.userId;\n        const res = await fetch(url);\n        const json = await res.json();\n        const thisCard = JSON.parse(json);\n        if (thisCard.length !== 0)\n        {\n            this.props.setCardExist();\n            this.setState({\n                name: thisCard[0].name,\n                number: thisCard[0].number,\n                expDate: thisCard[0].expDate,\n                cardId: thisCard[0]._id\n            });\n        }\n        else{\n            this.setState({\n                name: '',\n                number: 0,\n                expDate: ''\n            }); \n        }\n    }\n    \n    handleChange = (event) => {\n        this.setState({[event.target.name]: event.target.value});\n    }\n    \n    addCard = async(data) =>{\n        console.log(data);\n        if (this.props.cardExist)\n        {\n            const url = '/cards/' + this.props.userId + '/' + this.state.cardId;\n            let res;\n            res = await fetch(url, {\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                    },\n                method: 'PUT',\n                body: JSON.stringify(data)}); \n            if (res.status == 200) { //successful account creation!\n            {\n                alert(\"Card Edited\");\n                this.props.setCardExist();\n            }\n            } else { //Unsuccessful account update\n                //Grab textual error message\n                const resText = await res.text();\n                alert(resText);\n            }\n        }\n        else\n        {\n            const url = '/cards/' + this.props.userId;\n            let res;\n            res = await fetch(url, {\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                    },\n                method: 'POST',\n                body: JSON.stringify(data)}); \n            if (res.status == 200) { //successful account creation!\n            {\n                alert(\"Card Added\");\n                this.props.setCardExist();\n            }\n            } else { //Unsuccessful account update\n                //Grab textual error message\n                const resText = await res.text();\n                alert(resText);\n            }\n        }\n        this.props.close();\n    }\n\n    handleSubmit = (event) =>{\n        event.preventDefault();\n        let data = {\n            name: this.state.name,\n            number: parseInt(this.state.number),\n            expDate: this.state.expDate\n        }\n        this.addCard(data);\n    }\n\n    handleDelete = async() => {\n        const url = '/cards/' + this.props.userObj.id + '/' + this.state.cardId;\n        const res = await fetch(url, {method: 'DELETE'}); \n        const msg = await res.text();\n        if (res.status == 200) {\n            alert(\"Card Deleted!\");\n            this.setState({deleteClicked: false});\n            this.props.close();\n            this.props.setCardDeleted();\n        } else {\n            alert(msg);\n        }  \n    }\n\n    render() {\n        return (\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\n        <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <center>\n                <h3 className=\"modal-title\"><b>Enter Card Information</b></h3>\n              </center>\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\n                 &times;</button>\n            </div>\n            <div className=\"modal-body\">\n              <form>\n                  <center>\n                    <label>\n                        Name on Card: <br></br>\n                        <input id=\"name\" name=\"name\" placeholder=\"name\" value={this.state.name} onChange={this.handleChange} required></input>\n                    </label>\n                    <p></p>\n                    <label>\n                        Card Number: <br></br>\n                        <input id=\"number\" name=\"number\" placeholder=\"number\" value={this.state.number} onChange={this.handleChange} required></input>\n                    </label>\n                    <p></p>\n                    <label>\n                        Expiration Date: (format: MM/YY)<br></br>\n                        <input id=\"expDate\" name=\"expDate\" placeholder=\"expDate\" value={this.state.expDate} onChange={this.handleChange} required></input>\n                    </label>\n                    <p></p>\n                  </center>\n              </form>\n            </div>\n            <div className=\"modal-footer\">\n                  <button className=\"btn btn-success\" onClick={this.handleSubmit}>\n                  {this.props.cardExist ? \"Edit Card\" : \"Add Card\"}</button>\n                  {this.props.cardExist ? <button className=\"btn btn-danger\" onClick={() => this.setState({deleteClicked: true})}>\n                  Delete Card</button> : null}\n            </div>\n        </div>\n        {this.state.deleteClicked ? \n                <div className=\"modal\" role=\"dialog\">\n                    <div className=\"modal-dialog modal-lg\">\n                        <div className=\"modal-content\">\n                            <div className=\"modal-header\">\n                                <h3>Are you sure you want to delete the card?</h3>\n                            </div>\n                            <div className=\"modal-body\">\n                                <button className=\"btn btn-danger\" onClick={this.handleDelete}>\n                                    YES\n                                </button>\n                                <button className=\"btn btn-success\" onClick={() => this.setState({deleteClicked: false})}>\n                                    CANCEL\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n        : null}\n        </div>\n        );\n    }\n}\n\nexport default AddCardDialog;","import React from 'react';\nimport NavBar from './NavBar.js';\nimport SideMenu from './SideMenu.js';\nimport ModeBar from './ModeBar.js';\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js'\nimport LoginPage from './LoginPage.js';\nimport AppMode from \"./../AppMode.js\";\nimport FeedPage from './FeedPage.js';\nimport Rounds from './Rounds.js';\nimport CoursesPage from './CoursesPage.js';\nimport AboutBox from './AboutBox.js';\nimport AddCardDialog from './AddCardDialog.js';\n\nconst modeTitle = {};\nmodeTitle[AppMode.LOGIN] = \"Welcome to SpeedScore\";\nmodeTitle[AppMode.FEED] = \"Activity Feed\";\nmodeTitle[AppMode.ROUNDS] = \"My Rounds\";\nmodeTitle[AppMode.ROUNDS_LOGROUND] = \"Log New Round\";\nmodeTitle[AppMode.ROUNDS_EDITROUND] = \"Edit Round\";\nmodeTitle[AppMode.COURSES] = \"Search Courses\";\nmodeTitle[AppMode.COURSES_NEARBY] = \"Nearby Courses\";\nmodeTitle[AppMode.COURSES_ALL] = \"All Speedgolf-Friendly Courses\";\nmodeTitle[AppMode.COURSES_ADD] = \"Add a Course\";\nmodeTitle[AppMode.COURSES_APPT] = \"All Appointments\";\nmodeTitle[AppMode.COURSES_MYAPPT] = \"My Appointments\";\n\nconst modeToPage = {};\nmodeToPage[AppMode.LOGIN] = LoginPage;\nmodeToPage[AppMode.FEED] = FeedPage;\nmodeToPage[AppMode.ROUNDS] = Rounds;\nmodeToPage[AppMode.ROUNDS_LOGROUND] = Rounds;\nmodeToPage[AppMode.ROUNDS_EDITROUND] = Rounds;\nmodeToPage[AppMode.COURSES] = CoursesPage;\nmodeToPage[AppMode.COURSES_NEARBY] = CoursesPage;\nmodeToPage[AppMode.COURSES_ALL] = CoursesPage;\nmodeToPage[AppMode.COURSES_ADD] = CoursesPage;\nmodeToPage[AppMode.COURSES_APPT] = CoursesPage;\nmodeToPage[AppMode.COURSES_MYAPPT] = CoursesPage;\n\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {mode: AppMode.LOGIN,\n                  menuOpen: false,\n                  authenticated: false,\n                  userObj: {displayName: \"\", profilePicURL: \"\"},\n                  editAccount: false,\n                  showEditAccountDialog: false,\n                  statusMsg: \"\",\n                  showAboutDialog: false,\n                  addCardClicked: false,\n                  cardExist: false\n                 };\n  }\n\n  //componentDidMount\n  componentDidMount() {\n    if (!this.state.authenticated) { \n      //Use /auth/test route to (re)-test authentication and obtain user data\n      fetch(\"/auth/test\")\n        .then((response) => response.json())\n        .then((obj) => {\n          if (obj.isAuthenticated) {\n            this.setState({\n              userObj: obj.user,\n              authenticated: true,\n              mode: AppMode.COURSES_ALL //We're authenticated so can get into the app.\n            });\n          }\n        }\n      )\n    } \n  }\n\n  //refreshOnUpdate(newMode) -- Called by child components when user data changes in \n  //the database. The function calls the users/:userid (GET) route to update \n  //the userObj state var based on the latest database changes, and sets the \n  //mode state var is set to newMode. After this method is called, the\n  //App will re-render itself, forcing the new data to \n  //propagate to the child components when they are re-rendered.\n  refreshOnUpdate = async(newMode) => {\n    let response = await fetch(\"/users/\" + this.state.userObj.id);\n    response = await response.json();\n    const obj = JSON.parse(response);\n    this.setState({\n      userObj: obj,\n      mode: newMode\n    });\n  }\n\n\n  handleChangeMode = (newMode) => {\n    this.setState({mode: newMode});\n  }\n\n  openMenu = () => {\n    this.setState({menuOpen : true});\n  }\n  \n  closeMenu = () => {\n    this.setState({menuOpen : false});\n  }\n\n  toggleMenuOpen = () => {\n    this.setState(prevState => ({menuOpen: !prevState.menuOpen}));\n  }\n\n  setUserId = (Id) => {\n    this.setState({userId: Id,\n                   authenticated: true});\n  }\n\n  showEditAccount = () => {\n    this.setState({showEditAccountDialog: true});\n\n  }\n\n  cancelEditAccount = () => {\n    this.setState({showEditAccountDialog: false});\n  }\n\n  setUserObjType = (newType) => {\n    this.setState({userObj: newType});\n  }\n\n  toggleAddCardClicked = () => {\n    this.setState(state => ({addCardClicked: !state.addCardClicked}));\n  }\n\n  //editAccountDone -- called after successful edit or\n  //deletion of user account. msg contains the status\n  //message and deleted indicates whether an account was\n  //edited (deleted == false) or deleted (deleted == true)\n  editAccountDone = (msg, deleted) => {\n    if (deleted) {\n      this.setState({showEditAccountDialog: false,\n                     statusMsg: msg,\n                     mode: AppMode.LOGIN});\n      } else {\n        this.setState({showEditAccountDialog: false,\n          statusMsg: msg});\n      }\n  }\n\n  closeStatusMsg = () => {\n    this.setState({statusMsg: \"\"});\n  }\n\n  render() {\n    const ModePage = modeToPage[this.state.mode];\n    return (\n      <div className=\"padded-page\">\n        {this.state.showAboutDialog ? \n          <AboutBox close={() => this.setState({showAboutDialog: false})}/> : null}\n        {this.state.statusMsg != \"\" ? <div className=\"status-msg\">\n              <span>{this.state.statusMsg}</span>\n              <button className=\"modal-close\" onClick={this.closeStatusMsg}>\n                  <span className=\"fa fa-times\"></span></button></div> : null}\n        {this.state.showEditAccountDialog ? \n            <CreateEditAccountDialog \n              create={false} \n              userId={this.state.userObj.id} \n              done={this.editAccountDone} \n              cancel={this.cancelEditAccount}/> : null}\n        {this.state.addCardClicked ? \n          <AddCardDialog \n              userObj={this.state.userObj}  \n              cardExist={this.state.cardExist}\n              setCardDeleted={() => (this.setState({cardExist: false}))}\n              setCardExist={() => (this.setState({cardExist: true}))}\n              userId={this.state.userObj.id}\n              close={() => (this.setState({addCardClicked: false}))} /> : null}\n        <NavBar \n          aboutOpen={this.state.showAboutDialog}\n          title={modeTitle[this.state.mode]} \n          mode={this.state.mode}\n          changeMode={this.handleChangeMode}\n          menuOpen={this.state.menuOpen}\n          toggleMenuOpen={this.toggleMenuOpen}/>\n          <SideMenu \n            toggleAddCardClicked={this.toggleAddCardClicked}\n            type={this.state.userObj.type}\n            changeMode={this.handleChangeMode}\n            menuOpen = {this.state.menuOpen}\n            mode={this.state.mode}\n            toggleMenuOpen={this.toggleMenuOpen}\n            displayName={this.state.userObj.displayName}\n            profilePicURL={this.state.userObj.profilePicURL}\n            localAccount={this.state.userObj.authStrategy === \"local\"}\n            editAccount={this.showEditAccount}\n            logOut={() => this.handleChangeMode(AppMode.LOGIN)}\n            showAbout={() => {this.setState({showAboutDialog: true})}}/>\n          <ModeBar \n            aboutOpen={this.state.showAboutDialog}\n            mode={this.state.mode} \n            changeMode={this.handleChangeMode}\n            menuOpen={this.state.menuOpen}/>\n          <ModePage \n            setUserObjType={this.setUserObjType}\n            menuOpen={this.state.menuOpen}\n            mode={this.state.mode}\n            changeMode={this.handleChangeMode}\n            userObj={this.state.userObj}\n            refreshOnUpdate={this.refreshOnUpdate}/>\n      </div>\n    );  \n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap-social/bootstrap-social.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport './styles/index.css';\nimport App from './components/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}